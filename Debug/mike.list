
mike.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000158c  08013e78  08013e78  00023e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015404  08015404  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015404  08015404  00025404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801540c  0801540c  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801540c  0801540c  0002540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015410  08015410  00025410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  08015414  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  200003f8  0801580c  000303f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f44  0801580c  00034f44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035166  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077e5  00000000  00000000  0006558e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  0006cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b70  00000000  00000000  0006ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba8c  00000000  00000000  000707e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af4b  00000000  00000000  0009c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2734  00000000  00000000  000c71bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a98f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008944  00000000  00000000  001a9948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f8 	.word	0x200003f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e5c 	.word	0x08013e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003fc 	.word	0x200003fc
 80001cc:	08013e5c 	.word	0x08013e5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f84:	f000 fe50 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f88:	f000 f836 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8c:	f000 fa8a 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f90:	f000 fa68 	bl	8001464 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000f94:	f00f fd3c 	bl	8010a10 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000f98:	f000 f898 	bl	80010cc <MX_ADC1_Init>
  MX_TIM6_Init();
 8000f9c:	f000 fa2c 	bl	80013f8 <MX_TIM6_Init>
  MX_FATFS_Init();
 8000fa0:	f005 fffc 	bl	8006f9c <MX_FATFS_Init>
  MX_TIM2_Init();
 8000fa4:	f000 f98c 	bl	80012c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f9d8 	bl	800135c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_draw();
 8000fac:	f006 f996 	bl	80072dc <lcd_draw>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <main+0x70>)
 8000fb2:	f004 fc09 	bl	80057c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <main+0x74>)
 8000fb8:	f004 fc06 	bl	80057c8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fbc:	f00f fd4e 	bl	8010a5c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    tim_start_irq();
 8000fc0:	f00f fa5a 	bl	8010478 <tim_start_irq>
 	adc_transfer_data_to_buffer();
 8000fc4:	f00f f9a6 	bl	8010314 <adc_transfer_data_to_buffer>
 	usb_statemachine();
 8000fc8:	f00f fa72 	bl	80104b0 <usb_statemachine>

 	// Stop
 	if(!measure_get_mode_stop())
 8000fcc:	f00f f83c 	bl	8010048 <measure_get_mode_stop>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f2      	bne.n	8000fbc <main+0x3c>
 	{
 		adc_stop();
 8000fd6:	f00f fa0f 	bl	80103f8 <adc_stop>
 		usb_stop();
 8000fda:	f00f fac1 	bl	8010560 <usb_stop>
 		lcd_stop();
 8000fde:	f006 f991 	bl	8007304 <lcd_stop>
 		clock_reset();
 8000fe2:	f00e fe65 	bl	800fcb0 <clock_reset>
 		debug_reset_counter();
 8000fe6:	f00e fed1 	bl	800fd8c <debug_reset_counter>
 		measure_period_reset_status();
 8000fea:	f00f f8e9 	bl	80101c0 <measure_period_reset_status>
    MX_USB_HOST_Process();
 8000fee:	e7e5      	b.n	8000fbc <main+0x3c>
 8000ff0:	20004174 	.word	0x20004174
 8000ff4:	2000403c 	.word	0x2000403c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f010 f89c 	bl	8011144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001068:	2308      	movs	r3, #8
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800106c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001070:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001076:	2307      	movs	r3, #7
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	4618      	mov	r0, r3
 8001080:	f003 ff12 	bl	8004ea8 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800108a:	f000 fb0d 	bl	80016a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 f973 	bl	8005398 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b8:	f000 faf6 	bl	80016a8 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010de:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80010e0:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <MX_ADC1_Init+0x1ec>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80010e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010f2:	4b70      	ldr	r3, [pc, #448]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b6e      	ldr	r3, [pc, #440]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b69      	ldr	r3, [pc, #420]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800110e:	4a6b      	ldr	r2, [pc, #428]	; (80012bc <MX_ADC1_Init+0x1f0>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8001118:	4b66      	ldr	r3, [pc, #408]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800111a:	220d      	movs	r2, #13
 800111c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800111e:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112c:	4861      	ldr	r0, [pc, #388]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800112e:	f000 fe11 	bl	8001d54 <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 fab6 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800113c:	2301      	movs	r3, #1
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001144:	2307      	movs	r3, #7
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4859      	ldr	r0, [pc, #356]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800114e:	f000 ffc3 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 faa6 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800115c:	2302      	movs	r3, #2
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4619      	mov	r1, r3
 8001168:	4852      	ldr	r0, [pc, #328]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800116a:	f000 ffb5 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001174:	f000 fa98 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001178:	2303      	movs	r3, #3
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800117c:	2303      	movs	r3, #3
 800117e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	484b      	ldr	r0, [pc, #300]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001186:	f000 ffa7 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001190:	f000 fa8a 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001194:	2304      	movs	r3, #4
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4844      	ldr	r0, [pc, #272]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80011a2:	f000 ff99 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011ac:	f000 fa7c 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011b0:	2305      	movs	r3, #5
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011b4:	2305      	movs	r3, #5
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	483d      	ldr	r0, [pc, #244]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80011be:	f000 ff8b 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011c8:	f000 fa6e 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011cc:	2306      	movs	r3, #6
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80011da:	f000 ff7d 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80011e4:	f000 fa60 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011e8:	2307      	movs	r3, #7
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	482f      	ldr	r0, [pc, #188]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 80011f6:	f000 ff6f 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001200:	f000 fa52 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001204:	2308      	movs	r3, #8
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001208:	2308      	movs	r3, #8
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001212:	f000 ff61 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800121c:	f000 fa44 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001220:	2309      	movs	r3, #9
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001224:	2309      	movs	r3, #9
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4821      	ldr	r0, [pc, #132]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800122e:	f000 ff53 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001238:	f000 fa36 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800123c:	230b      	movs	r3, #11
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001240:	230a      	movs	r3, #10
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	481a      	ldr	r0, [pc, #104]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800124a:	f000 ff45 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001254:	f000 fa28 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001258:	230c      	movs	r3, #12
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800125c:	230b      	movs	r3, #11
 800125e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	4619      	mov	r1, r3
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001266:	f000 ff37 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001270:	f000 fa1a 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001274:	230d      	movs	r3, #13
 8001276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001278:	230c      	movs	r3, #12
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 8001282:	f000 ff29 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800128c:	f000 fa0c 	bl	80016a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001290:	230e      	movs	r3, #14
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001294:	230d      	movs	r3, #13
 8001296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC1_Init+0x1e8>)
 800129e:	f000 ff1b 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80012a8:	f000 f9fe 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20004084 	.word	0x20004084
 80012b8:	40012000 	.word	0x40012000
 80012bc:	0f000001 	.word	0x0f000001

080012c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM2_Init+0x94>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM2_Init+0x94>)
 80012e6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80012ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM2_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300000;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM2_Init+0x94>)
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <MX_TIM2_Init+0x98>)
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM2_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM2_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_TIM2_Init+0x94>)
 8001306:	f004 fa0f 	bl	8005728 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001310:	f000 f9ca 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM2_Init+0x94>)
 8001322:	f004 fbc9 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 f9bc 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM2_Init+0x94>)
 800133e:	f004 fde5 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f9ae 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20004174 	.word	0x20004174
 8001358:	000493e0 	.word	0x000493e0

0800135c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM3_Init+0x94>)
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <MX_TIM3_Init+0x98>)
 800137c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_TIM3_Init+0x94>)
 8001380:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001384:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_TIM3_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_TIM3_Init+0x94>)
 800138e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_TIM3_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM3_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_TIM3_Init+0x94>)
 80013a2:	f004 f9c1 	bl	8005728 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013ac:	f000 f97c 	bl	80016a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM3_Init+0x94>)
 80013be:	f004 fb7b 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 f96e 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM3_Init+0x94>)
 80013da:	f004 fd97 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 f960 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000403c 	.word	0x2000403c
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM6_Init+0x64>)
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <MX_TIM6_Init+0x68>)
 800140a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_TIM6_Init+0x64>)
 800140e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001412:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_TIM6_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_TIM6_Init+0x64>)
 800141c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001420:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_TIM6_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_TIM6_Init+0x64>)
 800142a:	f004 f97d 	bl	8005728 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001434:	f000 f938 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_TIM6_Init+0x64>)
 8001446:	f004 fd61 	bl	8005f0c <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001450:	f000 f92a 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000412c 	.word	0x2000412c
 8001460:	40001000 	.word	0x40001000

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_DMA_Init+0x3c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <MX_DMA_Init+0x3c>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_DMA_Init+0x3c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	2100      	movs	r1, #0
 800148a:	2038      	movs	r0, #56	; 0x38
 800148c:	f001 f99f 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001490:	2038      	movs	r0, #56	; 0x38
 8001492:	f001 f9b8 	bl	8002806 <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a73      	ldr	r2, [pc, #460]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b71      	ldr	r3, [pc, #452]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a6c      	ldr	r2, [pc, #432]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b66      	ldr	r3, [pc, #408]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a65      	ldr	r2, [pc, #404]	; (8001690 <MX_GPIO_Init+0x1ec>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b55      	ldr	r3, [pc, #340]	; (8001690 <MX_GPIO_Init+0x1ec>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b51      	ldr	r3, [pc, #324]	; (8001690 <MX_GPIO_Init+0x1ec>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a50      	ldr	r2, [pc, #320]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <MX_GPIO_Init+0x1ec>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DB3_Pin|DB2_Pin|DB0_Pin|DB1_Pin
 8001562:	2200      	movs	r2, #0
 8001564:	2175      	movs	r1, #117	; 0x75
 8001566:	484b      	ldr	r0, [pc, #300]	; (8001694 <MX_GPIO_Init+0x1f0>)
 8001568:	f001 fefc 	bl	8003364 <HAL_GPIO_WritePin>
                          |GLCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2101      	movs	r1, #1
 8001570:	4849      	ldr	r0, [pc, #292]	; (8001698 <MX_GPIO_Init+0x1f4>)
 8001572:	f001 fef7 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin
 8001576:	2200      	movs	r2, #0
 8001578:	f24f 01c4 	movw	r1, #61636	; 0xf0c4
 800157c:	4847      	ldr	r0, [pc, #284]	; (800169c <MX_GPIO_Init+0x1f8>)
 800157e:	f001 fef1 	bl	8003364 <HAL_GPIO_WritePin>
                          |DB7_Pin|DB6_Pin|GLCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GLCD_RESET_Pin|GLCD_FONT_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001588:	4843      	ldr	r0, [pc, #268]	; (8001698 <MX_GPIO_Init+0x1f4>)
 800158a:	f001 feeb 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GLCD_CE_Pin|DB5_Pin|DB4_Pin|GLCD_RD_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001594:	4842      	ldr	r0, [pc, #264]	; (80016a0 <MX_GPIO_Init+0x1fc>)
 8001596:	f001 fee5 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DB3_Pin DB2_Pin DB0_Pin DB1_Pin
                           GLCD_WR_Pin */
  GPIO_InitStruct.Pin = DB3_Pin|DB2_Pin|DB0_Pin|DB1_Pin
 800159a:	2375      	movs	r3, #117	; 0x75
 800159c:	61fb      	str	r3, [r7, #28]
                          |GLCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4838      	ldr	r0, [pc, #224]	; (8001694 <MX_GPIO_Init+0x1f0>)
 80015b2:	f001 fd23 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin GLCD_RESET_Pin GLCD_FONT_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GLCD_RESET_Pin|GLCD_FONT_Pin;
 80015b6:	f240 6301 	movw	r3, #1537	; 0x601
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4832      	ldr	r0, [pc, #200]	; (8001698 <MX_GPIO_Init+0x1f4>)
 80015d0:	f001 fd14 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	482e      	ldr	r0, [pc, #184]	; (80016a4 <MX_GPIO_Init+0x200>)
 80015ea:	f001 fd07 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015ee:	2304      	movs	r3, #4
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4827      	ldr	r0, [pc, #156]	; (80016a0 <MX_GPIO_Init+0x1fc>)
 8001602:	f001 fcfb 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin PUSH_Pin UP_Pin DOWN_Pin
                           RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|PUSH_Pin|UP_Pin|DOWN_Pin
 8001606:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800160a:	61fb      	str	r3, [r7, #28]
                          |RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4820      	ldr	r0, [pc, #128]	; (80016a0 <MX_GPIO_Init+0x1fc>)
 800161e:	f001 fced 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin
                           DB7_Pin DB6_Pin GLCD_CD_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin
 8001622:	f24f 03c4 	movw	r3, #61636	; 0xf0c4
 8001626:	61fb      	str	r3, [r7, #28]
                          |DB7_Pin|DB6_Pin|GLCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <MX_GPIO_Init+0x1f8>)
 800163c:	f001 fcde 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001640:	2320      	movs	r3, #32
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <MX_GPIO_Init+0x1f8>)
 8001654:	f001 fcd2 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCD_CE_Pin DB5_Pin DB4_Pin GLCD_RD_Pin */
  GPIO_InitStruct.Pin = GLCD_CE_Pin|DB5_Pin|DB4_Pin|GLCD_RD_Pin;
 8001658:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <MX_GPIO_Init+0x1fc>)
 8001672:	f001 fcc3 	bl	8002ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2103      	movs	r1, #3
 800167a:	2028      	movs	r0, #40	; 0x28
 800167c:	f001 f8a7 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001680:	2028      	movs	r0, #40	; 0x28
 8001682:	f001 f8c0 	bl	8002806 <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40021000 	.word	0x40021000
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020000 	.word	0x40020000

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80016f6:	2005      	movs	r0, #5
 80016f8:	f001 f85e 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a49      	ldr	r2, [pc, #292]	; (800184c <HAL_ADC_MspInit+0x144>)
 8001726:	4293      	cmp	r3, r2
 8001728:	f040 808b 	bne.w	8001842 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	4a46      	ldr	r2, [pc, #280]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6453      	str	r3, [r2, #68]	; 0x44
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a3f      	ldr	r2, [pc, #252]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a38      	ldr	r2, [pc, #224]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_ADC_MspInit+0x148>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_ADC_MspInit+0x148>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800179c:	231e      	movs	r3, #30
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4829      	ldr	r0, [pc, #164]	; (8001854 <HAL_ADC_MspInit+0x14c>)
 80017b0:	f001 fc24 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80017b4:	23fe      	movs	r3, #254	; 0xfe
 80017b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <HAL_ADC_MspInit+0x150>)
 80017c8:	f001 fc18 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017cc:	2303      	movs	r3, #3
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	481f      	ldr	r0, [pc, #124]	; (800185c <HAL_ADC_MspInit+0x154>)
 80017e0:	f001 fc0c 	bl	8002ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_ADC_MspInit+0x158>)
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_ADC_MspInit+0x15c>)
 80017e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_ADC_MspInit+0x158>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_ADC_MspInit+0x158>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_ADC_MspInit+0x158>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_ADC_MspInit+0x158>)
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_ADC_MspInit+0x158>)
 8001806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800180a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_ADC_MspInit+0x158>)
 800180e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001812:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_ADC_MspInit+0x158>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_ADC_MspInit+0x158>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_ADC_MspInit+0x158>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	; (8001860 <HAL_ADC_MspInit+0x158>)
 8001828:	f001 f808 	bl	800283c <HAL_DMA_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001832:	f7ff ff39 	bl	80016a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_ADC_MspInit+0x158>)
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
 800183c:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_ADC_MspInit+0x158>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	; 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012000 	.word	0x40012000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	200040cc 	.word	0x200040cc
 8001864:	40026410 	.word	0x40026410

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d116      	bne.n	80018a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2102      	movs	r1, #2
 800189a:	201c      	movs	r0, #28
 800189c:	f000 ff97 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 ffb0 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018a6:	e036      	b.n	8001916 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_TIM_Base_MspInit+0xbc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d116      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2103      	movs	r1, #3
 80018d2:	201d      	movs	r0, #29
 80018d4:	f000 ff7b 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d8:	201d      	movs	r0, #29
 80018da:	f000 ff94 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 80018de:	e01a      	b.n	8001916 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_TIM_Base_MspInit+0xc0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d115      	bne.n	8001916 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f000 ff5f 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001910:	2036      	movs	r0, #54	; 0x36
 8001912:	f000 ff78 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40000400 	.word	0x40000400
 8001928:	40001000 	.word	0x40001000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f9a4 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM2_IRQHandler+0x10>)
 800198e:	f003 ff8b 	bl	80058a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20004174 	.word	0x20004174

0800199c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM3_IRQHandler+0x10>)
 80019a2:	f003 ff81 	bl	80058a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000403c 	.word	0x2000403c

080019b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80019b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b8:	f001 fcee 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_Pin);
 80019bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c0:	f001 fcea 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_Pin);
 80019c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019c8:	f001 fce6 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_Pin);
 80019cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d0:	f001 fce2 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC14_OSC32_IN_Pin);
 80019d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019d8:	f001 fcde 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM6_DAC_IRQHandler+0x10>)
 80019e6:	f003 ff5f 	bl	80058a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000412c 	.word	0x2000412c

080019f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA2_Stream0_IRQHandler+0x10>)
 80019fa:	f001 f895 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200040cc 	.word	0x200040cc

08001a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <OTG_FS_IRQHandler+0x10>)
 8001a0e:	f001 ff45 	bl	800389c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20004c30 	.word	0x20004c30

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a36:	f00f fb23 	bl	8011080 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5e:	e7fe      	b.n	8001a5e <_exit+0x12>

08001a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e00a      	b.n	8001a88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a72:	f3af 8000 	nop.w
 8001a76:	4601      	mov	r1, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf0      	blt.n	8001a72 <_read+0x12>
	}

return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e009      	b.n	8001ac0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf1      	blt.n	8001aac <_write+0x12>
	}
	return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_close>:

int _close(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_isatty>:

int _isatty(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	return 1;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f00f fa88 	bl	8011080 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000414 	.word	0x20000414
 8001ba4:	20004f48 	.word	0x20004f48

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SystemInit+0x28>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <SystemInit+0x28>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SystemInit+0x28>)
 8001bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff ffd3 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f00f fa43 	bl	801108c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff f9bb 	bl	8000f80 <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 8001c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c10:	08015414 	.word	0x08015414
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	200003f8 	.word	0x200003f8
  ldr  r2, =_sbss
 8001c1c:	200003f8 	.word	0x200003f8
  ldr  r3, = _ebss
 8001c20:	20004f44 	.word	0x20004f44

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_Init+0x40>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_Init+0x40>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x40>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 fdb1 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fd2c 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fdc9 	bl	8002822 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 fd91 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	200041bc 	.word	0x200041bc

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200041bc 	.word	0x200041bc

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e033      	b.n	8001dd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fcc8 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fab8 	bl	800231c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Start_DMA+0x1e>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e0e9      	b.n	8001fce <HAL_ADC_Start_DMA+0x1f2>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d018      	beq.n	8001e42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <HAL_ADC_Start_DMA+0x1fc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6d      	ldr	r2, [pc, #436]	; (8001fdc <HAL_ADC_Start_DMA+0x200>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9a      	lsrs	r2, r3, #18
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e50:	d107      	bne.n	8001e62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f040 80a1 	bne.w	8001fb4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f023 0206 	bic.w	r2, r3, #6
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ebe:	e002      	b.n	8001ec6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_ADC_Start_DMA+0x204>)
 8001ed0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_ADC_Start_DMA+0x208>)
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	4a42      	ldr	r2, [pc, #264]	; (8001fe8 <HAL_ADC_Start_DMA+0x20c>)
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	4a41      	ldr	r2, [pc, #260]	; (8001fec <HAL_ADC_Start_DMA+0x210>)
 8001ee8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	334c      	adds	r3, #76	; 0x4c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f000 fd38 	bl	8002998 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d12a      	bne.n	8001f8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <HAL_ADC_Start_DMA+0x214>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d015      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x18e>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <HAL_ADC_Start_DMA+0x218>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x178>
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_ADC_Start_DMA+0x204>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_ADC_Start_DMA+0x21c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d136      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_ADC_Start_DMA+0x204>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d130      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d129      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	e020      	b.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_ADC_Start_DMA+0x214>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d11b      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d114      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	e00b      	b.n	8001fcc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f043 0210 	orr.w	r2, r3, #16
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	40012300 	.word	0x40012300
 8001fe4:	08002515 	.word	0x08002515
 8001fe8:	080025cf 	.word	0x080025cf
 8001fec:	080025eb 	.word	0x080025eb
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	40012100 	.word	0x40012100
 8001ff8:	40012200 	.word	0x40012200

08001ffc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Stop_DMA+0x1a>
 8002012:	2302      	movs	r3, #2
 8002014:	e048      	b.n	80020a8 <HAL_ADC_Stop_DMA+0xac>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d130      	bne.n	800209e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d10f      	bne.n	800207a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fcf2 	bl	8002a48 <HAL_DMA_Abort>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002088:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e105      	b.n	8002300 <HAL_ADC_ConfigChannel+0x228>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d925      	bls.n	8002150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43da      	mvns	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	400a      	ands	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	4603      	mov	r3, r0
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4403      	add	r3, r0
 8002142:	3b1e      	subs	r3, #30
 8002144:	409a      	lsls	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	e022      	b.n	8002196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	4603      	mov	r3, r0
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4403      	add	r3, r0
 800218c:	409a      	lsls	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d824      	bhi.n	80021e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b05      	subs	r3, #5
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b05      	subs	r3, #5
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
 80021e6:	e04c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	; 0x23
 8002202:	221f      	movs	r2, #31
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b23      	subs	r3, #35	; 0x23
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
 8002238:	e023      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b41      	subs	r3, #65	; 0x41
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	; 0x41
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_ADC_ConfigChannel+0x234>)
 8002284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_ADC_ConfigChannel+0x238>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_ADC_ConfigChannel+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d003      	beq.n	80022be <HAL_ADC_ConfigChannel+0x1e6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d11b      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_ADC_ConfigChannel+0x23c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a10      	ldr	r2, [pc, #64]	; (8002318 <HAL_ADC_ConfigChannel+0x240>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9a      	lsrs	r2, r3, #18
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e8:	e002      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40012300 	.word	0x40012300
 8002310:	40012000 	.word	0x40012000
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002324:	4b79      	ldr	r3, [pc, #484]	; (800250c <ADC_Init+0x1f0>)
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	4a58      	ldr	r2, [pc, #352]	; (8002510 <ADC_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e00f      	b.n	800241a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0202 	bic.w	r2, r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e1b      	ldrb	r3, [r3, #24]
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	e007      	b.n	8002490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d2:	025a      	lsls	r2, r3, #9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	029a      	lsls	r2, r3, #10
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	0f000001 	.word	0x0f000001

08002514 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d13c      	bne.n	80025a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d12b      	bne.n	80025a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d127      	bne.n	80025a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002568:	2b00      	cmp	r3, #0
 800256a:	d119      	bne.n	80025a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0220 	bic.w	r2, r2, #32
 800257a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f00d ff0f 	bl	80103c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025a6:	e00e      	b.n	80025c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fd85 	bl	80020c4 <HAL_ADC_ErrorCallback>
}
 80025ba:	e004      	b.n	80025c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fd67 	bl	80020b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff fd5a 	bl	80020c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff3e 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff31 	bl	800267c <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fa54 	bl	8001cf4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e099      	b.n	800298c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e00f      	b.n	800289a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff fa3b 	bl	8001cf4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d908      	bls.n	800289a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e078      	b.n	800298c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e8      	bne.n	800287a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_DMA_Init+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	4313      	orrs	r3, r2
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b04      	cmp	r3, #4
 800292c:	d117      	bne.n	800295e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fadf 	bl	8002f04 <DMA_CheckFifoParam>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800295a:	2301      	movs	r3, #1
 800295c:	e016      	b.n	800298c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa96 	bl	8002e98 <DMA_CalcBaseAndBitshift>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	223f      	movs	r2, #63	; 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	f010803f 	.word	0xf010803f

08002998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Start_IT+0x26>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e040      	b.n	8002a40 <HAL_DMA_Start_IT+0xa8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d12f      	bne.n	8002a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fa28 	bl	8002e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	223f      	movs	r2, #63	; 0x3f
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0216 	orr.w	r2, r2, #22
 8002a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0208 	orr.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e005      	b.n	8002a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a56:	f7ff f94d 	bl	8001cf4 <HAL_GetTick>
 8002a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e052      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_Abort+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	e013      	b.n	8002af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002acc:	f7ff f912 	bl	8001cf4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d90c      	bls.n	8002af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e015      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e4      	bne.n	8002acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	223f      	movs	r2, #63	; 0x3f
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b34:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <HAL_DMA_IRQHandler+0x258>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_DMA_IRQHandler+0x25c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a9b      	lsrs	r3, r3, #10
 8002b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2204      	movs	r2, #4
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2210      	movs	r2, #16
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d043      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2210      	movs	r2, #16
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e01f      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0208 	bic.w	r2, r2, #8
 8002c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 808e 	beq.w	8002dc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8086 	beq.w	8002dc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d136      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0216 	bic.w	r2, r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x1da>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d07d      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
        }
        return;
 8002d3e:	e078      	b.n	8002e32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d108      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d030      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e02b      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d027      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	e022      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x29e>
 8002d80:	20000000 	.word	0x20000000
 8002d84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0210 	bic.w	r2, r2, #16
 8002da4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d032      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d022      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2205      	movs	r2, #5
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d307      	bcc.n	8002e0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f2      	bne.n	8002df2 <HAL_DMA_IRQHandler+0x2ca>
 8002e0c:	e000      	b.n	8002e10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
 8002e30:	e000      	b.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e32:	bf00      	nop
    }
  }
}
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop

08002e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d108      	bne.n	8002e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e7a:	e007      	b.n	8002e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b10      	subs	r3, #16
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <DMA_CalcBaseAndBitshift+0x64>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d909      	bls.n	8002eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed8:	e007      	b.n	8002eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	aaaaaaab 	.word	0xaaaaaaab
 8002f00:	08013ff8 	.word	0x08013ff8

08002f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0x5a>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d856      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xce>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <DMA_CheckFifoParam+0x28>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4f 	.word	0x08002f4f
 8002f34:	08002f3d 	.word	0x08002f3d
 8002f38:	08002fd3 	.word	0x08002fd3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d046      	beq.n	8002fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4c:	e043      	b.n	8002fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f56:	d140      	bne.n	8002fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e03d      	b.n	8002fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d121      	bne.n	8002fac <DMA_CheckFifoParam+0xa8>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d837      	bhi.n	8002fde <DMA_CheckFifoParam+0xda>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <DMA_CheckFifoParam+0x70>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f8b 	.word	0x08002f8b
 8002f7c:	08002f85 	.word	0x08002f85
 8002f80:	08002f9d 	.word	0x08002f9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e030      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d025      	beq.n	8002fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9a:	e022      	b.n	8002fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa4:	d11f      	bne.n	8002fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002faa:	e01c      	b.n	8002fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d903      	bls.n	8002fba <DMA_CheckFifoParam+0xb6>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d003      	beq.n	8002fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb8:	e018      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbe:	e015      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00e      	beq.n	8002fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e00b      	b.n	8002fea <DMA_CheckFifoParam+0xe6>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e00a      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e008      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e006      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
    }
  } 
  
  return status; 
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e16b      	b.n	80032f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 815a 	bne.w	80032ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	2b02      	cmp	r3, #2
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b4 	beq.w	80032ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_GPIO_Init+0x30c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a5f      	ldr	r2, [pc, #380]	; (8003308 <HAL_GPIO_Init+0x30c>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_GPIO_Init+0x30c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_GPIO_Init+0x310>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_GPIO_Init+0x314>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_GPIO_Init+0x318>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a50      	ldr	r2, [pc, #320]	; (8003318 <HAL_GPIO_Init+0x31c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4f      	ldr	r2, [pc, #316]	; (800331c <HAL_GPIO_Init+0x320>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x21a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_GPIO_Init+0x324>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x216>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_GPIO_Init+0x328>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4b      	ldr	r2, [pc, #300]	; (800332c <HAL_GPIO_Init+0x330>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x20a>
 8003202:	2307      	movs	r3, #7
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003206:	2308      	movs	r3, #8
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4935      	ldr	r1, [pc, #212]	; (800330c <HAL_GPIO_Init+0x310>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003266:	4a32      	ldr	r2, [pc, #200]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <HAL_GPIO_Init+0x334>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e4:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_GPIO_Init+0x334>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f ae90 	bls.w	8003018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40013800 	.word	0x40013800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40021400 	.word	0x40021400
 8003328:	40021800 	.word	0x40021800
 800332c:	40021c00 	.word	0x40021c00
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e001      	b.n	8003356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	041a      	lsls	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	619a      	str	r2, [r3, #24]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00c fa62 	bl	800f880 <HAL_GPIO_EXTI_Callback>
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b08f      	sub	sp, #60	; 0x3c
 80033cc:	af0a      	add	r7, sp, #40	; 0x28
 80033ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e054      	b.n	8003484 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f00d fb69 	bl	8010acc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fe79 	bl	8006110 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	687e      	ldr	r6, [r7, #4]
 8003426:	466d      	mov	r5, sp
 8003428:	f106 0410 	add.w	r4, r6, #16
 800342c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003438:	e885 0003 	stmia.w	r5, {r0, r1}
 800343c:	1d33      	adds	r3, r6, #4
 800343e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003440:	6838      	ldr	r0, [r7, #0]
 8003442:	f002 fdf3 	bl	800602c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f002 fe70 	bl	8006132 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	687e      	ldr	r6, [r7, #4]
 800345a:	466d      	mov	r5, sp
 800345c:	f106 0410 	add.w	r4, r6, #16
 8003460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003468:	e894 0003 	ldmia.w	r4, {r0, r1}
 800346c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003470:	1d33      	adds	r3, r6, #4
 8003472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	f002 ffd7 	bl	8006428 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800348c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	70fb      	strb	r3, [r7, #3]
 800349e:	460b      	mov	r3, r1
 80034a0:	70bb      	strb	r3, [r7, #2]
 80034a2:	4613      	mov	r3, r2
 80034a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_HCD_HC_Init+0x28>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e076      	b.n	80035a2 <HAL_HCD_HC_Init+0x116>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	333d      	adds	r3, #61	; 0x3d
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3338      	adds	r3, #56	; 0x38
 80034dc:	787a      	ldrb	r2, [r7, #1]
 80034de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3340      	adds	r3, #64	; 0x40
 80034ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3339      	adds	r3, #57	; 0x39
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	333f      	adds	r3, #63	; 0x3f
 8003512:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	78ba      	ldrb	r2, [r7, #2]
 800351c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003520:	b2d0      	uxtb	r0, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	333a      	adds	r3, #58	; 0x3a
 800352e:	4602      	mov	r2, r0
 8003530:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003532:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da09      	bge.n	800354e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	333b      	adds	r3, #59	; 0x3b
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e008      	b.n	8003560 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	333b      	adds	r3, #59	; 0x3b
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	333c      	adds	r3, #60	; 0x3c
 800356e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003572:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	787c      	ldrb	r4, [r7, #1]
 800357a:	78ba      	ldrb	r2, [r7, #2]
 800357c:	78f9      	ldrb	r1, [r7, #3]
 800357e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4623      	mov	r3, r4
 8003590:	f003 f8c4 	bl	800671c <USB_HC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_HCD_HC_Halt+0x1e>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e00f      	b.n	80035e8 <HAL_HCD_HC_Halt+0x3e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fb00 	bl	8006bde <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	70fb      	strb	r3, [r7, #3]
 8003602:	460b      	mov	r3, r1
 8003604:	70bb      	strb	r3, [r7, #2]
 8003606:	4613      	mov	r3, r2
 8003608:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	333b      	adds	r3, #59	; 0x3b
 8003618:	78ba      	ldrb	r2, [r7, #2]
 800361a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	333f      	adds	r3, #63	; 0x3f
 800362a:	787a      	ldrb	r2, [r7, #1]
 800362c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800362e:	7c3b      	ldrb	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d112      	bne.n	800365a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3342      	adds	r3, #66	; 0x42
 8003642:	2203      	movs	r2, #3
 8003644:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	333d      	adds	r3, #61	; 0x3d
 8003654:	7f3a      	ldrb	r2, [r7, #28]
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e008      	b.n	800366c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3342      	adds	r3, #66	; 0x42
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b03      	cmp	r3, #3
 8003670:	f200 80c6 	bhi.w	8003800 <HAL_HCD_HC_SubmitRequest+0x210>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	0800368d 	.word	0x0800368d
 8003680:	080037ed 	.word	0x080037ed
 8003684:	080036f1 	.word	0x080036f1
 8003688:	0800376f 	.word	0x0800376f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800368c:	7c3b      	ldrb	r3, [r7, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	f040 80b8 	bne.w	8003804 <HAL_HCD_HC_SubmitRequest+0x214>
 8003694:	78bb      	ldrb	r3, [r7, #2]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 80b4 	bne.w	8003804 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800369c:	8b3b      	ldrh	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3355      	adds	r3, #85	; 0x55
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	212c      	movs	r1, #44	; 0x2c
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3355      	adds	r3, #85	; 0x55
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3342      	adds	r3, #66	; 0x42
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036da:	e093      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3342      	adds	r3, #66	; 0x42
 80036ea:	2202      	movs	r2, #2
 80036ec:	701a      	strb	r2, [r3, #0]
      break;
 80036ee:	e089      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036f0:	78bb      	ldrb	r3, [r7, #2]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11d      	bne.n	8003732 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3355      	adds	r3, #85	; 0x55
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3342      	adds	r3, #66	; 0x42
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800371c:	e073      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3342      	adds	r3, #66	; 0x42
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
      break;
 8003730:	e069      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	212c      	movs	r1, #44	; 0x2c
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	4413      	add	r3, r2
 800373e:	3354      	adds	r3, #84	; 0x54
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	3342      	adds	r3, #66	; 0x42
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
      break;
 8003758:	e055      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3342      	adds	r3, #66	; 0x42
 8003768:	2202      	movs	r2, #2
 800376a:	701a      	strb	r2, [r3, #0]
      break;
 800376c:	e04b      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800376e:	78bb      	ldrb	r3, [r7, #2]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11d      	bne.n	80037b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3355      	adds	r3, #85	; 0x55
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3342      	adds	r3, #66	; 0x42
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800379a:	e034      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3342      	adds	r3, #66	; 0x42
 80037aa:	2202      	movs	r2, #2
 80037ac:	701a      	strb	r2, [r3, #0]
      break;
 80037ae:	e02a      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3354      	adds	r3, #84	; 0x54
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3342      	adds	r3, #66	; 0x42
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	e016      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3342      	adds	r3, #66	; 0x42
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]
      break;
 80037ea:	e00c      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3342      	adds	r3, #66	; 0x42
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003804:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3344      	adds	r3, #68	; 0x44
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	8b3a      	ldrh	r2, [r7, #24]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	202c      	movs	r0, #44	; 0x2c
 8003820:	fb00 f303 	mul.w	r3, r0, r3
 8003824:	440b      	add	r3, r1
 8003826:	334c      	adds	r3, #76	; 0x4c
 8003828:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	3360      	adds	r3, #96	; 0x60
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3350      	adds	r3, #80	; 0x50
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3339      	adds	r3, #57	; 0x39
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3361      	adds	r3, #97	; 0x61
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	222c      	movs	r2, #44	; 0x2c
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	3338      	adds	r3, #56	; 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	18d1      	adds	r1, r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	f003 f854 	bl	8006938 <USB_HC_StartXfer>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop

0800389c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fd77 	bl	80063a6 <USB_GetMode>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 80f6 	bne.w	8003aac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fd5b 	bl	8006380 <USB_ReadInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80ec 	beq.w	8003aaa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fd52 	bl	8006380 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e6:	d104      	bne.n	80038f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 fd42 	bl	8006380 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	d104      	bne.n	8003912 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003910:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f002 fd32 	bl	8006380 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003926:	d104      	bne.n	8003932 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003930:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fd22 	bl	8006380 <USB_ReadInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2202      	movs	r2, #2
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f002 fd14 	bl	8006380 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003962:	d11c      	bne.n	800399e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800396c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800397e:	2110      	movs	r1, #16
 8003980:	6938      	ldr	r0, [r7, #16]
 8003982:	f002 fc23 	bl	80061cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f002 fc44 	bl	8006214 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fdfc 	bl	8006590 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00d f915 	bl	8010bc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 fcec 	bl	8006380 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b2:	d102      	bne.n	80039ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f001 fa03 	bl	8004dc0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fcde 	bl	8006380 <USB_ReadInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d106      	bne.n	80039dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f00d f8de 	bl	8010b90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2208      	movs	r2, #8
 80039da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fccd 	bl	8006380 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d101      	bne.n	80039f4 <HAL_HCD_IRQHandler+0x158>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_HCD_IRQHandler+0x15a>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0210 	bic.w	r2, r2, #16
 8003a08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 f906 	bl	8004c1c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0210 	orr.w	r2, r2, #16
 8003a1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 fcab 	bl	8006380 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a34:	d13a      	bne.n	8003aac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f8be 	bl	8006bbc <USB_HC_ReadInterrupt>
 8003a40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e025      	b.n	8003a94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	d106      	bne.n	8003a82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8ab 	bl	8003bd6 <HCD_HC_IN_IRQHandler>
 8003a80:	e005      	b.n	8003a8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fcc6 	bl	800441a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3d4      	bcc.n	8003a48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa6:	615a      	str	r2, [r3, #20]
 8003aa8:	e000      	b.n	8003aac <HAL_HCD_IRQHandler+0x210>
      return;
 8003aaa:	bf00      	nop
    }
  }
}
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_HCD_Start+0x16>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e013      	b.n	8003af0 <HAL_HCD_Start+0x3e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fdbe 	bl	8006658 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 fb04 	bl	80060ee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_HCD_Stop+0x16>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e00d      	b.n	8003b2a <HAL_HCD_Stop+0x32>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 f9b8 	bl	8006e90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f002 fd60 	bl	8006604 <USB_ResetPort>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	781b      	ldrb	r3, [r3, #0]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3350      	adds	r3, #80	; 0x50
 8003b90:	681b      	ldr	r3, [r3, #0]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f002 fda4 	bl	80066f8 <USB_GetCurrentFrame>
 8003bb0:	4603      	mov	r3, r0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fd7f 	bl	80066ca <USB_GetHostSpeed>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d119      	bne.n	8003c3a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	461a      	mov	r2, r3
 8003c14:	2304      	movs	r3, #4
 8003c16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c32:	f043 0302 	orr.w	r3, r3, #2
 8003c36:	60d3      	str	r3, [r2, #12]
 8003c38:	e101      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d12b      	bne.n	8003caa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3361      	adds	r3, #97	; 0x61
 8003c74:	2207      	movs	r2, #7
 8003c76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 ff9b 	bl	8006bde <USB_HC_Halt>
 8003ca8:	e0c9      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d109      	bne.n	8003cd4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2320      	movs	r3, #32
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e0b4      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d133      	bne.n	8003d52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3361      	adds	r3, #97	; 0x61
 8003d18:	2205      	movs	r2, #5
 8003d1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 ff47 	bl	8006bde <USB_HC_Halt>
 8003d50:	e075      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d134      	bne.n	8003dd4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3361      	adds	r3, #97	; 0x61
 8003d98:	2208      	movs	r2, #8
 8003d9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	2310      	movs	r3, #16
 8003dac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 ff06 	bl	8006bde <USB_HC_Halt>
 8003dd2:	e034      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b80      	cmp	r3, #128	; 0x80
 8003de8:	d129      	bne.n	8003e3e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	3361      	adds	r3, #97	; 0x61
 8003e18:	2206      	movs	r2, #6
 8003e1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fed9 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e54:	d122      	bne.n	8003e9c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 feac 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e98:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e9a:	e2ba      	b.n	8004412 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 811b 	bne.w	80040ea <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d019      	beq.n	8003ef0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3348      	adds	r3, #72	; 0x48
 8003eca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	0159      	lsls	r1, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	202c      	movs	r0, #44	; 0x2c
 8003ee6:	fb00 f303 	mul.w	r3, r0, r3
 8003eea:	440b      	add	r3, r1
 8003eec:	3350      	adds	r3, #80	; 0x50
 8003eee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3361      	adds	r3, #97	; 0x61
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2301      	movs	r3, #1
 8003f24:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	333f      	adds	r3, #63	; 0x3f
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	333f      	adds	r3, #63	; 0x3f
 8003f48:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d121      	bne.n	8003f92 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fe30 	bl	8006bde <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	6093      	str	r3, [r2, #8]
 8003f90:	e066      	b.n	8004060 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	333f      	adds	r3, #63	; 0x3f
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d127      	bne.n	8003ff6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3360      	adds	r3, #96	; 0x60
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	b2d9      	uxtb	r1, r3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	202c      	movs	r0, #44	; 0x2c
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3360      	adds	r3, #96	; 0x60
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f00c fdf8 	bl	8010be4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff4:	e034      	b.n	8004060 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	333f      	adds	r3, #63	; 0x3f
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12a      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3360      	adds	r3, #96	; 0x60
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	3354      	adds	r3, #84	; 0x54
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2d8      	uxtb	r0, r3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3354      	adds	r3, #84	; 0x54
 8004040:	4602      	mov	r2, r0
 8004042:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	202c      	movs	r0, #44	; 0x2c
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f00c fdc2 	bl	8010be4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d12b      	bne.n	80040c0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3348      	adds	r3, #72	; 0x48
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	202c      	movs	r0, #44	; 0x2c
 800407e:	fb00 f202 	mul.w	r2, r0, r2
 8004082:	440a      	add	r2, r1
 8004084:	3240      	adds	r2, #64	; 0x40
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	fbb3 f3f2 	udiv	r3, r3, r2
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 81be 	beq.w	8004412 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3354      	adds	r3, #84	; 0x54
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2d8      	uxtb	r0, r3
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	3354      	adds	r3, #84	; 0x54
 80040ba:	4602      	mov	r2, r0
 80040bc:	701a      	strb	r2, [r3, #0]
}
 80040be:	e1a8      	b.n	8004412 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	212c      	movs	r1, #44	; 0x2c
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	3354      	adds	r3, #84	; 0x54
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f083 0301 	eor.w	r3, r3, #1
 80040d4:	b2d8      	uxtb	r0, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3354      	adds	r3, #84	; 0x54
 80040e4:	4602      	mov	r2, r0
 80040e6:	701a      	strb	r2, [r3, #0]
}
 80040e8:	e193      	b.n	8004412 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	f040 8106 	bne.w	800430e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	440a      	add	r2, r1
 8004118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	212c      	movs	r1, #44	; 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3361      	adds	r3, #97	; 0x61
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d109      	bne.n	800414a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3360      	adds	r3, #96	; 0x60
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e0c9      	b.n	80042de <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3361      	adds	r3, #97	; 0x61
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b05      	cmp	r3, #5
 800415c:	d109      	bne.n	8004172 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	2205      	movs	r2, #5
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e0b5      	b.n	80042de <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	3361      	adds	r3, #97	; 0x61
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b06      	cmp	r3, #6
 8004184:	d009      	beq.n	800419a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3361      	adds	r3, #97	; 0x61
 8004194:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004196:	2b08      	cmp	r3, #8
 8004198:	d150      	bne.n	800423c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	335c      	adds	r3, #92	; 0x5c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	202c      	movs	r0, #44	; 0x2c
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	440b      	add	r3, r1
 80041b8:	335c      	adds	r3, #92	; 0x5c
 80041ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	335c      	adds	r3, #92	; 0x5c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d912      	bls.n	80041f6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	335c      	adds	r3, #92	; 0x5c
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3360      	adds	r3, #96	; 0x60
 80041f0:	2204      	movs	r2, #4
 80041f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041f4:	e073      	b.n	80042de <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3360      	adds	r3, #96	; 0x60
 8004204:	2202      	movs	r2, #2
 8004206:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800421e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004226:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800423a:	e050      	b.n	80042de <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3361      	adds	r3, #97	; 0x61
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d122      	bne.n	8004296 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3360      	adds	r3, #96	; 0x60
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004278:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004280:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e023      	b.n	80042de <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3361      	adds	r3, #97	; 0x61
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d119      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	335c      	adds	r3, #92	; 0x5c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	202c      	movs	r0, #44	; 0x2c
 80042c2:	fb00 f303 	mul.w	r3, r0, r3
 80042c6:	440b      	add	r3, r1
 80042c8:	335c      	adds	r3, #92	; 0x5c
 80042ca:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3360      	adds	r3, #96	; 0x60
 80042da:	2204      	movs	r2, #4
 80042dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2302      	movs	r3, #2
 80042ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	b2d9      	uxtb	r1, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	202c      	movs	r0, #44	; 0x2c
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3360      	adds	r3, #96	; 0x60
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00c fc6c 	bl	8010be4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800430c:	e081      	b.n	8004412 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d176      	bne.n	8004412 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	212c      	movs	r1, #44	; 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	333f      	adds	r3, #63	; 0x3f
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d121      	bne.n	800437c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	335c      	adds	r3, #92	; 0x5c
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	440a      	add	r2, r1
 8004360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f002 fc32 	bl	8006bde <USB_HC_Halt>
 800437a:	e041      	b.n	8004400 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	333f      	adds	r3, #63	; 0x3f
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	333f      	adds	r3, #63	; 0x3f
 800439e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d12d      	bne.n	8004400 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	212c      	movs	r1, #44	; 0x2c
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	4413      	add	r3, r2
 80043b0:	335c      	adds	r3, #92	; 0x5c
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d120      	bne.n	8004400 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	212c      	movs	r1, #44	; 0x2c
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	3361      	adds	r3, #97	; 0x61
 80043cc:	2203      	movs	r2, #3
 80043ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 fbef 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	2310      	movs	r3, #16
 8004410:	6093      	str	r3, [r2, #8]
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d119      	bne.n	800447e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	2304      	movs	r3, #4
 800445a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	440a      	add	r2, r1
 8004472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800447c:	e3ca      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d13e      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	461a      	mov	r2, r3
 80044a2:	2320      	movs	r3, #32
 80044a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	333d      	adds	r3, #61	; 0x3d
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	f040 83ac 	bne.w	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	333d      	adds	r3, #61	; 0x3d
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	3360      	adds	r3, #96	; 0x60
 80044dc:	2202      	movs	r2, #2
 80044de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fb67 	bl	8006bde <USB_HC_Halt>
}
 8004510:	e380      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d122      	bne.n	8004570 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	440a      	add	r2, r1
 8004540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f002 fb42 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800456c:	6093      	str	r3, [r2, #8]
}
 800456e:	e351      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d150      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d111      	bne.n	80045d2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	333d      	adds	r3, #61	; 0x3d
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	461a      	mov	r2, r3
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 faee 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	461a      	mov	r2, r3
 8004610:	2301      	movs	r3, #1
 8004612:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3361      	adds	r3, #97	; 0x61
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
}
 8004626:	e2f5      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d13c      	bne.n	80046b8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	212c      	movs	r1, #44	; 0x2c
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3361      	adds	r3, #97	; 0x61
 800464c:	2204      	movs	r2, #4
 800464e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	333d      	adds	r3, #61	; 0x3d
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	335c      	adds	r3, #92	; 0x5c
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	440a      	add	r2, r1
 800468a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f002 fa9d 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b0:	461a      	mov	r2, r3
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	6093      	str	r3, [r2, #8]
}
 80046b6:	e2ad      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d12a      	bne.n	8004724 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	461a      	mov	r2, r3
 80046dc:	2308      	movs	r3, #8
 80046de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f002 fa67 	bl	8006bde <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	; 0x61
 800471e:	2205      	movs	r2, #5
 8004720:	701a      	strb	r2, [r3, #0]
}
 8004722:	e277      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d150      	bne.n	80047dc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	335c      	adds	r3, #92	; 0x5c
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	2203      	movs	r2, #3
 800475c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	333d      	adds	r3, #61	; 0x3d
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d112      	bne.n	8004798 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	333c      	adds	r3, #60	; 0x3c
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	333d      	adds	r3, #61	; 0x3d
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 fa0b 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d4:	461a      	mov	r2, r3
 80047d6:	2310      	movs	r3, #16
 80047d8:	6093      	str	r3, [r2, #8]
}
 80047da:	e21b      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d174      	bne.n	80048dc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d121      	bne.n	800483e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3361      	adds	r3, #97	; 0x61
 8004808:	2206      	movs	r2, #6
 800480a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f002 f9d1 	bl	8006bde <USB_HC_Halt>
 800483c:	e044      	b.n	80048c8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	335c      	adds	r3, #92	; 0x5c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	202c      	movs	r0, #44	; 0x2c
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	440b      	add	r3, r1
 800485c:	335c      	adds	r3, #92	; 0x5c
 800485e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	335c      	adds	r3, #92	; 0x5c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d920      	bls.n	80048b6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	335c      	adds	r3, #92	; 0x5c
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	2204      	movs	r2, #4
 8004896:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	b2d9      	uxtb	r1, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	202c      	movs	r0, #44	; 0x2c
 80048a2:	fb00 f303 	mul.w	r3, r0, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3360      	adds	r3, #96	; 0x60
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f00c f998 	bl	8010be4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048b4:	e008      	b.n	80048c8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	3360      	adds	r3, #96	; 0x60
 80048c4:	2202      	movs	r2, #2
 80048c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	6093      	str	r3, [r2, #8]
}
 80048da:	e19b      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d134      	bne.n	800495e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	440a      	add	r2, r1
 800490a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f002 f95d 	bl	8006bde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	461a      	mov	r2, r3
 8004932:	2310      	movs	r3, #16
 8004934:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	461a      	mov	r2, r3
 8004944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004948:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	3361      	adds	r3, #97	; 0x61
 8004958:	2208      	movs	r2, #8
 800495a:	701a      	strb	r2, [r3, #0]
}
 800495c:	e15a      	b.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	f040 814f 	bne.w	8004c14 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	440a      	add	r2, r1
 800498c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004990:	f023 0302 	bic.w	r3, r3, #2
 8004994:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	3361      	adds	r3, #97	; 0x61
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d17d      	bne.n	8004aa6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3360      	adds	r3, #96	; 0x60
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	333f      	adds	r3, #63	; 0x3f
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d00a      	beq.n	80049e6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	333f      	adds	r3, #63	; 0x3f
 80049de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	f040 8100 	bne.w	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d113      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3355      	adds	r3, #85	; 0x55
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2d8      	uxtb	r0, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3355      	adds	r3, #85	; 0x55
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	f040 80e3 	bne.w	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	334c      	adds	r3, #76	; 0x4c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80d8 	beq.w	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	334c      	adds	r3, #76	; 0x4c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	202c      	movs	r0, #44	; 0x2c
 8004a4c:	fb00 f202 	mul.w	r2, r0, r2
 8004a50:	440a      	add	r2, r1
 8004a52:	3240      	adds	r2, #64	; 0x40
 8004a54:	8812      	ldrh	r2, [r2, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	202c      	movs	r0, #44	; 0x2c
 8004a60:	fb00 f202 	mul.w	r2, r0, r2
 8004a64:	440a      	add	r2, r1
 8004a66:	3240      	adds	r2, #64	; 0x40
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80b5 	beq.w	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3355      	adds	r3, #85	; 0x55
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2d8      	uxtb	r0, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3355      	adds	r3, #85	; 0x55
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e09f      	b.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3361      	adds	r3, #97	; 0x61
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d109      	bne.n	8004ace <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3360      	adds	r3, #96	; 0x60
 8004ac8:	2202      	movs	r2, #2
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e08b      	b.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3361      	adds	r3, #97	; 0x61
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d109      	bne.n	8004af6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3360      	adds	r3, #96	; 0x60
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e077      	b.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3361      	adds	r3, #97	; 0x61
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d109      	bne.n	8004b1e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3360      	adds	r3, #96	; 0x60
 8004b18:	2205      	movs	r2, #5
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e063      	b.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3361      	adds	r3, #97	; 0x61
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d009      	beq.n	8004b46 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3361      	adds	r3, #97	; 0x61
 8004b40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d14f      	bne.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	335c      	adds	r3, #92	; 0x5c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	202c      	movs	r0, #44	; 0x2c
 8004b5e:	fb00 f303 	mul.w	r3, r0, r3
 8004b62:	440b      	add	r3, r1
 8004b64:	335c      	adds	r3, #92	; 0x5c
 8004b66:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	335c      	adds	r3, #92	; 0x5c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d912      	bls.n	8004ba2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	335c      	adds	r3, #92	; 0x5c
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3360      	adds	r3, #96	; 0x60
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e021      	b.n	8004be6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3360      	adds	r3, #96	; 0x60
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bca:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bd2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be0:	461a      	mov	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	b2d9      	uxtb	r1, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	202c      	movs	r0, #44	; 0x2c
 8004c02:	fb00 f303 	mul.w	r3, r0, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3360      	adds	r3, #96	; 0x60
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f00b ffe8 	bl	8010be4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004c14:	bf00      	nop
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	0c5b      	lsrs	r3, r3, #17
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c50:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d004      	beq.n	8004c62 <HCD_RXQLVL_IRQHandler+0x46>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b05      	cmp	r3, #5
 8004c5c:	f000 80a9 	beq.w	8004db2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c60:	e0aa      	b.n	8004db8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a6 	beq.w	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3344      	adds	r3, #68	; 0x44
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 809b 	beq.w	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	212c      	movs	r1, #44	; 0x2c
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3350      	adds	r3, #80	; 0x50
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	441a      	add	r2, r3
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	202c      	movs	r0, #44	; 0x2c
 8004c9a:	fb00 f303 	mul.w	r3, r0, r3
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334c      	adds	r3, #76	; 0x4c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d87a      	bhi.n	8004d9e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	212c      	movs	r1, #44	; 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3344      	adds	r3, #68	; 0x44
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f001 fb05 	bl	80062d0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3344      	adds	r3, #68	; 0x44
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	441a      	add	r2, r3
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	202c      	movs	r0, #44	; 0x2c
 8004ce0:	fb00 f303 	mul.w	r3, r0, r3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3344      	adds	r3, #68	; 0x44
 8004ce8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	212c      	movs	r1, #44	; 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3350      	adds	r3, #80	; 0x50
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	202c      	movs	r0, #44	; 0x2c
 8004d04:	fb00 f303 	mul.w	r3, r0, r3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3350      	adds	r3, #80	; 0x50
 8004d0c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	0cdb      	lsrs	r3, r3, #19
 8004d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d22:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3340      	adds	r3, #64	; 0x40
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d13c      	bne.n	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d039      	beq.n	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d58:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d60:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	212c      	movs	r1, #44	; 0x2c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3354      	adds	r3, #84	; 0x54
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f083 0301 	eor.w	r3, r3, #1
 8004d88:	b2d8      	uxtb	r0, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	212c      	movs	r1, #44	; 0x2c
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	3354      	adds	r3, #84	; 0x54
 8004d98:	4602      	mov	r2, r0
 8004d9a:	701a      	strb	r2, [r3, #0]
      break;
 8004d9c:	e00b      	b.n	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	3360      	adds	r3, #96	; 0x60
 8004dac:	2204      	movs	r2, #4
 8004dae:	701a      	strb	r2, [r3, #0]
      break;
 8004db0:	e001      	b.n	8004db6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004db6:	bf00      	nop
  }
}
 8004db8:	bf00      	nop
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d10b      	bne.n	8004e10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f00b fed2 	bl	8010bac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d132      	bne.n	8004e80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f043 0308 	orr.w	r3, r3, #8
 8004e20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d126      	bne.n	8004e7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d113      	bne.n	8004e5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e3e:	d106      	bne.n	8004e4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fba2 	bl	8006590 <USB_InitFSLSPClkSel>
 8004e4c:	e011      	b.n	8004e72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fb9b 	bl	8006590 <USB_InitFSLSPClkSel>
 8004e5a:	e00a      	b.n	8004e72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f00b fec4 	bl	8010c00 <HAL_HCD_PortEnabled_Callback>
 8004e78:	e002      	b.n	8004e80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f00b fece 	bl	8010c1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d103      	bne.n	8004e92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f043 0320 	orr.w	r3, r3, #32
 8004e90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6013      	str	r3, [r2, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e264      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e23f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b91      	ldr	r3, [pc, #580]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a90      	ldr	r2, [pc, #576]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a87      	ldr	r2, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a83      	ldr	r2, [pc, #524]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fc fec8 	bl	8001cf4 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc fec4 	bl	8001cf4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e204      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fc feb4 	bl	8001cf4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fc feb0 	bl	8001cf4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1f0      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b62      	ldr	r3, [pc, #392]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1c4      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4952      	ldr	r1, [pc, #328]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc fe69 	bl	8001cf4 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fc fe65 	bl	8001cf4 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4940      	ldr	r1, [pc, #256]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fc fe48 	bl	8001cf4 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fc fe44 	bl	8001cf4 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e184      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d030      	beq.n	80050f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc fe28 	bl	8001cf4 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fc fe24 	bl	8001cf4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e164      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e015      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fc fe11 	bl	8001cf4 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fc fe0d 	bl	8001cf4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14d      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a0 	beq.w	8005242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a07      	ldr	r2, [pc, #28]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fc fdd3 	bl	8001cf4 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e011      	b.n	8005176 <HAL_RCC_OscConfig+0x2ce>
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
 8005160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fc fdc6 	bl	8001cf4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e106      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x4e4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x2f0>
 800518a:	4b81      	ldr	r3, [pc, #516]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a80      	ldr	r2, [pc, #512]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x312>
 80051a0:	4b7b      	ldr	r3, [pc, #492]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b78      	ldr	r3, [pc, #480]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a77      	ldr	r2, [pc, #476]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 80051ba:	4b75      	ldr	r3, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a74      	ldr	r2, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b72      	ldr	r3, [pc, #456]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a71      	ldr	r2, [pc, #452]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fc fd8b 	bl	8001cf4 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fc fd87 	bl	8001cf4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0c5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x33a>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fc fd75 	bl	8001cf4 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fd71 	bl	8001cf4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0af      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b5a      	ldr	r3, [pc, #360]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a55      	ldr	r2, [pc, #340]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 809b 	beq.w	8005382 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524c:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d05c      	beq.n	8005312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d141      	bne.n	80052e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fc fd45 	bl	8001cf4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526e:	f7fc fd41 	bl	8001cf4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e081      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	3b01      	subs	r3, #1
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	4937      	ldr	r1, [pc, #220]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fc fd1a 	bl	8001cf4 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fc fd16 	bl	8001cf4 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e056      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x41c>
 80052e2:	e04e      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fc fd03 	bl	8001cf4 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fc fcff 	bl	8001cf4 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e03f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x44a>
 8005310:	e037      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e032      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d028      	beq.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d121      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d11a      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005354:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005356:	4293      	cmp	r3, r2
 8005358:	d111      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	3b01      	subs	r3, #1
 8005368:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d107      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40007000 	.word	0x40007000
 8005390:	40023800 	.word	0x40023800
 8005394:	42470060 	.word	0x42470060

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cc      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90c      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b65      	ldr	r3, [pc, #404]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d044      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d003      	beq.n	8005456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005452:	2b03      	cmp	r3, #3
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e067      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4934      	ldr	r1, [pc, #208]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005488:	f7fc fc34 	bl	8001cf4 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005490:	f7fc fc30 	bl	8001cf4 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 020c 	and.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1eb      	bne.n	8005490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20c      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f821 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc fb94 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	08013fe8 	.word	0x08013fe8
 800555c:	20000000 	.word	0x20000000
 8005560:	20000004 	.word	0x20000004

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800557c:	4b67      	ldr	r3, [pc, #412]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d00d      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005588:	2b08      	cmp	r3, #8
 800558a:	f200 80bd 	bhi.w	8005708 <HAL_RCC_GetSysClockFreq+0x1a4>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x34>
 8005592:	2b04      	cmp	r3, #4
 8005594:	d003      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0x3a>
 8005596:	e0b7      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b61      	ldr	r3, [pc, #388]	; (8005720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800559a:	60bb      	str	r3, [r7, #8]
       break;
 800559c:	e0b7      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800559e:	4b61      	ldr	r3, [pc, #388]	; (8005724 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80055a0:	60bb      	str	r3, [r7, #8]
      break;
 80055a2:	e0b4      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a4:	4b5d      	ldr	r3, [pc, #372]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ae:	4b5b      	ldr	r3, [pc, #364]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04d      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ba:	4b58      	ldr	r3, [pc, #352]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	099b      	lsrs	r3, r3, #6
 80055c0:	461a      	mov	r2, r3
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ca:	f04f 0100 	mov.w	r1, #0
 80055ce:	ea02 0800 	and.w	r8, r2, r0
 80055d2:	ea03 0901 	and.w	r9, r3, r1
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	014b      	lsls	r3, r1, #5
 80055e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055e8:	0142      	lsls	r2, r0, #5
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	ebb0 0008 	subs.w	r0, r0, r8
 80055f2:	eb61 0109 	sbc.w	r1, r1, r9
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	018b      	lsls	r3, r1, #6
 8005600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005604:	0182      	lsls	r2, r0, #6
 8005606:	1a12      	subs	r2, r2, r0
 8005608:	eb63 0301 	sbc.w	r3, r3, r1
 800560c:	f04f 0000 	mov.w	r0, #0
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	00d9      	lsls	r1, r3, #3
 8005616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800561a:	00d0      	lsls	r0, r2, #3
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	eb12 0208 	adds.w	r2, r2, r8
 8005624:	eb43 0309 	adc.w	r3, r3, r9
 8005628:	f04f 0000 	mov.w	r0, #0
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	0259      	lsls	r1, r3, #9
 8005632:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005636:	0250      	lsls	r0, r2, #9
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	f7fb fb1e 	bl	8000c88 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e04a      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b31      	ldr	r3, [pc, #196]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	461a      	mov	r2, r3
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	ea02 0400 	and.w	r4, r2, r0
 800566e:	ea03 0501 	and.w	r5, r3, r1
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	014b      	lsls	r3, r1, #5
 8005680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005684:	0142      	lsls	r2, r0, #5
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	1b00      	subs	r0, r0, r4
 800568c:	eb61 0105 	sbc.w	r1, r1, r5
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	018b      	lsls	r3, r1, #6
 800569a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800569e:	0182      	lsls	r2, r0, #6
 80056a0:	1a12      	subs	r2, r2, r0
 80056a2:	eb63 0301 	sbc.w	r3, r3, r1
 80056a6:	f04f 0000 	mov.w	r0, #0
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	00d9      	lsls	r1, r3, #3
 80056b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b4:	00d0      	lsls	r0, r2, #3
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	1912      	adds	r2, r2, r4
 80056bc:	eb45 0303 	adc.w	r3, r5, r3
 80056c0:	f04f 0000 	mov.w	r0, #0
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	0299      	lsls	r1, r3, #10
 80056ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056ce:	0290      	lsls	r0, r2, #10
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	461a      	mov	r2, r3
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	f7fb fad2 	bl	8000c88 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4613      	mov	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	60bb      	str	r3, [r7, #8]
      break;
 8005706:	e002      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800570a:	60bb      	str	r3, [r7, #8]
      break;
 800570c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800570e:	68bb      	ldr	r3, [r7, #8]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	00f42400 	.word	0x00f42400
 8005724:	007a1200 	.word	0x007a1200

08005728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e041      	b.n	80057be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc f88a 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f000 fa96 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e04e      	b.n	800587e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a23      	ldr	r2, [pc, #140]	; (800588c <HAL_TIM_Base_Start_IT+0xc4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d01d      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <HAL_TIM_Base_Start_IT+0xc8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_TIM_Base_Start_IT+0xcc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_TIM_Base_Start_IT+0xd0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_TIM_Base_Start_IT+0xd4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d111      	bne.n	800586c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b06      	cmp	r3, #6
 8005858:	d010      	beq.n	800587c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	e007      	b.n	800587c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40010400 	.word	0x40010400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40001800 	.word	0x40001800

080058a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0202 	mvn.w	r2, #2
 80058d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9b5 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9a7 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f9b8 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b04      	cmp	r3, #4
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b04      	cmp	r3, #4
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0204 	mvn.w	r2, #4
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f98b 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f97d 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f98e 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b08      	cmp	r3, #8
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b08      	cmp	r3, #8
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f961 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f953 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f964 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f937 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f929 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f93a 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d10e      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0201 	mvn.w	r2, #1
 8005a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f00a fcf2 	bl	8010410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d10e      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fae0 	bl	8006018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d10e      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d107      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8ff 	bl	8005c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0220 	mvn.w	r2, #32
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 faaa 	bl	8006004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0b4      	b.n	8005c3e <HAL_TIM_ConfigClockSource+0x186>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d03e      	beq.n	8005b8c <HAL_TIM_ConfigClockSource+0xd4>
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b12:	f200 8087 	bhi.w	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	f000 8086 	beq.w	8005c2a <HAL_TIM_ConfigClockSource+0x172>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d87f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d01a      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xa6>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d87b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d050      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d877      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d03c      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d873      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d058      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d86f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d064      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d86b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d060      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d867      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05c      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d05a      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	e062      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f000 f9ad 	bl	8005ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	609a      	str	r2, [r3, #8]
      break;
 8005b8a:	e04f      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f000 f996 	bl	8005ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bae:	609a      	str	r2, [r3, #8]
      break;
 8005bb0:	e03c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 f90a 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2150      	movs	r1, #80	; 0x50
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f963 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e02c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 f929 	bl	8005e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2160      	movs	r1, #96	; 0x60
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f953 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e01c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 f8ea 	bl	8005dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f943 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c10:	e00c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 f93a 	bl	8005e96 <TIM_ITRx_SetConfig>
      break;
 8005c22:	e003      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      break;
 8005c28:	e000      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a40      	ldr	r2, [pc, #256]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb6:	d00f      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3d      	ldr	r2, [pc, #244]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3c      	ldr	r2, [pc, #240]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3b      	ldr	r2, [pc, #236]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d027      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2c      	ldr	r2, [pc, #176]	; (8005db0 <TIM_Base_SetConfig+0x118>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d023      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2b      	ldr	r2, [pc, #172]	; (8005db4 <TIM_Base_SetConfig+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <TIM_Base_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a29      	ldr	r2, [pc, #164]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d017      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a28      	ldr	r2, [pc, #160]	; (8005dc0 <TIM_Base_SetConfig+0x128>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_Base_SetConfig+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <TIM_Base_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0xf8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <TIM_Base_SetConfig+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d103      	bne.n	8005d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40010400 	.word	0x40010400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	40001800 	.word	0x40001800
 8005dd0:	40001c00 	.word	0x40001c00
 8005dd4:	40002000 	.word	0x40002000

08005dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f023 030a 	bic.w	r3, r3, #10
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0210 	bic.w	r2, r3, #16
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	031b      	lsls	r3, r3, #12
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f043 0307 	orr.w	r3, r3, #7
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e05a      	b.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d01d      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10c      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40010400 	.word	0x40010400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40001800 	.word	0x40001800

08006004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 001c 	add.w	r0, r7, #28
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	d122      	bne.n	800608a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800606c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9a0 	bl	80063c4 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
 8006088:	e01a      	b.n	80060c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f994 	bl	80063c4 <USB_CoreReset>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
 80060b2:	e005      	b.n	80060c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10b      	bne.n	80060de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f043 0206 	orr.w	r2, r3, #6
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr

080060ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f043 0201 	orr.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 0201 	bic.w	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d115      	bne.n	8006180 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006160:	2001      	movs	r0, #1
 8006162:	f7fb fdd3 	bl	8001d0c <HAL_Delay>
      ms++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f91a 	bl	80063a6 <USB_GetMode>
 8006172:	4603      	mov	r3, r0
 8006174:	2b01      	cmp	r3, #1
 8006176:	d01e      	beq.n	80061b6 <USB_SetCurrentMode+0x84>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b31      	cmp	r3, #49	; 0x31
 800617c:	d9f0      	bls.n	8006160 <USB_SetCurrentMode+0x2e>
 800617e:	e01a      	b.n	80061b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d115      	bne.n	80061b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006192:	2001      	movs	r0, #1
 8006194:	f7fb fdba 	bl	8001d0c <HAL_Delay>
      ms++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f901 	bl	80063a6 <USB_GetMode>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <USB_SetCurrentMode+0x84>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b31      	cmp	r3, #49	; 0x31
 80061ae:	d9f0      	bls.n	8006192 <USB_SetCurrentMode+0x60>
 80061b0:	e001      	b.n	80061b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e005      	b.n	80061c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b32      	cmp	r3, #50	; 0x32
 80061ba:	d101      	bne.n	80061c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <USB_FlushTxFifo+0x44>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e006      	b.n	8006204 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d0f1      	beq.n	80061e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	00030d40 	.word	0x00030d40

08006214 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2210      	movs	r2, #16
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <USB_FlushRxFifo+0x3c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e006      	b.n	8006244 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d0f1      	beq.n	8006226 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	00030d40 	.word	0x00030d40

08006254 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	460b      	mov	r3, r1
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	4613      	mov	r3, r2
 8006268:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006272:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d123      	bne.n	80062c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	3303      	adds	r3, #3
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e018      	b.n	80062ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	031a      	lsls	r2, r3, #12
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4413      	add	r3, r2
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	461a      	mov	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	3301      	adds	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	3301      	adds	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	3301      	adds	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3e2      	bcc.n	8006288 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3724      	adds	r7, #36	; 0x24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b08b      	sub	sp, #44	; 0x2c
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	e014      	b.n	8006326 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	601a      	str	r2, [r3, #0]
    pDest++;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	3301      	adds	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	3301      	adds	r3, #1
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	3301      	adds	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	3301      	adds	r3, #1
 8006324:	623b      	str	r3, [r7, #32]
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3e6      	bcc.n	80062fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800632e:	8bfb      	ldrh	r3, [r7, #30]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01e      	beq.n	8006372 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	461a      	mov	r2, r3
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	701a      	strb	r2, [r3, #0]
      i++;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	3301      	adds	r3, #1
 800635e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	3301      	adds	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006366:	8bfb      	ldrh	r3, [r7, #30]
 8006368:	3b01      	subs	r3, #1
 800636a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800636c:	8bfb      	ldrh	r3, [r7, #30]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1ea      	bne.n	8006348 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006374:	4618      	mov	r0, r3
 8006376:	372c      	adds	r7, #44	; 0x2c
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006398:	68fb      	ldr	r3, [r7, #12]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0301 	and.w	r3, r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	4a13      	ldr	r2, [pc, #76]	; (8006424 <USB_CoreReset+0x60>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01a      	b.n	8006416 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	daf3      	bge.n	80063d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f043 0201 	orr.w	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4a09      	ldr	r2, [pc, #36]	; (8006424 <USB_CoreReset+0x60>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d0f1      	beq.n	80063f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	00030d40 	.word	0x00030d40

08006428 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006428:	b084      	sub	sp, #16
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	f107 001c 	add.w	r0, r7, #28
 8006436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10a      	bne.n	8006496 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e014      	b.n	80064c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e009      	b.n	80064c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ba:	f023 0304 	bic.w	r3, r3, #4
 80064be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80064c0:	2110      	movs	r1, #16
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fe82 	bl	80061cc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff fea3 	bl	8006214 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e015      	b.n	8006500 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	461a      	mov	r2, r3
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d3e5      	bcc.n	80064d4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a13      	ldr	r2, [pc, #76]	; (800657c <USB_HostInit+0x154>)
 800652e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a13      	ldr	r2, [pc, #76]	; (8006580 <USB_HostInit+0x158>)
 8006534:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006538:	e009      	b.n	800654e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a10      	ldr	r2, [pc, #64]	; (8006584 <USB_HostInit+0x15c>)
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <USB_HostInit+0x160>)
 800654a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f043 0210 	orr.w	r2, r3, #16
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <USB_HostInit+0x164>)
 8006566:	4313      	orrs	r3, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006578:	b004      	add	sp, #16
 800657a:	4770      	bx	lr
 800657c:	01000200 	.word	0x01000200
 8006580:	00e00300 	.word	0x00e00300
 8006584:	00600080 	.word	0x00600080
 8006588:	004000e0 	.word	0x004000e0
 800658c:	a3200008 	.word	0xa3200008

08006590 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d8:	461a      	mov	r2, r3
 80065da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065de:	6053      	str	r3, [r2, #4]
 80065e0:	e009      	b.n	80065f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d106      	bne.n	80065f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	461a      	mov	r2, r3
 80065f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80065f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006624:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800662e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006632:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006634:	2064      	movs	r0, #100	; 0x64
 8006636:	f7fb fb69 	bl	8001d0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006646:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006648:	200a      	movs	r0, #10
 800664a:	f7fb fb5f 	bl	8001d0c <HAL_Delay>

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800667c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <USB_DriveVbus+0x44>
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d106      	bne.n	800669c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800669a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a6:	d109      	bne.n	80066bc <USB_DriveVbus+0x64>
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	0c5b      	lsrs	r3, r3, #17
 80066e8:	f003 0303 	and.w	r3, r3, #3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	b29b      	uxth	r3, r3
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	4608      	mov	r0, r1
 8006726:	4611      	mov	r1, r2
 8006728:	461a      	mov	r2, r3
 800672a:	4603      	mov	r3, r0
 800672c:	70fb      	strb	r3, [r7, #3]
 800672e:	460b      	mov	r3, r1
 8006730:	70bb      	strb	r3, [r7, #2]
 8006732:	4613      	mov	r3, r2
 8006734:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	461a      	mov	r2, r3
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006756:	2b03      	cmp	r3, #3
 8006758:	d87e      	bhi.n	8006858 <USB_HC_Init+0x13c>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <USB_HC_Init+0x44>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006771 	.word	0x08006771
 8006764:	0800681b 	.word	0x0800681b
 8006768:	08006771 	.word	0x08006771
 800676c:	080067dd 	.word	0x080067dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677c:	461a      	mov	r2, r3
 800677e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da10      	bge.n	80067ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80067ac:	e057      	b.n	800685e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d051      	beq.n	800685e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067d8:	60d3      	str	r3, [r2, #12]
      break;
 80067da:	e040      	b.n	800685e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	461a      	mov	r2, r3
 80067ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80067ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da34      	bge.n	8006862 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	440a      	add	r2, r1
 800680e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006816:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006818:	e023      	b.n	8006862 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	461a      	mov	r2, r3
 8006828:	f240 2325 	movw	r3, #549	; 0x225
 800682c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800682e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da17      	bge.n	8006866 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	440a      	add	r2, r1
 800684c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006850:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006854:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006856:	e006      	b.n	8006866 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	77fb      	strb	r3, [r7, #31]
      break;
 800685c:	e004      	b.n	8006868 <USB_HC_Init+0x14c>
      break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <USB_HC_Init+0x14c>
      break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <USB_HC_Init+0x14c>
      break;
 8006866:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	2101      	movs	r1, #1
 8006878:	fa01 f303 	lsl.w	r3, r1, r3
 800687c:	6939      	ldr	r1, [r7, #16]
 800687e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006882:	4313      	orrs	r3, r2
 8006884:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006892:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da03      	bge.n	80068a2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e001      	b.n	80068a6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff0f 	bl	80066ca <USB_GetHostSpeed>
 80068ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d106      	bne.n	80068c4 <USB_HC_Init+0x1a8>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d003      	beq.n	80068c4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	e001      	b.n	80068c8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068c8:	787b      	ldrb	r3, [r7, #1]
 80068ca:	059b      	lsls	r3, r3, #22
 80068cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068d0:	78bb      	ldrb	r3, [r7, #2]
 80068d2:	02db      	lsls	r3, r3, #11
 80068d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068de:	049b      	lsls	r3, r3, #18
 80068e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80068e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80068e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	0159      	lsls	r1, r3, #5
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	440b      	add	r3, r1
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006904:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800690a:	2b03      	cmp	r3, #3
 800690c:	d10f      	bne.n	800692e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800692c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800692e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006954:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d02d      	beq.n	80069be <USB_HC_StartXfer+0x86>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d129      	bne.n	80069be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d117      	bne.n	80069a0 <USB_HC_StartXfer+0x68>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	79db      	ldrb	r3, [r3, #7]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <USB_HC_StartXfer+0x48>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	79db      	ldrb	r3, [r3, #7]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d10f      	bne.n	80069a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	6a3a      	ldr	r2, [r7, #32]
 8006994:	440a      	add	r2, r1
 8006996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <USB_HC_StartXfer+0x86>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	795b      	ldrb	r3, [r3, #5]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fa2f 	bl	8006e18 <USB_DoPing>
      return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e0f8      	b.n	8006bb0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	8912      	ldrh	r2, [r2, #8]
 80069ce:	4413      	add	r3, r2
 80069d0:	3b01      	subs	r3, #1
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	8912      	ldrh	r2, [r2, #8]
 80069d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80069dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80069de:	8b7b      	ldrh	r3, [r7, #26]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d90b      	bls.n	80069fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80069e4:	8b7b      	ldrh	r3, [r7, #26]
 80069e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	8912      	ldrh	r2, [r2, #8]
 80069ee:	fb02 f203 	mul.w	r2, r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	611a      	str	r2, [r3, #16]
 80069f6:	e001      	b.n	80069fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80069f8:	2301      	movs	r3, #1
 80069fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	8912      	ldrh	r2, [r2, #8]
 8006a0a:	fb02 f203 	mul.w	r2, r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	611a      	str	r2, [r3, #16]
 8006a12:	e003      	b.n	8006a1c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a26:	04d9      	lsls	r1, r3, #19
 8006a28:	4b63      	ldr	r3, [pc, #396]	; (8006bb8 <USB_HC_StartXfer+0x280>)
 8006a2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	7a9b      	ldrb	r3, [r3, #10]
 8006a32:	075b      	lsls	r3, r3, #29
 8006a34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	0148      	lsls	r0, r1, #5
 8006a3c:	6a39      	ldr	r1, [r7, #32]
 8006a3e:	4401      	add	r1, r0
 8006a40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	68d9      	ldr	r1, [r3, #12]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	460a      	mov	r2, r1
 8006a60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf0c      	ite	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	2300      	movne	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	7e7b      	ldrb	r3, [r7, #25]
 8006aaa:	075b      	lsls	r3, r3, #29
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	0148      	lsls	r0, r1, #5
 8006ab0:	6a39      	ldr	r1, [r7, #32]
 8006ab2:	4401      	add	r1, r0
 8006ab4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ad2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	e003      	b.n	8006aee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	461a      	mov	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e04e      	b.n	8006bb0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d149      	bne.n	8006bae <USB_HC_StartXfer+0x276>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d045      	beq.n	8006bae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	79db      	ldrb	r3, [r3, #7]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d830      	bhi.n	8006b8c <USB_HC_StartXfer+0x254>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <USB_HC_StartXfer+0x1f8>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b41 	.word	0x08006b41
 8006b3c:	08006b65 	.word	0x08006b65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	3303      	adds	r3, #3
 8006b46:	089b      	lsrs	r3, r3, #2
 8006b48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b4a:	8afa      	ldrh	r2, [r7, #22]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d91c      	bls.n	8006b90 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b62:	e015      	b.n	8006b90 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006b6e:	8afa      	ldrh	r2, [r7, #22]
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90a      	bls.n	8006b94 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b8a:	e003      	b.n	8006b94 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <USB_HC_StartXfer+0x25e>
        break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <USB_HC_StartXfer+0x25e>
        break;
 8006b94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	68d9      	ldr	r1, [r3, #12]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	785a      	ldrb	r2, [r3, #1]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	9000      	str	r0, [sp, #0]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fb53 	bl	8006254 <USB_WritePacket>
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	1ff80000 	.word	0x1ff80000

08006bbc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	b29b      	uxth	r3, r3
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b089      	sub	sp, #36	; 0x24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	0c9b      	lsrs	r3, r3, #18
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	0fdb      	lsrs	r3, r3, #31
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d104      	bne.n	8006c38 <USB_HC_Halt+0x5a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e0e8      	b.n	8006e0a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <USB_HC_Halt+0x66>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d173      	bne.n	8006d2c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 80cb 	bne.w	8006e08 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d143      	bne.n	8006d06 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cbc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cdc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cea:	d81d      	bhi.n	8006d28 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d02:	d0ec      	beq.n	8006cde <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d04:	e080      	b.n	8006e08 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d24:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d26:	e06f      	b.n	8006e08 <USB_HC_Halt+0x22a>
            break;
 8006d28:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d2a:	e06d      	b.n	8006e08 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d143      	bne.n	8006de4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc8:	d81d      	bhi.n	8006e06 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de0:	d0ec      	beq.n	8006dbc <USB_HC_Halt+0x1de>
 8006de2:	e011      	b.n	8006e08 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	e000      	b.n	8006e08 <USB_HC_Halt+0x22a>
          break;
 8006e06:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3724      	adds	r7, #36	; 0x24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	04da      	lsls	r2, r3, #19
 8006e34:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <USB_DoPing+0x74>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e76:	461a      	mov	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	1ff80000 	.word	0x1ff80000

08006e90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff f935 	bl	8006110 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f98f 	bl	80061cc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff f9b0 	bl	8006214 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	e01f      	b.n	8006efa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ee0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b0f      	cmp	r3, #15
 8006efe:	d9dc      	bls.n	8006eba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	e034      	b.n	8006f70 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f2c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3301      	adds	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4c:	d80c      	bhi.n	8006f68 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f64:	d0ec      	beq.n	8006f40 <USB_StopHost+0xb0>
 8006f66:	e000      	b.n	8006f6a <USB_StopHost+0xda>
        break;
 8006f68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	d9c7      	bls.n	8006f06 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff f8ae 	bl	80060ee <USB_EnableGlobalInt>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006fa0:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <MX_FATFS_Init+0x18>)
 8006fa2:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <MX_FATFS_Init+0x1c>)
 8006fa4:	f008 f966 	bl	800f274 <FATFS_LinkDriver>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <MX_FATFS_Init+0x20>)
 8006fae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	200041c0 	.word	0x200041c0
 8006fb8:	08014000 	.word	0x08014000
 8006fbc:	20004624 	.word	0x20004624

08006fc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4808      	ldr	r0, [pc, #32]	; (800701c <USBH_status+0x34>)
 8006ffc:	f003 fb2c 	bl	800a658 <USBH_MSC_UnitIsReady>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <USBH_status+0x24>
  {
    res = RES_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
 800700a:	e001      	b.n	8007010 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20004858 	.word	0x20004858

08007020 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b094      	sub	sp, #80	; 0x50
 8007024:	af02      	add	r7, sp, #8
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007036:	7bf9      	ldrb	r1, [r7, #15]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4813      	ldr	r0, [pc, #76]	; (8007090 <USBH_read+0x70>)
 8007042:	f003 fb53 	bl	800a6ec <USBH_MSC_Read>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <USBH_read+0x34>
  {
    res = RES_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007052:	e017      	b.n	8007084 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007054:	f107 0210 	add.w	r2, r7, #16
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	480c      	ldr	r0, [pc, #48]	; (8007090 <USBH_read+0x70>)
 800705e:	f003 fb21 	bl	800a6a4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007062:	7f7b      	ldrb	r3, [r7, #29]
 8007064:	2b3a      	cmp	r3, #58	; 0x3a
 8007066:	d005      	beq.n	8007074 <USBH_read+0x54>
 8007068:	2b3a      	cmp	r3, #58	; 0x3a
 800706a:	dc07      	bgt.n	800707c <USBH_read+0x5c>
 800706c:	2b04      	cmp	r3, #4
 800706e:	d001      	beq.n	8007074 <USBH_read+0x54>
 8007070:	2b28      	cmp	r3, #40	; 0x28
 8007072:	d103      	bne.n	800707c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007074:	2303      	movs	r3, #3
 8007076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800707a:	e003      	b.n	8007084 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007082:	bf00      	nop
    }
  }

  return res;
 8007084:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007088:	4618      	mov	r0, r3
 800708a:	3748      	adds	r7, #72	; 0x48
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20004858 	.word	0x20004858

08007094 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b094      	sub	sp, #80	; 0x50
 8007098:	af02      	add	r7, sp, #8
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80070aa:	7bf9      	ldrb	r1, [r7, #15]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4817      	ldr	r0, [pc, #92]	; (8007114 <USBH_write+0x80>)
 80070b6:	f003 fb82 	bl	800a7be <USBH_MSC_Write>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <USBH_write+0x34>
  {
    res = RES_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070c6:	e01f      	b.n	8007108 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80070c8:	f107 0210 	add.w	r2, r7, #16
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	4619      	mov	r1, r3
 80070d0:	4810      	ldr	r0, [pc, #64]	; (8007114 <USBH_write+0x80>)
 80070d2:	f003 fae7 	bl	800a6a4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80070d6:	7f7b      	ldrb	r3, [r7, #29]
 80070d8:	2b3a      	cmp	r3, #58	; 0x3a
 80070da:	d00d      	beq.n	80070f8 <USBH_write+0x64>
 80070dc:	2b3a      	cmp	r3, #58	; 0x3a
 80070de:	dc0f      	bgt.n	8007100 <USBH_write+0x6c>
 80070e0:	2b28      	cmp	r3, #40	; 0x28
 80070e2:	d009      	beq.n	80070f8 <USBH_write+0x64>
 80070e4:	2b28      	cmp	r3, #40	; 0x28
 80070e6:	dc0b      	bgt.n	8007100 <USBH_write+0x6c>
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d005      	beq.n	80070f8 <USBH_write+0x64>
 80070ec:	2b27      	cmp	r3, #39	; 0x27
 80070ee:	d107      	bne.n	8007100 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070f6:	e007      	b.n	8007108 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80070f8:	2303      	movs	r3, #3
 80070fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070fe:	e003      	b.n	8007108 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007106:	bf00      	nop
    }
  }

  return res;
 8007108:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800710c:	4618      	mov	r0, r3
 800710e:	3748      	adds	r7, #72	; 0x48
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20004858 	.word	0x20004858

08007118 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b090      	sub	sp, #64	; 0x40
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	603a      	str	r2, [r7, #0]
 8007122:	71fb      	strb	r3, [r7, #7]
 8007124:	460b      	mov	r3, r1
 8007126:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800712e:	79bb      	ldrb	r3, [r7, #6]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d852      	bhi.n	80071da <USBH_ioctl+0xc2>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBH_ioctl+0x24>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800714d 	.word	0x0800714d
 8007140:	08007155 	.word	0x08007155
 8007144:	0800717f 	.word	0x0800717f
 8007148:	080071ab 	.word	0x080071ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007152:	e045      	b.n	80071e0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007154:	f107 0208 	add.w	r2, r7, #8
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	4619      	mov	r1, r3
 800715c:	4823      	ldr	r0, [pc, #140]	; (80071ec <USBH_ioctl+0xd4>)
 800715e:	f003 faa1 	bl	800a6a4 <USBH_MSC_GetLUNInfo>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007174:	e034      	b.n	80071e0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800717c:	e030      	b.n	80071e0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800717e:	f107 0208 	add.w	r2, r7, #8
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	4619      	mov	r1, r3
 8007186:	4819      	ldr	r0, [pc, #100]	; (80071ec <USBH_ioctl+0xd4>)
 8007188:	f003 fa8c 	bl	800a6a4 <USBH_MSC_GetLUNInfo>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007192:	8a3b      	ldrh	r3, [r7, #16]
 8007194:	461a      	mov	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071a0:	e01e      	b.n	80071e0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071a8:	e01a      	b.n	80071e0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071aa:	f107 0208 	add.w	r2, r7, #8
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	4619      	mov	r1, r3
 80071b2:	480e      	ldr	r0, [pc, #56]	; (80071ec <USBH_ioctl+0xd4>)
 80071b4:	f003 fa76 	bl	800a6a4 <USBH_MSC_GetLUNInfo>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80071be:	8a3b      	ldrh	r3, [r7, #16]
 80071c0:	0a5b      	lsrs	r3, r3, #9
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071d0:	e006      	b.n	80071e0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071d8:	e002      	b.n	80071e0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80071da:	2304      	movs	r3, #4
 80071dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80071e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3740      	adds	r7, #64	; 0x40
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20004858 	.word	0x20004858

080071f0 <lcd_status_draw>:
#include "lcd_pixel_settings.h"
#include "lcd_symbol.h"


static void lcd_status_draw(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
	if(!usb_ready())
 80071f4:	f009 f992 	bl	801051c <usb_ready>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <lcd_status_draw+0x1a>
	{
		lcd_symbol_symb(HEAD_USB_X, HEAD_USB_Y, SYM_USB);
 80071fe:	2208      	movs	r2, #8
 8007200:	2102      	movs	r1, #2
 8007202:	20a4      	movs	r0, #164	; 0xa4
 8007204:	f002 fbce 	bl	80099a4 <lcd_symbol_symb>
 8007208:	e003      	b.n	8007212 <lcd_status_draw+0x22>
	}
	else
	{
		lcd_symbol_symb_clear(HEAD_USB_X, HEAD_USB_Y);
 800720a:	2102      	movs	r1, #2
 800720c:	20a4      	movs	r0, #164	; 0xa4
 800720e:	f002 fc19 	bl	8009a44 <lcd_symbol_symb_clear>
	}

	if(!measure_get_mode_start())
 8007212:	f008 fed1 	bl	800ffb8 <measure_get_mode_start>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <lcd_status_draw+0x38>
	{
		lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_PLAY);
 800721c:	2205      	movs	r2, #5
 800721e:	2102      	movs	r1, #2
 8007220:	20ac      	movs	r0, #172	; 0xac
 8007222:	f002 fbbf 	bl	80099a4 <lcd_symbol_symb>
 8007226:	e014      	b.n	8007252 <lcd_status_draw+0x62>
	}
	else if(!measure_get_mode_pause())
 8007228:	f008 feec 	bl	8010004 <measure_get_mode_pause>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <lcd_status_draw+0x4e>
	{
		lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_PAUSE);
 8007232:	2206      	movs	r2, #6
 8007234:	2102      	movs	r1, #2
 8007236:	20ac      	movs	r0, #172	; 0xac
 8007238:	f002 fbb4 	bl	80099a4 <lcd_symbol_symb>
 800723c:	e009      	b.n	8007252 <lcd_status_draw+0x62>
	}
	else if(!measure_get_mode_stop())
 800723e:	f008 ff03 	bl	8010048 <measure_get_mode_stop>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <lcd_status_draw+0x62>
	{
		lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_STOP);
 8007248:	2207      	movs	r2, #7
 800724a:	2102      	movs	r1, #2
 800724c:	20ac      	movs	r0, #172	; 0xac
 800724e:	f002 fba9 	bl	80099a4 <lcd_symbol_symb>
	}

	lcd_time_draw();
 8007252:	f002 fca1 	bl	8009b98 <lcd_time_draw>
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}

0800725a <lcd_status_update>:

static void lcd_status_update(void)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	af00      	add	r7, sp, #0
	if(!usb_ready())
 800725e:	f009 f95d 	bl	801051c <usb_ready>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <lcd_status_update+0x1a>
	{
		lcd_symbol_symb(HEAD_USB_X, HEAD_USB_Y, SYM_USB);
 8007268:	2208      	movs	r2, #8
 800726a:	2102      	movs	r1, #2
 800726c:	20a4      	movs	r0, #164	; 0xa4
 800726e:	f002 fb99 	bl	80099a4 <lcd_symbol_symb>
 8007272:	e003      	b.n	800727c <lcd_status_update+0x22>
	}
	else
	{
		lcd_symbol_symb_clear(HEAD_USB_X, HEAD_USB_Y);
 8007274:	2102      	movs	r1, #2
 8007276:	20a4      	movs	r0, #164	; 0xa4
 8007278:	f002 fbe4 	bl	8009a44 <lcd_symbol_symb_clear>
	}

	if(!measure_mode_status_get_changed())
 800727c:	f008 fe62 	bl	800ff44 <measure_mode_status_get_changed>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d11f      	bne.n	80072c6 <lcd_status_update+0x6c>
	{
		if(!measure_get_mode_start())
 8007286:	f008 fe97 	bl	800ffb8 <measure_get_mode_start>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <lcd_status_update+0x42>
		{
			lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_PLAY);
 8007290:	2205      	movs	r2, #5
 8007292:	2102      	movs	r1, #2
 8007294:	20ac      	movs	r0, #172	; 0xac
 8007296:	f002 fb85 	bl	80099a4 <lcd_symbol_symb>
 800729a:	e014      	b.n	80072c6 <lcd_status_update+0x6c>
		}
		else if(!measure_get_mode_pause())
 800729c:	f008 feb2 	bl	8010004 <measure_get_mode_pause>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d105      	bne.n	80072b2 <lcd_status_update+0x58>
		{
			lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_PAUSE);
 80072a6:	2206      	movs	r2, #6
 80072a8:	2102      	movs	r1, #2
 80072aa:	20ac      	movs	r0, #172	; 0xac
 80072ac:	f002 fb7a 	bl	80099a4 <lcd_symbol_symb>
 80072b0:	e009      	b.n	80072c6 <lcd_status_update+0x6c>
		}
		else if(!measure_get_mode_stop())
 80072b2:	f008 fec9 	bl	8010048 <measure_get_mode_stop>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <lcd_status_update+0x6c>
		{
			lcd_symbol_symb(HEAD_MEASURE_MODE_X, HEAD_MEASURE_MODE_Y, SYM_STOP);
 80072bc:	2207      	movs	r2, #7
 80072be:	2102      	movs	r1, #2
 80072c0:	20ac      	movs	r0, #172	; 0xac
 80072c2:	f002 fb6f 	bl	80099a4 <lcd_symbol_symb>
		}
	}

	if(!clock_get_status())
 80072c6:	f008 fd45 	bl	800fd54 <clock_get_status>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <lcd_status_update+0x7e>
	{
		lcd_time_update();
 80072d0:	f002 fc82 	bl	8009bd8 <lcd_time_update>
		clock_reset_status();
 80072d4:	f008 fd4e 	bl	800fd74 <clock_reset_status>
	}
}
 80072d8:	bf00      	nop
 80072da:	bd80      	pop	{r7, pc}

080072dc <lcd_draw>:

uint8_t lcd_draw(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
	lcd_initialize();
 80072e0:	f001 fbd3 	bl	8008a8a <lcd_initialize>

	lcd_menu_draw();
 80072e4:	f002 f908 	bl	80094f8 <lcd_menu_draw>
	lcd_status_draw();
 80072e8:	f7ff ff82 	bl	80071f0 <lcd_status_draw>

	return 0;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <lcd_update>:

uint8_t lcd_update(void)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	af00      	add	r7, sp, #0
	lcd_menu_update();
 80072f6:	f002 f86b 	bl	80093d0 <lcd_menu_update>
	lcd_status_update();
 80072fa:	f7ff ffae 	bl	800725a <lcd_status_update>

	return 0;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	bd80      	pop	{r7, pc}

08007304 <lcd_stop>:

void lcd_stop(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	lcd_menu_stop();
 8007308:	f002 f918 	bl	800953c <lcd_menu_stop>
}
 800730c:	bf00      	nop
 800730e:	bd80      	pop	{r7, pc}

08007310 <lcd_body_reset>:
#include "lcd_matrix.h"
#include "lcd_pixel_settings.h"


uint8_t lcd_body_reset(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
	lcd_matrix_reset(BODY_HOME_X, BODY_HOME_Y, BODY_LENGTH_X, BODY_LENGTH_Y);
 8007314:	2370      	movs	r3, #112	; 0x70
 8007316:	22f0      	movs	r2, #240	; 0xf0
 8007318:	2110      	movs	r1, #16
 800731a:	2000      	movs	r0, #0
 800731c:	f001 fe6a 	bl	8008ff4 <lcd_matrix_reset>

	return 0;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <lcd_body_debug_draw>:

size_t diff_index = 0;


uint8_t lcd_body_debug_draw(void)
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
	char tmp[10] = {0};
 800732e:	2300      	movs	r3, #0
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	809a      	strh	r2, [r3, #4]
	uint16_t offset = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	82fb      	strh	r3, [r7, #22]

	// LCD
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "LCD");
 800733e:	8afb      	ldrh	r3, [r7, #22]
 8007340:	3316      	adds	r3, #22
 8007342:	b29b      	uxth	r3, r3
 8007344:	4aab      	ldr	r2, [pc, #684]	; (80075f4 <lcd_body_debug_draw+0x2cc>)
 8007346:	4619      	mov	r1, r3
 8007348:	2001      	movs	r0, #1
 800734a:	f002 faee 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_lcd_buffer());
 800734e:	f008 fdc1 	bl	800fed4 <debug_get_lcd_buffer>
 8007352:	4602      	mov	r2, r0
 8007354:	463b      	mov	r3, r7
 8007356:	49a8      	ldr	r1, [pc, #672]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 8007358:	4618      	mov	r0, r3
 800735a:	f00a fc1f 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 800735e:	8afb      	ldrh	r3, [r7, #22]
 8007360:	3314      	adds	r3, #20
 8007362:	b299      	uxth	r1, r3
 8007364:	230b      	movs	r3, #11
 8007366:	2239      	movs	r2, #57	; 0x39
 8007368:	2028      	movs	r0, #40	; 0x28
 800736a:	f001 fe43 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 800736e:	8afb      	ldrh	r3, [r7, #22]
 8007370:	3314      	adds	r3, #20
 8007372:	b299      	uxth	r1, r3
 8007374:	230b      	movs	r3, #11
 8007376:	2239      	movs	r2, #57	; 0x39
 8007378:	2028      	movs	r0, #40	; 0x28
 800737a:	f002 f8e5 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 800737e:	8afb      	ldrh	r3, [r7, #22]
 8007380:	3316      	adds	r3, #22
 8007382:	b29b      	uxth	r3, r3
 8007384:	463a      	mov	r2, r7
 8007386:	4619      	mov	r1, r3
 8007388:	2029      	movs	r0, #41	; 0x29
 800738a:	f002 face 	bl	800992a <lcd_symbol_string>

	// USB BUFFER
	offset = 1 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 800738e:	230c      	movs	r3, #12
 8007390:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB BU");
 8007392:	8afb      	ldrh	r3, [r7, #22]
 8007394:	3316      	adds	r3, #22
 8007396:	b29b      	uxth	r3, r3
 8007398:	4a98      	ldr	r2, [pc, #608]	; (80075fc <lcd_body_debug_draw+0x2d4>)
 800739a:	4619      	mov	r1, r3
 800739c:	2001      	movs	r0, #1
 800739e:	f002 fac4 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_usb_buffer_count());
 80073a2:	f008 fd27 	bl	800fdf4 <debug_get_usb_buffer_count>
 80073a6:	4602      	mov	r2, r0
 80073a8:	463b      	mov	r3, r7
 80073aa:	4993      	ldr	r1, [pc, #588]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 80073ac:	4618      	mov	r0, r3
 80073ae:	f00a fbf5 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80073b2:	8afb      	ldrh	r3, [r7, #22]
 80073b4:	3314      	adds	r3, #20
 80073b6:	b299      	uxth	r1, r3
 80073b8:	230b      	movs	r3, #11
 80073ba:	2239      	movs	r2, #57	; 0x39
 80073bc:	2028      	movs	r0, #40	; 0x28
 80073be:	f001 fe19 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80073c2:	8afb      	ldrh	r3, [r7, #22]
 80073c4:	3314      	adds	r3, #20
 80073c6:	b299      	uxth	r1, r3
 80073c8:	230b      	movs	r3, #11
 80073ca:	2239      	movs	r2, #57	; 0x39
 80073cc:	2028      	movs	r0, #40	; 0x28
 80073ce:	f002 f8bb 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 80073d2:	8afb      	ldrh	r3, [r7, #22]
 80073d4:	3316      	adds	r3, #22
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	463a      	mov	r2, r7
 80073da:	4619      	mov	r1, r3
 80073dc:	2029      	movs	r0, #41	; 0x29
 80073de:	f002 faa4 	bl	800992a <lcd_symbol_string>

	// USB ACCESS
	offset = 2 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 80073e2:	2318      	movs	r3, #24
 80073e4:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB AC");
 80073e6:	8afb      	ldrh	r3, [r7, #22]
 80073e8:	3316      	adds	r3, #22
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4a84      	ldr	r2, [pc, #528]	; (8007600 <lcd_body_debug_draw+0x2d8>)
 80073ee:	4619      	mov	r1, r3
 80073f0:	2001      	movs	r0, #1
 80073f2:	f002 fa9a 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_usb_access());
 80073f6:	f008 fd53 	bl	800fea0 <debug_get_usb_access>
 80073fa:	4602      	mov	r2, r0
 80073fc:	463b      	mov	r3, r7
 80073fe:	497e      	ldr	r1, [pc, #504]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 8007400:	4618      	mov	r0, r3
 8007402:	f00a fbcb 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 8007406:	8afb      	ldrh	r3, [r7, #22]
 8007408:	3314      	adds	r3, #20
 800740a:	b299      	uxth	r1, r3
 800740c:	230b      	movs	r3, #11
 800740e:	2239      	movs	r2, #57	; 0x39
 8007410:	2028      	movs	r0, #40	; 0x28
 8007412:	f001 fdef 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 8007416:	8afb      	ldrh	r3, [r7, #22]
 8007418:	3314      	adds	r3, #20
 800741a:	b299      	uxth	r1, r3
 800741c:	230b      	movs	r3, #11
 800741e:	2239      	movs	r2, #57	; 0x39
 8007420:	2028      	movs	r0, #40	; 0x28
 8007422:	f002 f891 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 8007426:	8afb      	ldrh	r3, [r7, #22]
 8007428:	3316      	adds	r3, #22
 800742a:	b29b      	uxth	r3, r3
 800742c:	463a      	mov	r2, r7
 800742e:	4619      	mov	r1, r3
 8007430:	2029      	movs	r0, #41	; 0x29
 8007432:	f002 fa7a 	bl	800992a <lcd_symbol_string>

	// FILENAME
	offset = 3 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 8007436:	2324      	movs	r3, #36	; 0x24
 8007438:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB");
 800743a:	8afb      	ldrh	r3, [r7, #22]
 800743c:	3316      	adds	r3, #22
 800743e:	b29b      	uxth	r3, r3
 8007440:	4a70      	ldr	r2, [pc, #448]	; (8007604 <lcd_body_debug_draw+0x2dc>)
 8007442:	4619      	mov	r1, r3
 8007444:	2001      	movs	r0, #1
 8007446:	f002 fa70 	bl	800992a <lcd_symbol_string>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 800744a:	8afb      	ldrh	r3, [r7, #22]
 800744c:	3314      	adds	r3, #20
 800744e:	b299      	uxth	r1, r3
 8007450:	230b      	movs	r3, #11
 8007452:	2239      	movs	r2, #57	; 0x39
 8007454:	2028      	movs	r0, #40	; 0x28
 8007456:	f001 fdcd 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, usb_file_get_filename());
 800745a:	8afb      	ldrh	r3, [r7, #22]
 800745c:	3316      	adds	r3, #22
 800745e:	b29c      	uxth	r4, r3
 8007460:	f009 f9aa 	bl	80107b8 <usb_file_get_filename>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	4621      	mov	r1, r4
 800746a:	2029      	movs	r0, #41	; 0x29
 800746c:	f002 fa5d 	bl	800992a <lcd_symbol_string>

	// USB BYTECOUNT
	offset = 4 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 8007470:	2330      	movs	r3, #48	; 0x30
 8007472:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB BC");
 8007474:	8afb      	ldrh	r3, [r7, #22]
 8007476:	3316      	adds	r3, #22
 8007478:	b29b      	uxth	r3, r3
 800747a:	4a63      	ldr	r2, [pc, #396]	; (8007608 <lcd_body_debug_draw+0x2e0>)
 800747c:	4619      	mov	r1, r3
 800747e:	2001      	movs	r0, #1
 8007480:	f002 fa53 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_usb_max_bytecount());
 8007484:	f008 fd46 	bl	800ff14 <debug_get_usb_max_bytecount>
 8007488:	4602      	mov	r2, r0
 800748a:	463b      	mov	r3, r7
 800748c:	495a      	ldr	r1, [pc, #360]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 800748e:	4618      	mov	r0, r3
 8007490:	f00a fb84 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 8007494:	8afb      	ldrh	r3, [r7, #22]
 8007496:	3314      	adds	r3, #20
 8007498:	b299      	uxth	r1, r3
 800749a:	230b      	movs	r3, #11
 800749c:	2239      	movs	r2, #57	; 0x39
 800749e:	2028      	movs	r0, #40	; 0x28
 80074a0:	f001 fda8 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80074a4:	8afb      	ldrh	r3, [r7, #22]
 80074a6:	3314      	adds	r3, #20
 80074a8:	b299      	uxth	r1, r3
 80074aa:	230b      	movs	r3, #11
 80074ac:	2239      	movs	r2, #57	; 0x39
 80074ae:	2028      	movs	r0, #40	; 0x28
 80074b0:	f002 f84a 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 80074b4:	8afb      	ldrh	r3, [r7, #22]
 80074b6:	3316      	adds	r3, #22
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	463a      	mov	r2, r7
 80074bc:	4619      	mov	r1, r3
 80074be:	2029      	movs	r0, #41	; 0x29
 80074c0:	f002 fa33 	bl	800992a <lcd_symbol_string>

	// USB BUFFER W INDEX
	offset = 5 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 80074c4:	233c      	movs	r3, #60	; 0x3c
 80074c6:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB BW");
 80074c8:	8afb      	ldrh	r3, [r7, #22]
 80074ca:	3316      	adds	r3, #22
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4a4f      	ldr	r2, [pc, #316]	; (800760c <lcd_body_debug_draw+0x2e4>)
 80074d0:	4619      	mov	r1, r3
 80074d2:	2001      	movs	r0, #1
 80074d4:	f002 fa29 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_usb_buffer_w_index());
 80074d8:	f008 fca8 	bl	800fe2c <debug_get_usb_buffer_w_index>
 80074dc:	4602      	mov	r2, r0
 80074de:	463b      	mov	r3, r7
 80074e0:	4945      	ldr	r1, [pc, #276]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 80074e2:	4618      	mov	r0, r3
 80074e4:	f00a fb5a 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80074e8:	8afb      	ldrh	r3, [r7, #22]
 80074ea:	3314      	adds	r3, #20
 80074ec:	b299      	uxth	r1, r3
 80074ee:	230b      	movs	r3, #11
 80074f0:	2239      	movs	r2, #57	; 0x39
 80074f2:	2028      	movs	r0, #40	; 0x28
 80074f4:	f001 fd7e 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80074f8:	8afb      	ldrh	r3, [r7, #22]
 80074fa:	3314      	adds	r3, #20
 80074fc:	b299      	uxth	r1, r3
 80074fe:	230b      	movs	r3, #11
 8007500:	2239      	movs	r2, #57	; 0x39
 8007502:	2028      	movs	r0, #40	; 0x28
 8007504:	f002 f820 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 8007508:	8afb      	ldrh	r3, [r7, #22]
 800750a:	3316      	adds	r3, #22
 800750c:	b29b      	uxth	r3, r3
 800750e:	463a      	mov	r2, r7
 8007510:	4619      	mov	r1, r3
 8007512:	2029      	movs	r0, #41	; 0x29
 8007514:	f002 fa09 	bl	800992a <lcd_symbol_string>

	// USB BUFFER R INDEX
	offset = 6 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 8007518:	2348      	movs	r3, #72	; 0x48
 800751a:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB BR");
 800751c:	8afb      	ldrh	r3, [r7, #22]
 800751e:	3316      	adds	r3, #22
 8007520:	b29b      	uxth	r3, r3
 8007522:	4a3b      	ldr	r2, [pc, #236]	; (8007610 <lcd_body_debug_draw+0x2e8>)
 8007524:	4619      	mov	r1, r3
 8007526:	2001      	movs	r0, #1
 8007528:	f002 f9ff 	bl	800992a <lcd_symbol_string>

	sprintf(tmp, "%u", debug_get_usb_buffer_r_index());
 800752c:	f008 fc9a 	bl	800fe64 <debug_get_usb_buffer_r_index>
 8007530:	4602      	mov	r2, r0
 8007532:	463b      	mov	r3, r7
 8007534:	4930      	ldr	r1, [pc, #192]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 8007536:	4618      	mov	r0, r3
 8007538:	f00a fb30 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	3314      	adds	r3, #20
 8007540:	b299      	uxth	r1, r3
 8007542:	230b      	movs	r3, #11
 8007544:	2239      	movs	r2, #57	; 0x39
 8007546:	2028      	movs	r0, #40	; 0x28
 8007548:	f001 fd54 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 800754c:	8afb      	ldrh	r3, [r7, #22]
 800754e:	3314      	adds	r3, #20
 8007550:	b299      	uxth	r1, r3
 8007552:	230b      	movs	r3, #11
 8007554:	2239      	movs	r2, #57	; 0x39
 8007556:	2028      	movs	r0, #40	; 0x28
 8007558:	f001 fff6 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 800755c:	8afb      	ldrh	r3, [r7, #22]
 800755e:	3316      	adds	r3, #22
 8007560:	b29b      	uxth	r3, r3
 8007562:	463a      	mov	r2, r7
 8007564:	4619      	mov	r1, r3
 8007566:	2029      	movs	r0, #41	; 0x29
 8007568:	f002 f9df 	bl	800992a <lcd_symbol_string>

	// USB BUFFER DIFF INDEX
	offset = 7 * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 800756c:	2354      	movs	r3, #84	; 0x54
 800756e:	82fb      	strh	r3, [r7, #22]
	lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, "USB DI");
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	3316      	adds	r3, #22
 8007574:	b29b      	uxth	r3, r3
 8007576:	4a27      	ldr	r2, [pc, #156]	; (8007614 <lcd_body_debug_draw+0x2ec>)
 8007578:	4619      	mov	r1, r3
 800757a:	2001      	movs	r0, #1
 800757c:	f002 f9d5 	bl	800992a <lcd_symbol_string>

	size_t w_index = debug_get_usb_buffer_count();
 8007580:	f008 fc38 	bl	800fdf4 <debug_get_usb_buffer_count>
 8007584:	6138      	str	r0, [r7, #16]
	size_t r_index = debug_get_usb_access();
 8007586:	f008 fc8b 	bl	800fea0 <debug_get_usb_access>
 800758a:	60f8      	str	r0, [r7, #12]

	if(w_index != r_index)
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	429a      	cmp	r2, r3
 8007592:	d007      	beq.n	80075a4 <lcd_body_debug_draw+0x27c>
	{
		if(!diff_index)
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <lcd_body_debug_draw+0x2f0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <lcd_body_debug_draw+0x282>
		{
			diff_index = w_index;
 800759c:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <lcd_body_debug_draw+0x2f0>)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	e002      	b.n	80075aa <lcd_body_debug_draw+0x282>
		}
	}
	else
	{
		diff_index = 0;
 80075a4:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <lcd_body_debug_draw+0x2f0>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
	}

	sprintf(tmp, "%u", diff_index);
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <lcd_body_debug_draw+0x2f0>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	463b      	mov	r3, r7
 80075b0:	4911      	ldr	r1, [pc, #68]	; (80075f8 <lcd_body_debug_draw+0x2d0>)
 80075b2:	4618      	mov	r0, r3
 80075b4:	f00a faf2 	bl	8011b9c <siprintf>

	lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80075b8:	8afb      	ldrh	r3, [r7, #22]
 80075ba:	3314      	adds	r3, #20
 80075bc:	b299      	uxth	r1, r3
 80075be:	230b      	movs	r3, #11
 80075c0:	2239      	movs	r2, #57	; 0x39
 80075c2:	2028      	movs	r0, #40	; 0x28
 80075c4:	f001 fd16 	bl	8008ff4 <lcd_matrix_reset>
	lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	3314      	adds	r3, #20
 80075cc:	b299      	uxth	r1, r3
 80075ce:	230b      	movs	r3, #11
 80075d0:	2239      	movs	r2, #57	; 0x39
 80075d2:	2028      	movs	r0, #40	; 0x28
 80075d4:	f001 ffb8 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 80075d8:	8afb      	ldrh	r3, [r7, #22]
 80075da:	3316      	adds	r3, #22
 80075dc:	b29b      	uxth	r3, r3
 80075de:	463a      	mov	r2, r7
 80075e0:	4619      	mov	r1, r3
 80075e2:	2029      	movs	r0, #41	; 0x29
 80075e4:	f002 f9a1 	bl	800992a <lcd_symbol_string>

	return 0;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd90      	pop	{r4, r7, pc}
 80075f2:	bf00      	nop
 80075f4:	08013e78 	.word	0x08013e78
 80075f8:	08013e7c 	.word	0x08013e7c
 80075fc:	08013e80 	.word	0x08013e80
 8007600:	08013e88 	.word	0x08013e88
 8007604:	08013e90 	.word	0x08013e90
 8007608:	08013e94 	.word	0x08013e94
 800760c:	08013e9c 	.word	0x08013e9c
 8007610:	08013ea4 	.word	0x08013ea4
 8007614:	08013eac 	.word	0x08013eac
 8007618:	20000418 	.word	0x20000418

0800761c <lcd_body_debug_update>:

uint8_t lcd_body_debug_update(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
	lcd_body_debug_draw();
 8007620:	f7ff fe82 	bl	8007328 <lcd_body_debug_draw>

	return 0;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <lcd_axis_arrow>:
	},
};


static uint8_t lcd_axis_arrow(uint16_t x, uint16_t y, uint8_t i)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	80fb      	strh	r3, [r7, #6]
 8007636:	460b      	mov	r3, r1
 8007638:	80bb      	strh	r3, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	70fb      	strb	r3, [r7, #3]
	for(uint16_t _y = 0; _y < ARROW_LENGTH_Y; _y++)
 800763e:	2300      	movs	r3, #0
 8007640:	81fb      	strh	r3, [r7, #14]
 8007642:	e02d      	b.n	80076a0 <lcd_axis_arrow+0x74>
	{
		for(uint16_t _x = 0; _x < ARROW_LENGTH_X; _x++)
 8007644:	2300      	movs	r3, #0
 8007646:	81bb      	strh	r3, [r7, #12]
 8007648:	e024      	b.n	8007694 <lcd_axis_arrow+0x68>
		{
			if(arrow_axis[i][_y][_x] == 1)
 800764a:	78f9      	ldrb	r1, [r7, #3]
 800764c:	89fb      	ldrh	r3, [r7, #14]
 800764e:	89b8      	ldrh	r0, [r7, #12]
 8007650:	4c17      	ldr	r4, [pc, #92]	; (80076b0 <lcd_axis_arrow+0x84>)
 8007652:	461a      	mov	r2, r3
 8007654:	0092      	lsls	r2, r2, #2
 8007656:	441a      	add	r2, r3
 8007658:	460b      	mov	r3, r1
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	0099      	lsls	r1, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	4413      	add	r3, r2
 8007664:	4423      	add	r3, r4
 8007666:	4403      	add	r3, r0
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10f      	bne.n	800768e <lcd_axis_arrow+0x62>
			{
				if(lcd_matrix_set_pixel(x + _x, y + _y))
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	89bb      	ldrh	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	b298      	uxth	r0, r3
 8007676:	88ba      	ldrh	r2, [r7, #4]
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	4413      	add	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	4619      	mov	r1, r3
 8007680:	f001 fb76 	bl	8008d70 <lcd_matrix_set_pixel>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <lcd_axis_arrow+0x62>
				{
					return 1;
 800768a:	2301      	movs	r3, #1
 800768c:	e00c      	b.n	80076a8 <lcd_axis_arrow+0x7c>
		for(uint16_t _x = 0; _x < ARROW_LENGTH_X; _x++)
 800768e:	89bb      	ldrh	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	81bb      	strh	r3, [r7, #12]
 8007694:	89bb      	ldrh	r3, [r7, #12]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d9d7      	bls.n	800764a <lcd_axis_arrow+0x1e>
	for(uint16_t _y = 0; _y < ARROW_LENGTH_Y; _y++)
 800769a:	89fb      	ldrh	r3, [r7, #14]
 800769c:	3301      	adds	r3, #1
 800769e:	81fb      	strh	r3, [r7, #14]
 80076a0:	89fb      	ldrh	r3, [r7, #14]
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d9ce      	bls.n	8007644 <lcd_axis_arrow+0x18>
				}
			}
		}
	}

	return 0;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd90      	pop	{r4, r7, pc}
 80076b0:	20000080 	.word	0x20000080

080076b4 <lcd_x_axis_name>:

static void lcd_x_axis_name(uint16_t x, uint16_t y)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	460a      	mov	r2, r1
 80076be:	80fb      	strh	r3, [r7, #6]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80bb      	strh	r3, [r7, #4]
	lcd_symbol_string(x, y, "T[\xB0\x43]");
 80076c4:	88b9      	ldrh	r1, [r7, #4]
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <lcd_x_axis_name+0x24>)
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 f92d 	bl	800992a <lcd_symbol_string>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	08013eb4 	.word	0x08013eb4

080076dc <lcd_y_axis_name>:

static void lcd_y_axis_name(uint16_t x, uint16_t y)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	460a      	mov	r2, r1
 80076e6:	80fb      	strh	r3, [r7, #6]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80bb      	strh	r3, [r7, #4]
	lcd_symbol_string(x, y, "t[min]");
 80076ec:	88b9      	ldrh	r1, [r7, #4]
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	4a03      	ldr	r2, [pc, #12]	; (8007700 <lcd_y_axis_name+0x24>)
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 f919 	bl	800992a <lcd_symbol_string>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	08013ebc 	.word	0x08013ebc

08007704 <lcd_x_axis_inc>:

static void lcd_x_axis_inc(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
	for(uint16_t i = X_AXIS_INC_DISTANZ; i <= X_AXIS_LENGTH_X; i += X_AXIS_INC_DISTANZ)
 800770a:	2328      	movs	r3, #40	; 0x28
 800770c:	80fb      	strh	r3, [r7, #6]
 800770e:	e009      	b.n	8007724 <lcd_x_axis_inc+0x20>
	{
		lcd_matrix_set_pixel(X_AXIS_INC_X + i, X_AXIS_INC_Y);
 8007710:	88fb      	ldrh	r3, [r7, #6]
 8007712:	3319      	adds	r3, #25
 8007714:	b29b      	uxth	r3, r3
 8007716:	2172      	movs	r1, #114	; 0x72
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fb29 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t i = X_AXIS_INC_DISTANZ; i <= X_AXIS_LENGTH_X; i += X_AXIS_INC_DISTANZ)
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	3328      	adds	r3, #40	; 0x28
 8007722:	80fb      	strh	r3, [r7, #6]
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	2b78      	cmp	r3, #120	; 0x78
 8007728:	d9f2      	bls.n	8007710 <lcd_x_axis_inc+0xc>
	}
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <lcd_y_axis_inc>:

static void lcd_y_axis_inc(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
	for(uint16_t i = Y_AXIS_INC_DISTANZ; i <= Y_AXIS_LENGTH_Y; i += Y_AXIS_INC_DISTANZ)
 800773a:	231b      	movs	r3, #27
 800773c:	80fb      	strh	r3, [r7, #6]
 800773e:	e00a      	b.n	8007756 <lcd_y_axis_inc+0x22>
	{
		lcd_matrix_set_pixel(Y_AXIS_INC_X, Y_AXIS_INC_Y - i);
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8007746:	b29b      	uxth	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	2018      	movs	r0, #24
 800774c:	f001 fb10 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t i = Y_AXIS_INC_DISTANZ; i <= Y_AXIS_LENGTH_Y; i += Y_AXIS_INC_DISTANZ)
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	331b      	adds	r3, #27
 8007754:	80fb      	strh	r3, [r7, #6]
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b51      	cmp	r3, #81	; 0x51
 800775a:	d9f1      	bls.n	8007740 <lcd_y_axis_inc+0xc>
	}
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <lcd_body_x_axis>:

static void lcd_body_x_axis(void)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
	for(uint16_t x = 0; x < (X_AXIS_ORIGIN_X - X_AXIS_START_X); x++)
 800776c:	2300      	movs	r3, #0
 800776e:	80fb      	strh	r3, [r7, #6]
 8007770:	e009      	b.n	8007786 <lcd_body_x_axis+0x20>
	{
		lcd_matrix_set_pixel(X_AXIS_START_X + x, X_AXIS_ORIGIN_Y);
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	3316      	adds	r3, #22
 8007776:	b29b      	uxth	r3, r3
 8007778:	2171      	movs	r1, #113	; 0x71
 800777a:	4618      	mov	r0, r3
 800777c:	f001 faf8 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t x = 0; x < (X_AXIS_ORIGIN_X - X_AXIS_START_X); x++)
 8007780:	88fb      	ldrh	r3, [r7, #6]
 8007782:	3301      	adds	r3, #1
 8007784:	80fb      	strh	r3, [r7, #6]
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b03      	cmp	r3, #3
 800778a:	d9f2      	bls.n	8007772 <lcd_body_x_axis+0xc>
	}

	for(uint16_t x = 0; x < X_AXIS_LENGTH_X; x++)
 800778c:	2300      	movs	r3, #0
 800778e:	80bb      	strh	r3, [r7, #4]
 8007790:	e009      	b.n	80077a6 <lcd_body_x_axis+0x40>
	{
		lcd_matrix_set_pixel(X_AXIS_ORIGIN_X + x, X_AXIS_ORIGIN_Y);
 8007792:	88bb      	ldrh	r3, [r7, #4]
 8007794:	331a      	adds	r3, #26
 8007796:	b29b      	uxth	r3, r3
 8007798:	2171      	movs	r1, #113	; 0x71
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fae8 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t x = 0; x < X_AXIS_LENGTH_X; x++)
 80077a0:	88bb      	ldrh	r3, [r7, #4]
 80077a2:	3301      	adds	r3, #1
 80077a4:	80bb      	strh	r3, [r7, #4]
 80077a6:	88bb      	ldrh	r3, [r7, #4]
 80077a8:	2b77      	cmp	r3, #119	; 0x77
 80077aa:	d9f2      	bls.n	8007792 <lcd_body_x_axis+0x2c>
	}
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <lcd_body_y_axis>:

static void lcd_body_y_axis(void)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
	for(uint16_t y = 0; y < (Y_AXIS_START_Y - Y_AXIS_ORIGIN_Y); y++)
 80077bc:	2300      	movs	r3, #0
 80077be:	80fb      	strh	r3, [r7, #6]
 80077c0:	e00a      	b.n	80077d8 <lcd_body_y_axis+0x22>
	{
		lcd_matrix_set_pixel(Y_AXIS_ORIGIN_X, Y_AXIS_START_Y - y);
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	f1c3 0374 	rsb	r3, r3, #116	; 0x74
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	2019      	movs	r0, #25
 80077ce:	f001 facf 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t y = 0; y < (Y_AXIS_START_Y - Y_AXIS_ORIGIN_Y); y++)
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	3301      	adds	r3, #1
 80077d6:	80fb      	strh	r3, [r7, #6]
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d9f1      	bls.n	80077c2 <lcd_body_y_axis+0xc>
	}

	for(uint16_t y = 0; y < Y_AXIS_LENGTH_Y; y++)
 80077de:	2300      	movs	r3, #0
 80077e0:	80bb      	strh	r3, [r7, #4]
 80077e2:	e00a      	b.n	80077fa <lcd_body_y_axis+0x44>
	{
		lcd_matrix_set_pixel(Y_AXIS_ORIGIN_X, Y_AXIS_ORIGIN_Y - y);
 80077e4:	88bb      	ldrh	r3, [r7, #4]
 80077e6:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	2019      	movs	r0, #25
 80077f0:	f001 fabe 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t y = 0; y < Y_AXIS_LENGTH_Y; y++)
 80077f4:	88bb      	ldrh	r3, [r7, #4]
 80077f6:	3301      	adds	r3, #1
 80077f8:	80bb      	strh	r3, [r7, #4]
 80077fa:	88bb      	ldrh	r3, [r7, #4]
 80077fc:	2b50      	cmp	r3, #80	; 0x50
 80077fe:	d9f1      	bls.n	80077e4 <lcd_body_y_axis+0x2e>
	}
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <lcd_body_graph_set_x_axis>:

static void lcd_body_graph_set_x_axis(uint32_t x_axis, uint32_t _time)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	char tmp[6] = {0};
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	2300      	movs	r3, #0
 800781c:	823b      	strh	r3, [r7, #16]
	uint32_t offset = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]

	sprintf(tmp, "%lu", _time);
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4918      	ldr	r1, [pc, #96]	; (800788c <lcd_body_graph_set_x_axis+0x80>)
 800782a:	4618      	mov	r0, r3
 800782c:	f00a f9b6 	bl	8011b9c <siprintf>

	if(_time < 10)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d802      	bhi.n	800783c <lcd_body_graph_set_x_axis+0x30>
	{
		offset = 4;
 8007836:	2304      	movs	r3, #4
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e016      	b.n	800786a <lcd_body_graph_set_x_axis+0x5e>
	}
	else if(_time < 100)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b63      	cmp	r3, #99	; 0x63
 8007840:	d802      	bhi.n	8007848 <lcd_body_graph_set_x_axis+0x3c>
	{
		offset = 7;
 8007842:	2307      	movs	r3, #7
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e010      	b.n	800786a <lcd_body_graph_set_x_axis+0x5e>
	}
	else if(_time < 1000)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784e:	d202      	bcs.n	8007856 <lcd_body_graph_set_x_axis+0x4a>
	{
		offset = 10;
 8007850:	230a      	movs	r3, #10
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e009      	b.n	800786a <lcd_body_graph_set_x_axis+0x5e>
	}
	else if(_time < 10000)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	f242 720f 	movw	r2, #9999	; 0x270f
 800785c:	4293      	cmp	r3, r2
 800785e:	d802      	bhi.n	8007866 <lcd_body_graph_set_x_axis+0x5a>
	{
		offset = 13;
 8007860:	230d      	movs	r3, #13
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e001      	b.n	800786a <lcd_body_graph_set_x_axis+0x5e>
	}
	else
	{
		offset = 16;
 8007866:	2310      	movs	r3, #16
 8007868:	617b      	str	r3, [r7, #20]
	}

	lcd_symbol_string(x_axis - offset, 128 - 8, tmp);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	b29a      	uxth	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	b29b      	uxth	r3, r3
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	b29b      	uxth	r3, r3
 8007876:	f107 020c 	add.w	r2, r7, #12
 800787a:	2178      	movs	r1, #120	; 0x78
 800787c:	4618      	mov	r0, r3
 800787e:	f002 f854 	bl	800992a <lcd_symbol_string>
}
 8007882:	bf00      	nop
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08013ec4 	.word	0x08013ec4

08007890 <lcd_body_graph_set_y_axis>:

#define round(x)    ((uint16_t) (x + .5))

static void lcd_body_graph_set_y_axis(uint32_t y_axis, float value)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	ed87 0a00 	vstr	s0, [r7]
	char tmp[4] = {0};
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
	uint32_t offset = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
	uint16_t round_value = round(value);
 80078a4:	6838      	ldr	r0, [r7, #0]
 80078a6:	f7f8 fe4f 	bl	8000548 <__aeabi_f2d>
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	4b16      	ldr	r3, [pc, #88]	; (8007908 <lcd_body_graph_set_y_axis+0x78>)
 80078b0:	f7f8 fcec 	bl	800028c <__adddf3>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7f9 f974 	bl	8000ba8 <__aeabi_d2uiz>
 80078c0:	4603      	mov	r3, r0
 80078c2:	827b      	strh	r3, [r7, #18]

	sprintf(tmp, "%u", round_value);
 80078c4:	8a7a      	ldrh	r2, [r7, #18]
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4910      	ldr	r1, [pc, #64]	; (800790c <lcd_body_graph_set_y_axis+0x7c>)
 80078cc:	4618      	mov	r0, r3
 80078ce:	f00a f965 	bl	8011b9c <siprintf>

	if(round_value < 10)
 80078d2:	8a7b      	ldrh	r3, [r7, #18]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d802      	bhi.n	80078de <lcd_body_graph_set_y_axis+0x4e>
	{
		offset = 12;
 80078d8:	230c      	movs	r3, #12
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e007      	b.n	80078ee <lcd_body_graph_set_y_axis+0x5e>
	}
	else if(round_value < 100)
 80078de:	8a7b      	ldrh	r3, [r7, #18]
 80078e0:	2b63      	cmp	r3, #99	; 0x63
 80078e2:	d802      	bhi.n	80078ea <lcd_body_graph_set_y_axis+0x5a>
	{
		offset = 6;
 80078e4:	2306      	movs	r3, #6
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e001      	b.n	80078ee <lcd_body_graph_set_y_axis+0x5e>
	}
	else
	{
		offset = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
	}

	lcd_symbol_string(offset, y_axis, tmp);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	b291      	uxth	r1, r2
 80078f6:	f107 020c 	add.w	r2, r7, #12
 80078fa:	4618      	mov	r0, r3
 80078fc:	f002 f815 	bl	800992a <lcd_symbol_string>
}
 8007900:	bf00      	nop
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	3fe00000 	.word	0x3fe00000
 800790c:	08013ec8 	.word	0x08013ec8

08007910 <lcd_body_graph_x_axis>:

static void lcd_body_graph_x_axis(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
	uint32_t _time = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]

	if(data_length < LCD_GRAPH_BUFFER_SIZE)
 800791a:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <lcd_body_graph_x_axis+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b77      	cmp	r3, #119	; 0x77
 8007920:	d824      	bhi.n	800796c <lcd_body_graph_x_axis+0x5c>
	{
		// initial max time in minutes for all measuring points in graph
		_time = measure_period_get_current_value() * LCD_GRAPH_BUFFER_SIZE / 600; // TODO 600 .. 60 sec->min; 10 msec->sec
 8007922:	f008 fba1 	bl	8010068 <measure_period_get_current_value>
 8007926:	4602      	mov	r2, r0
 8007928:	4613      	mov	r3, r2
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	461a      	mov	r2, r3
 8007932:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <lcd_body_graph_x_axis+0xc4>)
 8007934:	fba3 2302 	umull	r2, r3, r3, r2
 8007938:	099b      	lsrs	r3, r3, #6
 800793a:	607b      	str	r3, [r7, #4]

		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ, _time / 3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a26      	ldr	r2, [pc, #152]	; (80079d8 <lcd_body_graph_x_axis+0xc8>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	4619      	mov	r1, r3
 8007948:	2042      	movs	r0, #66	; 0x42
 800794a:	f7ff ff5f 	bl	800780c <lcd_body_graph_set_x_axis>
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 2, _time * 2 / 3);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <lcd_body_graph_x_axis+0xc8>)
 8007954:	fba2 2303 	umull	r2, r3, r2, r3
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	4619      	mov	r1, r3
 800795c:	206a      	movs	r0, #106	; 0x6a
 800795e:	f7ff ff55 	bl	800780c <lcd_body_graph_set_x_axis>
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 3, _time);
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	2092      	movs	r0, #146	; 0x92
 8007966:	f7ff ff51 	bl	800780c <lcd_body_graph_set_x_axis>

		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ, _time - LCD_GRAPH_BUFFER_SIZE * 2 / 3);
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 2, _time - LCD_GRAPH_BUFFER_SIZE / 3);
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 3, _time);
	}
}
 800796a:	e02d      	b.n	80079c8 <lcd_body_graph_x_axis+0xb8>
		_time = lcd_graph_buffer[data_length - 1].min + lcd_graph_buffer[data_length - 1].hour * 60;
 800796c:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <lcd_body_graph_x_axis+0xc0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	1e5a      	subs	r2, r3, #1
 8007972:	491a      	ldr	r1, [pc, #104]	; (80079dc <lcd_body_graph_x_axis+0xcc>)
 8007974:	4613      	mov	r3, r2
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	440b      	add	r3, r1
 800797e:	331b      	adds	r3, #27
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <lcd_body_graph_x_axis+0xc0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	4914      	ldr	r1, [pc, #80]	; (80079dc <lcd_body_graph_x_axis+0xcc>)
 800798c:	4613      	mov	r3, r2
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	440b      	add	r3, r1
 8007996:	331c      	adds	r3, #28
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	4613      	mov	r3, r2
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4403      	add	r3, r0
 80079a6:	607b      	str	r3, [r7, #4]
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ, _time - LCD_GRAPH_BUFFER_SIZE * 2 / 3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3b50      	subs	r3, #80	; 0x50
 80079ac:	4619      	mov	r1, r3
 80079ae:	2042      	movs	r0, #66	; 0x42
 80079b0:	f7ff ff2c 	bl	800780c <lcd_body_graph_set_x_axis>
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 2, _time - LCD_GRAPH_BUFFER_SIZE / 3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3b28      	subs	r3, #40	; 0x28
 80079b8:	4619      	mov	r1, r3
 80079ba:	206a      	movs	r0, #106	; 0x6a
 80079bc:	f7ff ff26 	bl	800780c <lcd_body_graph_set_x_axis>
		lcd_body_graph_set_x_axis(X_AXIS_ORIGIN_X + X_AXIS_INC_DISTANZ * 3, _time);
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	2092      	movs	r0, #146	; 0x92
 80079c4:	f7ff ff22 	bl	800780c <lcd_body_graph_set_x_axis>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20001230 	.word	0x20001230
 80079d4:	1b4e81b5 	.word	0x1b4e81b5
 80079d8:	aaaaaaab 	.word	0xaaaaaaab
 80079dc:	2000041c 	.word	0x2000041c

080079e0 <lcd_body_graph_y_axis>:

static void lcd_body_graph_y_axis(float max_value)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	ed87 0a01 	vstr	s0, [r7, #4]
	lcd_body_graph_set_y_axis(Y_AXIS_ORIGIN_Y - Y_AXIS_INC_DISTANZ - 2, max_value / 3);
 80079ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80079ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80079f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80079f6:	eeb0 0a47 	vmov.f32	s0, s14
 80079fa:	2053      	movs	r0, #83	; 0x53
 80079fc:	f7ff ff48 	bl	8007890 <lcd_body_graph_set_y_axis>
	lcd_body_graph_set_y_axis(Y_AXIS_ORIGIN_Y - Y_AXIS_INC_DISTANZ * 2 - 2, max_value * 2 / 3);
 8007a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a08:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007a0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a10:	eeb0 0a47 	vmov.f32	s0, s14
 8007a14:	2038      	movs	r0, #56	; 0x38
 8007a16:	f7ff ff3b 	bl	8007890 <lcd_body_graph_set_y_axis>
	lcd_body_graph_set_y_axis(Y_AXIS_ORIGIN_Y - Y_AXIS_INC_DISTANZ * 3 - 2, max_value);
 8007a1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8007a1e:	201d      	movs	r0, #29
 8007a20:	f7ff ff36 	bl	8007890 <lcd_body_graph_set_y_axis>
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <lcd_body_graph_number>:

static void lcd_body_graph_number(char* str)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	lcd_symbol_string(240 - 8*8, BODY_SUB_HOME_Y, str);		// TODO numbers
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	2110      	movs	r1, #16
 8007a38:	20b0      	movs	r0, #176	; 0xb0
 8007a3a:	f001 ff76 	bl	800992a <lcd_symbol_string>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <lcd_body_graph_adc_order>:

static void lcd_body_graph_adc_order(char* str, uint8_t _index)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
	lcd_symbol_string(240 - 8*8, BODY_SUB_HOME_Y + LETTER_Y + _index * LETTER_Y , str);		// TODO numbers
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	3303      	adds	r3, #3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	20b0      	movs	r0, #176	; 0xb0
 8007a62:	f001 ff62 	bl	800992a <lcd_symbol_string>
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <lcd_body_graph_menu>:

static void lcd_body_graph_menu(uint8_t _index)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
	lcd_axis_arrow(GRAPH_MENU_AXIS_UP_START_X, GRAPH_MENU_AXIS_UP_START_Y, ARROW_UP);
 8007a78:	2201      	movs	r2, #1
 8007a7a:	211b      	movs	r1, #27
 8007a7c:	20eb      	movs	r0, #235	; 0xeb
 8007a7e:	f7ff fdd5 	bl	800762c <lcd_axis_arrow>

	for(uint16_t y = 0; y < GRAPH_MENU_AXIS_LENGTH; y++)
 8007a82:	2300      	movs	r3, #0
 8007a84:	81fb      	strh	r3, [r7, #14]
 8007a86:	e009      	b.n	8007a9c <lcd_body_graph_menu+0x2e>
	{
		lcd_matrix_set_pixel(GRAPH_MENU_AXIS_START_X, y + GRAPH_MENU_AXIS_START_Y);
 8007a88:	89fb      	ldrh	r3, [r7, #14]
 8007a8a:	3320      	adds	r3, #32
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	4619      	mov	r1, r3
 8007a90:	20ed      	movs	r0, #237	; 0xed
 8007a92:	f001 f96d 	bl	8008d70 <lcd_matrix_set_pixel>
	for(uint16_t y = 0; y < GRAPH_MENU_AXIS_LENGTH; y++)
 8007a96:	89fb      	ldrh	r3, [r7, #14]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	81fb      	strh	r3, [r7, #14]
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	2b1d      	cmp	r3, #29
 8007aa0:	d9f2      	bls.n	8007a88 <lcd_body_graph_menu+0x1a>
	}

	lcd_symbol_rect_filled(GRAPH_MENU_AXIS_START_X - 1, GRAPH_MENU_AXIS_START_Y + _index * GRAPH_MENU_CUBE_GAB, GRAPH_MENU_CUBE_LENGTH, GRAPH_MENU_CUBE_LENGTH);
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	00d2      	lsls	r2, r2, #3
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3320      	adds	r3, #32
 8007ab0:	b299      	uxth	r1, r3
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	20ec      	movs	r0, #236	; 0xec
 8007ab8:	f001 fd9b 	bl	80095f2 <lcd_symbol_rect_filled>

	lcd_axis_arrow(GRAPH_MENU_AXIS_DOWN_START_X, GRAPH_MENU_AXIS_DOWN_START_Y, ARROW_DOWN);
 8007abc:	2202      	movs	r2, #2
 8007abe:	213e      	movs	r1, #62	; 0x3e
 8007ac0:	20eb      	movs	r0, #235	; 0xeb
 8007ac2:	f7ff fdb3 	bl	800762c <lcd_axis_arrow>
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <lcd_body_graph_reset>:

static uint8_t lcd_body_graph_reset(void)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	af00      	add	r7, sp, #0
	lcd_matrix_reset(X_AXIS_ORIGIN_X, Y_AXIS_ORIGIN_Y - Y_AXIS_LENGTH_Y, X_AXIS_LENGTH_X , Y_AXIS_LENGTH_Y);
 8007ad2:	2351      	movs	r3, #81	; 0x51
 8007ad4:	2278      	movs	r2, #120	; 0x78
 8007ad6:	211f      	movs	r1, #31
 8007ad8:	201a      	movs	r0, #26
 8007ada:	f001 fa8b 	bl	8008ff4 <lcd_matrix_reset>

	return 0;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <lcd_body_graph_diagram_draw>:

static void lcd_body_graph_diagram_draw(uint8_t _index)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b091      	sub	sp, #68	; 0x44
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
	// TODO maximum_old merken, wenn es sich ändert, -> Reset Matrix

	float maximum = 0;
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t lcd_adc_order_index[3] = {0};
 8007af4:	4b85      	ldr	r3, [pc, #532]	; (8007d0c <lcd_body_graph_diagram_draw+0x228>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	81bb      	strh	r3, [r7, #12]
 8007afa:	2300      	movs	r3, #0
 8007afc:	73bb      	strb	r3, [r7, #14]

	for(uint32_t x = 0; x < data_length; x++)
 8007afe:	2300      	movs	r3, #0
 8007b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b02:	e02d      	b.n	8007b60 <lcd_body_graph_diagram_draw+0x7c>
	{
		for(uint32_t y = buffer_index[_index][0]; y < buffer_index[_index][1]; y++)
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	4a82      	ldr	r2, [pc, #520]	; (8007d10 <lcd_body_graph_diagram_draw+0x22c>)
 8007b08:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0e:	e01b      	b.n	8007b48 <lcd_body_graph_diagram_draw+0x64>
		{
			float value = calc_temp(lcd_graph_buffer[x].buffer[y]);
 8007b10:	4980      	ldr	r1, [pc, #512]	; (8007d14 <lcd_body_graph_diagram_draw+0x230>)
 8007b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b14:	4613      	mov	r3, r2
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f007 ffbc 	bl	800faa0 <calc_temp>
 8007b28:	ed87 0a04 	vstr	s0, [r7, #16]

			if(maximum < value)
 8007b2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	d501      	bpl.n	8007b42 <lcd_body_graph_diagram_draw+0x5e>
			{
				maximum = value;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(uint32_t y = buffer_index[_index][0]; y < buffer_index[_index][1]; y++)
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	3301      	adds	r3, #1
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	4a71      	ldr	r2, [pc, #452]	; (8007d10 <lcd_body_graph_diagram_draw+0x22c>)
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	461a      	mov	r2, r3
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d3da      	bcc.n	8007b10 <lcd_body_graph_diagram_draw+0x2c>
	for(uint32_t x = 0; x < data_length; x++)
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b60:	4b6d      	ldr	r3, [pc, #436]	; (8007d18 <lcd_body_graph_diagram_draw+0x234>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3cc      	bcc.n	8007b04 <lcd_body_graph_diagram_draw+0x20>
			}
		}
	}
	// end calc maximum

	if(data_length)
 8007b6a:	4b6b      	ldr	r3, [pc, #428]	; (8007d18 <lcd_body_graph_diagram_draw+0x234>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d07b      	beq.n	8007c6a <lcd_body_graph_diagram_draw+0x186>
	{
		// set index
		uint32_t x = buffer_index[_index][0];
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	4a66      	ldr	r2, [pc, #408]	; (8007d10 <lcd_body_graph_diagram_draw+0x22c>)
 8007b76:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007b7a:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t y = 0; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b80:	e00d      	b.n	8007b9e <lcd_body_graph_diagram_draw+0xba>
		{
			lcd_adc_order_index[y] = x;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	f107 020c 	add.w	r2, r7, #12
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	460a      	mov	r2, r1
 8007b90:	701a      	strb	r2, [r3, #0]
			x++;
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	3301      	adds	r3, #1
 8007b96:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t y = 0; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d9ee      	bls.n	8007b82 <lcd_body_graph_diagram_draw+0x9e>
		}

		// sort index
		for(uint32_t y = 1; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba8:	e041      	b.n	8007c2e <lcd_body_graph_diagram_draw+0x14a>
		{
			if(lcd_graph_buffer[data_length - 1].buffer[lcd_adc_order_index[y - 1]] < lcd_graph_buffer[data_length - 1].buffer[lcd_adc_order_index[y]])
 8007baa:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <lcd_body_graph_diagram_draw+0x234>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1e5a      	subs	r2, r3, #1
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007bb8:	440b      	add	r3, r1
 8007bba:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	4954      	ldr	r1, [pc, #336]	; (8007d14 <lcd_body_graph_diagram_draw+0x230>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	4403      	add	r3, r0
 8007bca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8007bce:	4b52      	ldr	r3, [pc, #328]	; (8007d18 <lcd_body_graph_diagram_draw+0x234>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	f107 000c 	add.w	r0, r7, #12
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	4403      	add	r3, r0
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	461c      	mov	r4, r3
 8007be0:	484c      	ldr	r0, [pc, #304]	; (8007d14 <lcd_body_graph_diagram_draw+0x230>)
 8007be2:	4613      	mov	r3, r2
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	4423      	add	r3, r4
 8007bea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d21a      	bcs.n	8007c28 <lcd_body_graph_diagram_draw+0x144>
			{
				uint8_t tmp = lcd_adc_order_index[y];
 8007bf2:	f107 020c 	add.w	r2, r7, #12
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	4413      	add	r3, r2
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	76fb      	strb	r3, [r7, #27]
				lcd_adc_order_index[y] = lcd_adc_order_index[y - 1];
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	3b01      	subs	r3, #1
 8007c02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007c06:	4413      	add	r3, r2
 8007c08:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8007c0c:	f107 020c 	add.w	r2, r7, #12
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	4413      	add	r3, r2
 8007c14:	460a      	mov	r2, r1
 8007c16:	701a      	strb	r2, [r3, #0]
				lcd_adc_order_index[y - 1] = tmp;
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007c20:	4413      	add	r3, r2
 8007c22:	7efa      	ldrb	r2, [r7, #27]
 8007c24:	f803 2c34 	strb.w	r2, [r3, #-52]
		for(uint32_t y = 1; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d9ba      	bls.n	8007baa <lcd_body_graph_diagram_draw+0xc6>
			}
		}

		for(uint32_t y = 0; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007c34:	2300      	movs	r3, #0
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
 8007c38:	e014      	b.n	8007c64 <lcd_body_graph_diagram_draw+0x180>
		{
			lcd_body_graph_adc_order(lcd_graph_adc_string[lcd_adc_order_index[y]], y);
 8007c3a:	f107 020c 	add.w	r2, r7, #12
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	4413      	add	r3, r2
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	4613      	mov	r3, r2
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	4413      	add	r3, r2
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	4a33      	ldr	r2, [pc, #204]	; (8007d1c <lcd_body_graph_diagram_draw+0x238>)
 8007c50:	4413      	add	r3, r2
 8007c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fef4 	bl	8007a46 <lcd_body_graph_adc_order>
		for(uint32_t y = 0; y < (sizeof(lcd_adc_order_index) / sizeof(lcd_adc_order_index[0])); y++)
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	3301      	adds	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d9e7      	bls.n	8007c3a <lcd_body_graph_diagram_draw+0x156>
		}
	}

	for(uint32_t x = 0; x < data_length; x++)
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	e03d      	b.n	8007cec <lcd_body_graph_diagram_draw+0x208>
	{
		for(uint32_t y = buffer_index[_index][0]; y < buffer_index[_index][1]; y++)
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	4a27      	ldr	r2, [pc, #156]	; (8007d10 <lcd_body_graph_diagram_draw+0x22c>)
 8007c74:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e02b      	b.n	8007cd4 <lcd_body_graph_diagram_draw+0x1f0>
		{
			float value = calc_temp(lcd_graph_buffer[x].buffer[y]);
 8007c7c:	4925      	ldr	r1, [pc, #148]	; (8007d14 <lcd_body_graph_diagram_draw+0x230>)
 8007c7e:	6a3a      	ldr	r2, [r7, #32]
 8007c80:	4613      	mov	r3, r2
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f007 ff06 	bl	800faa0 <calc_temp>
 8007c94:	ed87 0a05 	vstr	s0, [r7, #20]

			lcd_matrix_set_pixel(X_AXIS_ORIGIN_X + x, Y_AXIS_ORIGIN_Y + 1 - (value * Y_AXIS_LENGTH_Y / maximum));
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	331a      	adds	r3, #26
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8007ca4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007d20 <lcd_body_graph_diagram_draw+0x23c>
 8007ca8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8007d24 <lcd_body_graph_diagram_draw+0x240>
 8007cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 f851 	bl	8008d70 <lcd_matrix_set_pixel>
		for(uint32_t y = buffer_index[_index][0]; y < buffer_index[_index][1]; y++)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <lcd_body_graph_diagram_draw+0x22c>)
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d3ca      	bcc.n	8007c7c <lcd_body_graph_diagram_draw+0x198>
	for(uint32_t x = 0; x < data_length; x++)
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	623b      	str	r3, [r7, #32]
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <lcd_body_graph_diagram_draw+0x234>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a3a      	ldr	r2, [r7, #32]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d3bc      	bcc.n	8007c70 <lcd_body_graph_diagram_draw+0x18c>
		}
	}

	lcd_body_graph_x_axis();
 8007cf6:	f7ff fe0b 	bl	8007910 <lcd_body_graph_x_axis>
	lcd_body_graph_y_axis(maximum);
 8007cfa:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8007cfe:	f7ff fe6f 	bl	80079e0 <lcd_body_graph_y_axis>
}
 8007d02:	bf00      	nop
 8007d04:	3744      	adds	r7, #68	; 0x44
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08013ecc 	.word	0x08013ecc
 8007d10:	2000000c 	.word	0x2000000c
 8007d14:	2000041c 	.word	0x2000041c
 8007d18:	20001230 	.word	0x20001230
 8007d1c:	20000038 	.word	0x20000038
 8007d20:	42a20000 	.word	0x42a20000
 8007d24:	42e20000 	.word	0x42e20000

08007d28 <lcd_body_graph_draw>:

uint8_t lcd_body_graph_draw(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
	lcd_body_x_axis();
 8007d2c:	f7ff fd1b 	bl	8007766 <lcd_body_x_axis>
	lcd_body_y_axis();
 8007d30:	f7ff fd41 	bl	80077b6 <lcd_body_y_axis>

	lcd_axis_arrow(X_AXIS_ARROW_START_X, X_AXIS_ARROW_START_Y, ARROW_RIGHT);
 8007d34:	2200      	movs	r2, #0
 8007d36:	216f      	movs	r1, #111	; 0x6f
 8007d38:	2092      	movs	r0, #146	; 0x92
 8007d3a:	f7ff fc77 	bl	800762c <lcd_axis_arrow>
	lcd_axis_arrow(Y_AXIS_ARROW_START_X, Y_AXIS_ARROW_START_Y, ARROW_UP);
 8007d3e:	2201      	movs	r2, #1
 8007d40:	211b      	movs	r1, #27
 8007d42:	2017      	movs	r0, #23
 8007d44:	f7ff fc72 	bl	800762c <lcd_axis_arrow>

	lcd_y_axis_name(X_AXIS_NAME_X, X_AXIS_NAME_Y);
 8007d48:	216e      	movs	r1, #110	; 0x6e
 8007d4a:	2098      	movs	r0, #152	; 0x98
 8007d4c:	f7ff fcc6 	bl	80076dc <lcd_y_axis_name>
	lcd_x_axis_name(Y_AXIS_NAME_X, Y_AXIS_NAME_Y);
 8007d50:	2112      	movs	r1, #18
 8007d52:	2013      	movs	r0, #19
 8007d54:	f7ff fcae 	bl	80076b4 <lcd_x_axis_name>

	lcd_x_axis_inc();
 8007d58:	f7ff fcd4 	bl	8007704 <lcd_x_axis_inc>
	lcd_y_axis_inc();
 8007d5c:	f7ff fcea 	bl	8007734 <lcd_y_axis_inc>

	lcd_body_graph_diagram_draw(lcd_graph_index);
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <lcd_body_graph_draw+0x68>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff febd 	bl	8007ae4 <lcd_body_graph_diagram_draw>
	lcd_body_graph_menu(lcd_graph_index);
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <lcd_body_graph_draw+0x68>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fe7d 	bl	8007a6e <lcd_body_graph_menu>

	lcd_body_graph_number(lcd_graph_buffer_string[lcd_graph_index]);
 8007d74:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <lcd_body_graph_draw+0x68>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	4413      	add	r3, r2
 8007d80:	4a04      	ldr	r2, [pc, #16]	; (8007d94 <lcd_body_graph_draw+0x6c>)
 8007d82:	4413      	add	r3, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fe51 	bl	8007a2c <lcd_body_graph_number>

	return 0;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000122c 	.word	0x2000122c
 8007d94:	20000014 	.word	0x20000014

08007d98 <lcd_body_graph_update>:

uint8_t lcd_body_graph_update(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	size_t count = buffer_lcd_get_count();
 8007d9e:	f007 fa9f 	bl	800f2e0 <buffer_lcd_get_count>
 8007da2:	6078      	str	r0, [r7, #4]

	if(count > 0)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d044      	beq.n	8007e34 <lcd_body_graph_update+0x9c>
	{
		if(count >= LCD_GRAPH_BUFFER_SIZE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b77      	cmp	r3, #119	; 0x77
 8007dae:	d909      	bls.n	8007dc4 <lcd_body_graph_update+0x2c>
		{
			count = LCD_GRAPH_BUFFER_SIZE;
 8007db0:	2378      	movs	r3, #120	; 0x78
 8007db2:	607b      	str	r3, [r7, #4]
			buffer_lcd_get_values(lcd_graph_buffer, count);
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4822      	ldr	r0, [pc, #136]	; (8007e40 <lcd_body_graph_update+0xa8>)
 8007db8:	f007 fb40 	bl	800f43c <buffer_lcd_get_values>
			data_length = count;
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	e030      	b.n	8007e26 <lcd_body_graph_update+0x8e>
		}
		else
		{
			if((data_length + count) > LCD_GRAPH_BUFFER_SIZE)
 8007dc4:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4413      	add	r3, r2
 8007dcc:	2b78      	cmp	r3, #120	; 0x78
 8007dce:	d917      	bls.n	8007e00 <lcd_body_graph_update+0x68>
			{
				memmove(&lcd_graph_buffer[0], &lcd_graph_buffer[0] + count, (LCD_GRAPH_BUFFER_SIZE - count) * sizeof(lcd_graph_buffer[0]));
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <lcd_body_graph_update+0xa8>)
 8007dde:	18d1      	adds	r1, r2, r3
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	0112      	lsls	r2, r2, #4
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8007dee:	461a      	mov	r2, r3
 8007df0:	4813      	ldr	r0, [pc, #76]	; (8007e40 <lcd_body_graph_update+0xa8>)
 8007df2:	f009 f98d 	bl	8011110 <memmove>
				data_length = LCD_GRAPH_BUFFER_SIZE - count;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8007dfc:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007dfe:	6013      	str	r3, [r2, #0]
			}

			buffer_lcd_get_values(lcd_graph_buffer + data_length, count);
 8007e00:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4613      	mov	r3, r2
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <lcd_body_graph_update+0xa8>)
 8007e10:	4413      	add	r3, r2
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f007 fb11 	bl	800f43c <buffer_lcd_get_values>
			data_length += count;
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <lcd_body_graph_update+0xac>)
 8007e24:	6013      	str	r3, [r2, #0]
		}

		lcd_body_graph_reset();
 8007e26:	f7ff fe52 	bl	8007ace <lcd_body_graph_reset>
		lcd_body_graph_diagram_draw(lcd_graph_index);
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <lcd_body_graph_update+0xb0>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fe58 	bl	8007ae4 <lcd_body_graph_diagram_draw>
	}

	return 0;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	2000041c 	.word	0x2000041c
 8007e44:	20001230 	.word	0x20001230
 8007e48:	2000122c 	.word	0x2000122c

08007e4c <lcd_body_graph_trigger_up>:

uint8_t lcd_body_graph_trigger_up(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
	if(lcd_graph_index == 0)
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <lcd_body_graph_trigger_up+0x2c>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d102      	bne.n	8007e5e <lcd_body_graph_trigger_up+0x12>
	{
		lcd_graph_index = sizeof(lcd_graph_buffer_string) / sizeof(lcd_graph_buffer_string[0]);
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <lcd_body_graph_trigger_up+0x2c>)
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	701a      	strb	r2, [r3, #0]
	}

	lcd_graph_index--;
 8007e5e:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <lcd_body_graph_trigger_up+0x2c>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b04      	ldr	r3, [pc, #16]	; (8007e78 <lcd_body_graph_trigger_up+0x2c>)
 8007e68:	701a      	strb	r2, [r3, #0]

	return 0;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	2000122c 	.word	0x2000122c

08007e7c <lcd_body_graph_trigger_down>:

uint8_t lcd_body_graph_trigger_down(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
	lcd_graph_index++;
 8007e80:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <lcd_body_graph_trigger_down+0x2c>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <lcd_body_graph_trigger_down+0x2c>)
 8007e8a:	701a      	strb	r2, [r3, #0]
	if(lcd_graph_index >= (sizeof(lcd_graph_buffer_string) / sizeof(lcd_graph_buffer_string[0])))
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <lcd_body_graph_trigger_down+0x2c>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d902      	bls.n	8007e9a <lcd_body_graph_trigger_down+0x1e>
	{
		lcd_graph_index = 0;
 8007e94:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <lcd_body_graph_trigger_down+0x2c>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
	}

	return 0;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	2000122c 	.word	0x2000122c

08007eac <lcd_body_graph_stop>:

void lcd_body_graph_stop(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
	buffer_lcd_stop();
 8007eb0:	f007 fb6c 	bl	800f58c <buffer_lcd_stop>
	data_length = 0;
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <lcd_body_graph_stop+0x14>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20001230 	.word	0x20001230

08007ec4 <settings_start_draw>:

uint8_t lcd_period_mode_index = 0;


static void settings_start_draw(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETT_START_RECT_START_X, SETT_START_RECT_START_Y, SETT_START_RECT_LENGTH_X, SETT_START_RECT_LENGTH_Y);
 8007ec8:	230b      	movs	r3, #11
 8007eca:	2257      	movs	r2, #87	; 0x57
 8007ecc:	2114      	movs	r1, #20
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f001 fb3a 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETT_START_TEXT_START_X, SETT_START_TEXT_START_Y, MEASURE_START_STRING);
 8007ed4:	4a03      	ldr	r2, [pc, #12]	; (8007ee4 <settings_start_draw+0x20>)
 8007ed6:	2116      	movs	r1, #22
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f001 fd26 	bl	800992a <lcd_symbol_string>
}
 8007ede:	bf00      	nop
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08013ed0 	.word	0x08013ed0

08007ee8 <settings_start_draw_inv>:

static void settings_start_draw_inv(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETT_START_RECT_START_X, SETT_START_RECT_START_Y, SETT_START_RECT_LENGTH_X, SETT_START_RECT_LENGTH_Y);
 8007eec:	230b      	movs	r3, #11
 8007eee:	2257      	movs	r2, #87	; 0x57
 8007ef0:	2114      	movs	r1, #20
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f001 fb7d 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETT_START_TEXT_START_X, SETT_START_TEXT_START_Y, MEASURE_START_STRING);
 8007ef8:	4a03      	ldr	r2, [pc, #12]	; (8007f08 <settings_start_draw_inv+0x20>)
 8007efa:	2116      	movs	r1, #22
 8007efc:	2001      	movs	r0, #1
 8007efe:	f001 fd32 	bl	8009966 <lcd_symbol_string_inv>
}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	08013ed0 	.word	0x08013ed0

08007f0c <settings_pause_draw>:

static void settings_pause_draw(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETT_PAUSE_RECT_START_X, SETT_PAUSE_RECT_START_Y, SETT_PAUSE_RECT_LENGTH_X, SETT_PAUSE_RECT_LENGTH_Y);
 8007f10:	230b      	movs	r3, #11
 8007f12:	2257      	movs	r2, #87	; 0x57
 8007f14:	2120      	movs	r1, #32
 8007f16:	2000      	movs	r0, #0
 8007f18:	f001 fb16 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETT_PAUSE_TEXT_START_X, SETT_PAUSE_TEXT_START_Y, MEASURE_PAUSE_STRING);
 8007f1c:	4a03      	ldr	r2, [pc, #12]	; (8007f2c <settings_pause_draw+0x20>)
 8007f1e:	2122      	movs	r1, #34	; 0x22
 8007f20:	2001      	movs	r0, #1
 8007f22:	f001 fd02 	bl	800992a <lcd_symbol_string>
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08013ee0 	.word	0x08013ee0

08007f30 <settings_pause_draw_inv>:

static void settings_pause_draw_inv(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETT_PAUSE_RECT_START_X, SETT_PAUSE_RECT_START_Y, SETT_PAUSE_RECT_LENGTH_X, SETT_PAUSE_RECT_LENGTH_Y);
 8007f34:	230b      	movs	r3, #11
 8007f36:	2257      	movs	r2, #87	; 0x57
 8007f38:	2120      	movs	r1, #32
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f001 fb59 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETT_PAUSE_TEXT_START_X, SETT_PAUSE_TEXT_START_Y, MEASURE_PAUSE_STRING);
 8007f40:	4a03      	ldr	r2, [pc, #12]	; (8007f50 <settings_pause_draw_inv+0x20>)
 8007f42:	2122      	movs	r1, #34	; 0x22
 8007f44:	2001      	movs	r0, #1
 8007f46:	f001 fd0e 	bl	8009966 <lcd_symbol_string_inv>
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	08013ee0 	.word	0x08013ee0

08007f54 <settings_stop_draw>:

static void settings_stop_draw(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETT_STOP_RECT_START_X, SETT_STOP_RECT_START_Y, SETT_STOP_RECT_LENGTH_X, SETT_STOP_RECT_LENGTH_Y);
 8007f58:	230b      	movs	r3, #11
 8007f5a:	2257      	movs	r2, #87	; 0x57
 8007f5c:	212c      	movs	r1, #44	; 0x2c
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f001 faf2 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETT_STOP_TEXT_START_X, SETT_STOP_TEXT_START_Y, MEASURE_STOP_STRING);
 8007f64:	4a03      	ldr	r2, [pc, #12]	; (8007f74 <settings_stop_draw+0x20>)
 8007f66:	212e      	movs	r1, #46	; 0x2e
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f001 fcde 	bl	800992a <lcd_symbol_string>
}
 8007f6e:	bf00      	nop
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	08013ef0 	.word	0x08013ef0

08007f78 <settings_stop_draw_inv>:

static void settings_stop_draw_inv(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETT_STOP_RECT_START_X, SETT_STOP_RECT_START_Y, SETT_STOP_RECT_LENGTH_X, SETT_STOP_RECT_LENGTH_Y);
 8007f7c:	230b      	movs	r3, #11
 8007f7e:	2257      	movs	r2, #87	; 0x57
 8007f80:	212c      	movs	r1, #44	; 0x2c
 8007f82:	2000      	movs	r0, #0
 8007f84:	f001 fb35 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETT_STOP_TEXT_START_X, SETT_STOP_TEXT_START_Y, MEASURE_STOP_STRING);
 8007f88:	4a03      	ldr	r2, [pc, #12]	; (8007f98 <settings_stop_draw_inv+0x20>)
 8007f8a:	212e      	movs	r1, #46	; 0x2e
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f001 fcea 	bl	8009966 <lcd_symbol_string_inv>
}
 8007f92:	bf00      	nop
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	08013ef0 	.word	0x08013ef0

08007f9c <settings_period_draw>:

static void settings_period_draw(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETT_PERIOD_RECT_START_X, SETT_PERIOD_RECT_START_Y, SETT_PERIOD_RECT_LENGTH_X, SETT_PERIOD_RECT_LENGTH_Y);
 8007fa0:	230b      	movs	r3, #11
 8007fa2:	2257      	movs	r2, #87	; 0x57
 8007fa4:	2138      	movs	r1, #56	; 0x38
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	f001 face 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETT_PERIOD_TEXT_START_X, SETT_PERIOD_TEXT_START_Y, MEASURE_PERIOD_STRING);
 8007fac:	4a03      	ldr	r2, [pc, #12]	; (8007fbc <settings_period_draw+0x20>)
 8007fae:	213a      	movs	r1, #58	; 0x3a
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	f001 fcba 	bl	800992a <lcd_symbol_string>
}
 8007fb6:	bf00      	nop
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	08013f00 	.word	0x08013f00

08007fc0 <settings_period_draw_inv>:

static void settings_period_draw_inv(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETT_PERIOD_RECT_START_X, SETT_PERIOD_RECT_START_Y, SETT_PERIOD_RECT_LENGTH_X, SETT_PERIOD_RECT_LENGTH_Y);
 8007fc4:	230b      	movs	r3, #11
 8007fc6:	2257      	movs	r2, #87	; 0x57
 8007fc8:	2138      	movs	r1, #56	; 0x38
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f001 fb11 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETT_PERIOD_TEXT_START_X, SETT_PERIOD_TEXT_START_Y, MEASURE_PERIOD_STRING);
 8007fd0:	4a03      	ldr	r2, [pc, #12]	; (8007fe0 <settings_period_draw_inv+0x20>)
 8007fd2:	213a      	movs	r1, #58	; 0x3a
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	f001 fcc6 	bl	8009966 <lcd_symbol_string_inv>
}
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	08013f00 	.word	0x08013f00

08007fe4 <settings_flip_draw>:

static void settings_flip_draw(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETT_FLIP_RECT_START_X, SETT_FLIP_RECT_START_Y, SETT_FLIP_RECT_LENGTH_X, SETT_FLIP_RECT_LENGTH_Y);
 8007fe8:	230b      	movs	r3, #11
 8007fea:	2257      	movs	r2, #87	; 0x57
 8007fec:	2144      	movs	r1, #68	; 0x44
 8007fee:	2000      	movs	r0, #0
 8007ff0:	f001 faaa 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETT_FLIP_TEXT_START_X, SETT_FLIP_TEXT_START_Y, SETT_FLIP_TEXT);
 8007ff4:	4a03      	ldr	r2, [pc, #12]	; (8008004 <settings_flip_draw+0x20>)
 8007ff6:	2146      	movs	r1, #70	; 0x46
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f001 fc96 	bl	800992a <lcd_symbol_string>
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	08013f10 	.word	0x08013f10

08008008 <settings_flip_draw_inv>:

static void settings_flip_draw_inv(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETT_FLIP_RECT_START_X, SETT_FLIP_RECT_START_Y, SETT_FLIP_RECT_LENGTH_X, SETT_FLIP_RECT_LENGTH_Y);
 800800c:	230b      	movs	r3, #11
 800800e:	2257      	movs	r2, #87	; 0x57
 8008010:	2144      	movs	r1, #68	; 0x44
 8008012:	2000      	movs	r0, #0
 8008014:	f001 faed 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETT_FLIP_TEXT_START_X, SETT_FLIP_TEXT_START_Y, SETT_FLIP_TEXT);
 8008018:	4a03      	ldr	r2, [pc, #12]	; (8008028 <settings_flip_draw_inv+0x20>)
 800801a:	2146      	movs	r1, #70	; 0x46
 800801c:	2001      	movs	r0, #1
 800801e:	f001 fca2 	bl	8009966 <lcd_symbol_string_inv>
}
 8008022:	bf00      	nop
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	08013f10 	.word	0x08013f10

0800802c <settings_draw_basic>:


static void settings_draw_basic(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
	settings_start_draw();
 8008030:	f7ff ff48 	bl	8007ec4 <settings_start_draw>
	settings_pause_draw();
 8008034:	f7ff ff6a 	bl	8007f0c <settings_pause_draw>
	settings_stop_draw();
 8008038:	f7ff ff8c 	bl	8007f54 <settings_stop_draw>
	settings_period_draw();
 800803c:	f7ff ffae 	bl	8007f9c <settings_period_draw>
	settings_flip_draw();
 8008040:	f7ff ffd0 	bl	8007fe4 <settings_flip_draw>
}
 8008044:	bf00      	nop
 8008046:	bd80      	pop	{r7, pc}

08008048 <lcd_body_settings_start_trigger_ok>:

// SETTINGS START
uint8_t lcd_body_settings_start_trigger_ok(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
	measure_set_mode_start();
 800804c:	f007 ff9a 	bl	800ff84 <measure_set_mode_start>

	return 0;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <settings_start_button_draw>:

static uint8_t settings_start_button_draw(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
	if(!measure_get_mode_start())
 800805c:	f007 ffac 	bl	800ffb8 <measure_get_mode_start>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d111      	bne.n	800808a <settings_start_button_draw+0x32>
	{
		lcd_symbol_rect_filled(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 8008066:	230b      	movs	r3, #11
 8008068:	220f      	movs	r2, #15
 800806a:	2114      	movs	r1, #20
 800806c:	2078      	movs	r0, #120	; 0x78
 800806e:	f001 fac0 	bl	80095f2 <lcd_symbol_rect_filled>
		lcd_symbol_rect(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 8008072:	230b      	movs	r3, #11
 8008074:	220f      	movs	r2, #15
 8008076:	2114      	movs	r1, #20
 8008078:	2086      	movs	r0, #134	; 0x86
 800807a:	f001 fa65 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(SETT_START_RIGHT_START_X + LINE_WIDTH, SETT_START_RIGHT_START_Y + LINE_WIDTH + SPACE, "GO");
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <settings_start_button_draw+0x50>)
 8008080:	2116      	movs	r1, #22
 8008082:	2087      	movs	r0, #135	; 0x87
 8008084:	f001 fc51 	bl	800992a <lcd_symbol_string>
 8008088:	e00b      	b.n	80080a2 <settings_start_button_draw+0x4a>
	}
	else
	{
		lcd_symbol_rect(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 800808a:	230b      	movs	r3, #11
 800808c:	220f      	movs	r2, #15
 800808e:	2114      	movs	r1, #20
 8008090:	2078      	movs	r0, #120	; 0x78
 8008092:	f001 fa59 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_rect_filled(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 8008096:	230b      	movs	r3, #11
 8008098:	220f      	movs	r2, #15
 800809a:	2114      	movs	r1, #20
 800809c:	2086      	movs	r0, #134	; 0x86
 800809e:	f001 faa8 	bl	80095f2 <lcd_symbol_rect_filled>
	}

	return 0;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08013f20 	.word	0x08013f20

080080ac <lcd_body_settings_start_draw>:

uint8_t lcd_body_settings_start_draw(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
	settings_draw_basic();
 80080b0:	f7ff ffbc 	bl	800802c <settings_draw_basic>
	settings_start_draw_inv();
 80080b4:	f7ff ff18 	bl	8007ee8 <settings_start_draw_inv>

	settings_start_button_draw();
 80080b8:	f7ff ffce 	bl	8008058 <settings_start_button_draw>

	return 0;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <lcd_body_settings_start_update>:

uint8_t lcd_body_settings_start_update(void)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	af00      	add	r7, sp, #0
	return settings_start_button_draw();
 80080c6:	f7ff ffc7 	bl	8008058 <settings_start_button_draw>
 80080ca:	4603      	mov	r3, r0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <lcd_body_settings_pause_trigger_ok>:

// SETTINGS PAUSE
uint8_t lcd_body_settings_pause_trigger_ok(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
	measure_set_mode_pause();
 80080d4:	f007 ff80 	bl	800ffd8 <measure_set_mode_pause>

	return 0;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <settings_pause_button_draw>:

static uint8_t settings_pause_button_draw(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
	if(!measure_get_mode_pause())
 80080e4:	f007 ff8e 	bl	8010004 <measure_get_mode_pause>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d111      	bne.n	8008112 <settings_pause_button_draw+0x32>
	{
		lcd_symbol_rect_filled(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 80080ee:	230b      	movs	r3, #11
 80080f0:	220f      	movs	r2, #15
 80080f2:	2114      	movs	r1, #20
 80080f4:	2078      	movs	r0, #120	; 0x78
 80080f6:	f001 fa7c 	bl	80095f2 <lcd_symbol_rect_filled>
		lcd_symbol_rect(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 80080fa:	230b      	movs	r3, #11
 80080fc:	220f      	movs	r2, #15
 80080fe:	2114      	movs	r1, #20
 8008100:	2086      	movs	r0, #134	; 0x86
 8008102:	f001 fa21 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(SETT_START_RIGHT_START_X + LINE_WIDTH, SETT_START_RIGHT_START_Y + LINE_WIDTH + SPACE, "PA");
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <settings_pause_button_draw+0x50>)
 8008108:	2116      	movs	r1, #22
 800810a:	2087      	movs	r0, #135	; 0x87
 800810c:	f001 fc0d 	bl	800992a <lcd_symbol_string>
 8008110:	e00b      	b.n	800812a <settings_pause_button_draw+0x4a>
	}
	else
	{
		lcd_symbol_rect(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 8008112:	230b      	movs	r3, #11
 8008114:	220f      	movs	r2, #15
 8008116:	2114      	movs	r1, #20
 8008118:	2078      	movs	r0, #120	; 0x78
 800811a:	f001 fa15 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_rect_filled(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 800811e:	230b      	movs	r3, #11
 8008120:	220f      	movs	r2, #15
 8008122:	2114      	movs	r1, #20
 8008124:	2086      	movs	r0, #134	; 0x86
 8008126:	f001 fa64 	bl	80095f2 <lcd_symbol_rect_filled>
	}

	return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	bd80      	pop	{r7, pc}
 8008130:	08013f24 	.word	0x08013f24

08008134 <lcd_body_settings_pause_draw>:

uint8_t lcd_body_settings_pause_draw(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	settings_draw_basic();
 8008138:	f7ff ff78 	bl	800802c <settings_draw_basic>
	settings_pause_draw_inv();
 800813c:	f7ff fef8 	bl	8007f30 <settings_pause_draw_inv>

	return 0;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	bd80      	pop	{r7, pc}

08008146 <lcd_body_settings_pause_update>:

uint8_t lcd_body_settings_pause_update(void)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	af00      	add	r7, sp, #0
	return settings_pause_button_draw();
 800814a:	f7ff ffc9 	bl	80080e0 <settings_pause_button_draw>
 800814e:	4603      	mov	r3, r0
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}

08008154 <lcd_body_settings_stop_trigger_ok>:

// SETTINGS STOP
uint8_t lcd_body_settings_stop_trigger_ok(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
	measure_set_mode_stop();
 8008158:	f007 ff64 	bl	8010024 <measure_set_mode_stop>

	return 0;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <settings_stop_button_draw>:

static uint8_t settings_stop_button_draw(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
	if(!measure_get_mode_stop())
 8008168:	f007 ff6e 	bl	8010048 <measure_get_mode_stop>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d111      	bne.n	8008196 <settings_stop_button_draw+0x32>
	{
		lcd_symbol_rect_filled(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 8008172:	230b      	movs	r3, #11
 8008174:	220f      	movs	r2, #15
 8008176:	2114      	movs	r1, #20
 8008178:	2078      	movs	r0, #120	; 0x78
 800817a:	f001 fa3a 	bl	80095f2 <lcd_symbol_rect_filled>
		lcd_symbol_rect(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 800817e:	230b      	movs	r3, #11
 8008180:	220f      	movs	r2, #15
 8008182:	2114      	movs	r1, #20
 8008184:	2086      	movs	r0, #134	; 0x86
 8008186:	f001 f9df 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(SETT_START_RIGHT_START_X + LINE_WIDTH, SETT_START_RIGHT_START_Y + LINE_WIDTH + SPACE, "ST");
 800818a:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <settings_stop_button_draw+0x50>)
 800818c:	2116      	movs	r1, #22
 800818e:	2087      	movs	r0, #135	; 0x87
 8008190:	f001 fbcb 	bl	800992a <lcd_symbol_string>
 8008194:	e00b      	b.n	80081ae <settings_stop_button_draw+0x4a>
	}
	else
	{
		lcd_symbol_rect(SETT_START_LEFT_START_X, SETT_START_LEFT_START_Y, SETT_START_LEFT_LENGTH_X, SETT_START_LEFT_LENGTH_Y);
 8008196:	230b      	movs	r3, #11
 8008198:	220f      	movs	r2, #15
 800819a:	2114      	movs	r1, #20
 800819c:	2078      	movs	r0, #120	; 0x78
 800819e:	f001 f9d3 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_rect_filled(SETT_START_RIGHT_START_X, SETT_START_RIGHT_START_Y, SETT_START_RIGHT_LENGTH_X, SETT_START_RIGHT_LENGTH_Y);
 80081a2:	230b      	movs	r3, #11
 80081a4:	220f      	movs	r2, #15
 80081a6:	2114      	movs	r1, #20
 80081a8:	2086      	movs	r0, #134	; 0x86
 80081aa:	f001 fa22 	bl	80095f2 <lcd_symbol_rect_filled>
	}

	return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	08013f28 	.word	0x08013f28

080081b8 <lcd_body_settings_stop_draw>:

uint8_t lcd_body_settings_stop_draw(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
	settings_draw_basic();
 80081bc:	f7ff ff36 	bl	800802c <settings_draw_basic>
	settings_stop_draw_inv();
 80081c0:	f7ff feda 	bl	8007f78 <settings_stop_draw_inv>

	return 0;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	bd80      	pop	{r7, pc}

080081ca <lcd_body_settings_stop_update>:

uint8_t lcd_body_settings_stop_update(void)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	af00      	add	r7, sp, #0
	return settings_stop_button_draw();
 80081ce:	f7ff ffc9 	bl	8008164 <settings_stop_button_draw>
 80081d2:	4603      	mov	r3, r0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <settings_period_button>:

static uint8_t settings_period_button(uint8_t _index)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
	// TODO testen!
	if(_index != measure_period_get_current_mode())
 80081e2:	f007 ff63 	bl	80100ac <measure_period_get_current_mode>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d010      	beq.n	8008212 <settings_period_button+0x3a>
	{
		lcd_symbol_rect(SETT_PERIOD_BUTTON_START_X, SETT_PERIOD_BUTTON_START_Y, SETT_PERIOD_BUTTON_LENGTH_X, SETT_PERIOD_BUTTON_LENGTH_Y);
 80081f0:	230b      	movs	r3, #11
 80081f2:	222d      	movs	r2, #45	; 0x2d
 80081f4:	2138      	movs	r1, #56	; 0x38
 80081f6:	2078      	movs	r0, #120	; 0x78
 80081f8:	f001 f9a6 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(SETT_PERIOD_BUTTON_START_X + LINE_WIDTH, SETT_PERIOD_BUTTON_START_Y + LINE_WIDTH + SPACE, measure_period_get_text(_index));
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	4618      	mov	r0, r3
 8008200:	f007 ff88 	bl	8010114 <measure_period_get_text>
 8008204:	4603      	mov	r3, r0
 8008206:	461a      	mov	r2, r3
 8008208:	213a      	movs	r1, #58	; 0x3a
 800820a:	2079      	movs	r0, #121	; 0x79
 800820c:	f001 fb8d 	bl	800992a <lcd_symbol_string>
 8008210:	e00f      	b.n	8008232 <settings_period_button+0x5a>
	}
	else
	{
		lcd_symbol_rect_filled(SETT_PERIOD_BUTTON_START_X, SETT_PERIOD_BUTTON_START_Y, SETT_PERIOD_BUTTON_LENGTH_X, SETT_PERIOD_BUTTON_LENGTH_Y);
 8008212:	230b      	movs	r3, #11
 8008214:	222d      	movs	r2, #45	; 0x2d
 8008216:	2138      	movs	r1, #56	; 0x38
 8008218:	2078      	movs	r0, #120	; 0x78
 800821a:	f001 f9ea 	bl	80095f2 <lcd_symbol_rect_filled>
		lcd_symbol_string_inv(SETT_PERIOD_BUTTON_START_X + LINE_WIDTH, SETT_PERIOD_BUTTON_START_Y + LINE_WIDTH + SPACE, measure_period_get_text(_index));
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	4618      	mov	r0, r3
 8008222:	f007 ff77 	bl	8010114 <measure_period_get_text>
 8008226:	4603      	mov	r3, r0
 8008228:	461a      	mov	r2, r3
 800822a:	213a      	movs	r1, #58	; 0x3a
 800822c:	2079      	movs	r0, #121	; 0x79
 800822e:	f001 fb9a 	bl	8009966 <lcd_symbol_string_inv>
	}

	return 0;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <settings_period_button_draw>:

static uint8_t settings_period_button_draw(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
	lcd_period_mode_index = measure_period_get_current_mode();
 8008240:	f007 ff34 	bl	80100ac <measure_period_get_current_mode>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	4b02      	ldr	r3, [pc, #8]	; (8008254 <settings_period_button_draw+0x18>)
 800824a:	701a      	strb	r2, [r3, #0]

	return 0;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20001234 	.word	0x20001234

08008258 <lcd_body_settings_period_trigger_left>:

uint8_t lcd_body_settings_period_trigger_left(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
	lcd_period_mode_index = measure_period_get_previous_mode(lcd_period_mode_index);
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <lcd_body_settings_period_trigger_left+0x1c>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f007 ff2f 	bl	80100c4 <measure_period_get_previous_mode>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	4b02      	ldr	r3, [pc, #8]	; (8008274 <lcd_body_settings_period_trigger_left+0x1c>)
 800826c:	701a      	strb	r2, [r3, #0]

	return 0;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20001234 	.word	0x20001234

08008278 <lcd_body_settings_period_trigger_right>:

uint8_t lcd_body_settings_period_trigger_right(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
	lcd_period_mode_index = measure_period_get_next_mode(lcd_period_mode_index);
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <lcd_body_settings_period_trigger_right+0x1c>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f007 ff33 	bl	80100ec <measure_period_get_next_mode>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	4b02      	ldr	r3, [pc, #8]	; (8008294 <lcd_body_settings_period_trigger_right+0x1c>)
 800828c:	701a      	strb	r2, [r3, #0]

	return 0;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20001234 	.word	0x20001234

08008298 <lcd_body_settings_period_trigger_ok>:

uint8_t lcd_body_settings_period_trigger_ok(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
	measure_period_set_mode(lcd_period_mode_index);
 800829c:	4b03      	ldr	r3, [pc, #12]	; (80082ac <lcd_body_settings_period_trigger_ok+0x14>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f007 fef3 	bl	801008c <measure_period_set_mode>

	return 0;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20001234 	.word	0x20001234

080082b0 <lcd_body_settings_period_draw>:

uint8_t lcd_body_settings_period_draw(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
	settings_draw_basic();
 80082b4:	f7ff feba 	bl	800802c <settings_draw_basic>
	settings_period_draw_inv();
 80082b8:	f7ff fe82 	bl	8007fc0 <settings_period_draw_inv>

	settings_period_button_draw();
 80082bc:	f7ff ffbe 	bl	800823c <settings_period_button_draw>
	settings_period_button(lcd_period_mode_index);
 80082c0:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <lcd_body_settings_period_draw+0x20>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff ff87 	bl	80081d8 <settings_period_button>

	return 0;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20001234 	.word	0x20001234

080082d4 <lcd_body_settings_period_trigger_draw>:

uint8_t lcd_body_settings_period_trigger_draw(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
	settings_draw_basic();
 80082d8:	f7ff fea8 	bl	800802c <settings_draw_basic>
	settings_period_draw_inv();
 80082dc:	f7ff fe70 	bl	8007fc0 <settings_period_draw_inv>

	settings_period_button(lcd_period_mode_index);
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <lcd_body_settings_period_trigger_draw+0x1c>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff ff77 	bl	80081d8 <settings_period_button>

	return 0;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20001234 	.word	0x20001234

080082f4 <lcd_body_settings_period_update>:

uint8_t lcd_body_settings_period_update(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
	//settings_period_button(lcd_body_show_index);

	return 0;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <lcd_body_settings_flip_trigger_ok>:

// SETTINGS FLIP
uint8_t lcd_body_settings_flip_trigger_ok(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
	if(lcd_display_view_is_original())
 8008308:	f000 f906 	bl	8008518 <lcd_display_view_is_original>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <lcd_body_settings_flip_trigger_ok+0x14>
	{
		lcd_display_view_set_flip();
 8008312:	f000 f8e5 	bl	80084e0 <lcd_display_view_set_flip>
 8008316:	e001      	b.n	800831c <lcd_body_settings_flip_trigger_ok+0x18>
	}
	else
	{
		lcd_display_view_reset_flip();
 8008318:	f000 f8f0 	bl	80084fc <lcd_display_view_reset_flip>
	}

	return 0;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <lcd_body_settings_flip_button_draw>:

static uint8_t lcd_body_settings_flip_button_draw(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
	if(lcd_display_view_is_original())
 8008328:	f000 f8f6 	bl	8008518 <lcd_display_view_is_original>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00c      	beq.n	800834c <lcd_body_settings_flip_button_draw+0x28>
	{
		lcd_symbol_rect(SETT_FLIP_LEFT_START_X, SETT_FLIP_LEFT_START_Y, SETT_FLIP_LEFT_LENGTH_X, SETT_FLIP_LEFT_LENGTH_Y);
 8008332:	230b      	movs	r3, #11
 8008334:	221b      	movs	r2, #27
 8008336:	2144      	movs	r1, #68	; 0x44
 8008338:	2078      	movs	r0, #120	; 0x78
 800833a:	f001 f905 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_rect_filled(SETT_FLIP_RIGHT_START_X, SETT_FLIP_RIGHT_START_Y, SETT_FLIP_RIGHT_LENGTH_X, SETT_FLIP_RIGHT_LENGTH_Y);
 800833e:	230b      	movs	r3, #11
 8008340:	221b      	movs	r2, #27
 8008342:	2144      	movs	r1, #68	; 0x44
 8008344:	2092      	movs	r0, #146	; 0x92
 8008346:	f001 f954 	bl	80095f2 <lcd_symbol_rect_filled>
 800834a:	e010      	b.n	800836e <lcd_body_settings_flip_button_draw+0x4a>
	}
	else
	{
		lcd_symbol_rect_filled(SETT_FLIP_LEFT_START_X, SETT_FLIP_LEFT_START_Y, SETT_FLIP_LEFT_LENGTH_X, SETT_FLIP_LEFT_LENGTH_Y);
 800834c:	230b      	movs	r3, #11
 800834e:	221b      	movs	r2, #27
 8008350:	2144      	movs	r1, #68	; 0x44
 8008352:	2078      	movs	r0, #120	; 0x78
 8008354:	f001 f94d 	bl	80095f2 <lcd_symbol_rect_filled>
		lcd_symbol_rect(SETT_FLIP_RIGHT_START_X, SETT_FLIP_RIGHT_START_Y, SETT_FLIP_RIGHT_LENGTH_X, SETT_FLIP_RIGHT_LENGTH_Y);
 8008358:	230b      	movs	r3, #11
 800835a:	221b      	movs	r2, #27
 800835c:	2144      	movs	r1, #68	; 0x44
 800835e:	2092      	movs	r0, #146	; 0x92
 8008360:	f001 f8f2 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(SETT_FLIP_RIGHT_START_X + LINE_WIDTH, SETT_FLIP_RIGHT_START_Y + LINE_WIDTH + SPACE, "FLIP");
 8008364:	4a03      	ldr	r2, [pc, #12]	; (8008374 <lcd_body_settings_flip_button_draw+0x50>)
 8008366:	2146      	movs	r1, #70	; 0x46
 8008368:	2093      	movs	r0, #147	; 0x93
 800836a:	f001 fade 	bl	800992a <lcd_symbol_string>
	}
	return 0;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	bd80      	pop	{r7, pc}
 8008374:	08013f2c 	.word	0x08013f2c

08008378 <lcd_body_settings_flip_draw>:

uint8_t lcd_body_settings_flip_draw(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
	settings_draw_basic();
 800837c:	f7ff fe56 	bl	800802c <settings_draw_basic>
	settings_flip_draw_inv();
 8008380:	f7ff fe42 	bl	8008008 <settings_flip_draw_inv>

	lcd_body_settings_flip_button_draw();
 8008384:	f7ff ffce 	bl	8008324 <lcd_body_settings_flip_button_draw>

	return 0;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	bd80      	pop	{r7, pc}

0800838e <lcd_body_settings_flip_update>:


uint8_t lcd_body_settings_flip_update(void)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	af00      	add	r7, sp, #0
	lcd_body_settings_flip_button_draw();
 8008392:	f7ff ffc7 	bl	8008324 <lcd_body_settings_flip_button_draw>

	return 0;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}

0800839c <lcd_body_value_draw>:
}
*/
//#include <string.h>

uint8_t lcd_body_value_draw(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
	buffer_lcd_get_last_values(lcd_value_buffer);
 80083a2:	4847      	ldr	r0, [pc, #284]	; (80084c0 <lcd_body_value_draw+0x124>)
 80083a4:	f007 f8c2 	bl	800f52c <buffer_lcd_get_last_values>

	for(uint8_t i = 0; i < 4; i++)
 80083a8:	2300      	movs	r3, #0
 80083aa:	75fb      	strb	r3, [r7, #23]
 80083ac:	e07e      	b.n	80084ac <lcd_body_value_draw+0x110>
	{
		char tmp[10] = {0};
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	809a      	strh	r2, [r3, #4]

		uint16_t offset = i * (VALUE_INFO_LENGTH_Y + VALUE_BOX_SPACE);
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	0052      	lsls	r2, r2, #1
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	82bb      	strh	r3, [r7, #20]
		lcd_symbol_string(VALUE_COL1_TEXT_START_X, VALUE_COL1_TEXT_START_Y + offset, value_string[i]);
 80083ca:	8abb      	ldrh	r3, [r7, #20]
 80083cc:	3316      	adds	r3, #22
 80083ce:	b299      	uxth	r1, r3
 80083d0:	7dfa      	ldrb	r2, [r7, #23]
 80083d2:	4613      	mov	r3, r2
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	4a39      	ldr	r2, [pc, #228]	; (80084c4 <lcd_body_value_draw+0x128>)
 80083de:	4413      	add	r3, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	2001      	movs	r0, #1
 80083e4:	f001 faa1 	bl	800992a <lcd_symbol_string>

		float value = 0;
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	613b      	str	r3, [r7, #16]

		switch (i)
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d83f      	bhi.n	8008474 <lcd_body_value_draw+0xd8>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <lcd_body_value_draw+0x60>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	0800842f 	.word	0x0800842f
 8008404:	08008441 	.word	0x08008441
 8008408:	08008463 	.word	0x08008463
		{
			case 0:
				value = calc_temp(lcd_value_buffer[0].buffer[0]);
 800840c:	4b2c      	ldr	r3, [pc, #176]	; (80084c0 <lcd_body_value_draw+0x124>)
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f007 fb45 	bl	800faa0 <calc_temp>
 8008416:	ed87 0a04 	vstr	s0, [r7, #16]
				sprintf(tmp, "%.2f°C", value);
 800841a:	6938      	ldr	r0, [r7, #16]
 800841c:	f7f8 f894 	bl	8000548 <__aeabi_f2d>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	1d38      	adds	r0, r7, #4
 8008426:	4928      	ldr	r1, [pc, #160]	; (80084c8 <lcd_body_value_draw+0x12c>)
 8008428:	f009 fbb8 	bl	8011b9c <siprintf>
				break;
 800842c:	e023      	b.n	8008476 <lcd_body_value_draw+0xda>
			case 1:
				sprintf(tmp, "%u", lcd_value_buffer[0].buffer[0]);
 800842e:	4b24      	ldr	r3, [pc, #144]	; (80084c0 <lcd_body_value_draw+0x124>)
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	4925      	ldr	r1, [pc, #148]	; (80084cc <lcd_body_value_draw+0x130>)
 8008438:	4618      	mov	r0, r3
 800843a:	f009 fbaf 	bl	8011b9c <siprintf>
				break;
 800843e:	e01a      	b.n	8008476 <lcd_body_value_draw+0xda>
			case 2:
				value = calc_room_temp(lcd_value_buffer[0].buffer[12]);
 8008440:	4b1f      	ldr	r3, [pc, #124]	; (80084c0 <lcd_body_value_draw+0x124>)
 8008442:	8b1b      	ldrh	r3, [r3, #24]
 8008444:	4618      	mov	r0, r3
 8008446:	f007 fb53 	bl	800faf0 <calc_room_temp>
 800844a:	ed87 0a04 	vstr	s0, [r7, #16]
				sprintf(tmp, "%.2f°C", value);
 800844e:	6938      	ldr	r0, [r7, #16]
 8008450:	f7f8 f87a 	bl	8000548 <__aeabi_f2d>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	1d38      	adds	r0, r7, #4
 800845a:	491b      	ldr	r1, [pc, #108]	; (80084c8 <lcd_body_value_draw+0x12c>)
 800845c:	f009 fb9e 	bl	8011b9c <siprintf>
				break;
 8008460:	e009      	b.n	8008476 <lcd_body_value_draw+0xda>
			case 3:
				sprintf(tmp, "%u", lcd_value_buffer[0].buffer[12]);
 8008462:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <lcd_body_value_draw+0x124>)
 8008464:	8b1b      	ldrh	r3, [r3, #24]
 8008466:	461a      	mov	r2, r3
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	4918      	ldr	r1, [pc, #96]	; (80084cc <lcd_body_value_draw+0x130>)
 800846c:	4618      	mov	r0, r3
 800846e:	f009 fb95 	bl	8011b9c <siprintf>
				break;
 8008472:	e000      	b.n	8008476 <lcd_body_value_draw+0xda>
			default:
				break;
 8008474:	bf00      	nop
		}

		lcd_matrix_reset(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 8008476:	8abb      	ldrh	r3, [r7, #20]
 8008478:	3314      	adds	r3, #20
 800847a:	b299      	uxth	r1, r3
 800847c:	230b      	movs	r3, #11
 800847e:	2239      	movs	r2, #57	; 0x39
 8008480:	2028      	movs	r0, #40	; 0x28
 8008482:	f000 fdb7 	bl	8008ff4 <lcd_matrix_reset>
		lcd_symbol_rect(VALUE_COL1_RECT_START_X, VALUE_COL1_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
 8008486:	8abb      	ldrh	r3, [r7, #20]
 8008488:	3314      	adds	r3, #20
 800848a:	b299      	uxth	r1, r3
 800848c:	230b      	movs	r3, #11
 800848e:	2239      	movs	r2, #57	; 0x39
 8008490:	2028      	movs	r0, #40	; 0x28
 8008492:	f001 f859 	bl	8009548 <lcd_symbol_rect>
		lcd_symbol_string(VALUE_COL1_NUMBER_START_X, VALUE_COL1_NUMBER_START_Y + offset, tmp);
 8008496:	8abb      	ldrh	r3, [r7, #20]
 8008498:	3316      	adds	r3, #22
 800849a:	b29b      	uxth	r3, r3
 800849c:	1d3a      	adds	r2, r7, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	2029      	movs	r0, #41	; 0x29
 80084a2:	f001 fa42 	bl	800992a <lcd_symbol_string>
	for(uint8_t i = 0; i < 4; i++)
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	3301      	adds	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	f67f af7d 	bls.w	80083ae <lcd_body_value_draw+0x12>
		lcd_symbol_rect(VALUE_COL2_RECT_START_X, VALUE_COL2_RECT_START_Y + offset, VALUE_RECT_LENGTH_X, VALUE_RECT_LENGTH_Y);
		lcd_symbol_string(VALUE_COL2_NUMBER_START_X, VALUE_COL2_NUMBER_START_Y + offset, tmp);
	}
	*/

	return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20001238 	.word	0x20001238
 80084c4:	200000cc 	.word	0x200000cc
 80084c8:	08013f34 	.word	0x08013f34
 80084cc:	08013f3c 	.word	0x08013f3c

080084d0 <lcd_body_value_update>:

uint8_t lcd_body_value_update(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
	lcd_body_value_draw();
 80084d4:	f7ff ff62 	bl	800839c <lcd_body_value_draw>

	return 0;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <lcd_display_view_set_flip>:

uint8_t flip_mode = LCD_DISPLAY_FLIP;		// TODO change to original MODE.


uint8_t lcd_display_view_set_flip(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
	flip_mode = LCD_DISPLAY_FLIP;
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <lcd_display_view_set_flip+0x18>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]

	return 0;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000175 	.word	0x20000175

080084fc <lcd_display_view_reset_flip>:

uint8_t lcd_display_view_reset_flip(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
	flip_mode = LCD_DISPLAY_ORIGINAL;
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <lcd_display_view_reset_flip+0x18>)
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]

	return 0;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000175 	.word	0x20000175

08008518 <lcd_display_view_is_original>:

uint8_t lcd_display_view_is_original(void)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
	uint8_t tmp = 1;
 800851e:	2301      	movs	r3, #1
 8008520:	71fb      	strb	r3, [r7, #7]

	if(flip_mode != LCD_DISPLAY_ORIGINAL)
 8008522:	4b06      	ldr	r3, [pc, #24]	; (800853c <lcd_display_view_is_original+0x24>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <lcd_display_view_is_original+0x16>
	{
		tmp = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	71fb      	strb	r3, [r7, #7]
	}

	return tmp;
 800852e:	79fb      	ldrb	r3, [r7, #7]
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000175 	.word	0x20000175

08008540 <lcd_display_view_get_x>:

uint16_t lcd_display_view_get_x(uint16_t x)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	80fb      	strh	r3, [r7, #6]
	if(flip_mode == LCD_DISPLAY_FLIP)
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <lcd_display_view_get_x+0x28>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d103      	bne.n	800855a <lcd_display_view_get_x+0x1a>
	{
		x = VALUE_X - x;
 8008552:	88fb      	ldrh	r3, [r7, #6]
 8008554:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8008558:	80fb      	strh	r3, [r7, #6]
	}

	return x;
 800855a:	88fb      	ldrh	r3, [r7, #6]
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20000175 	.word	0x20000175

0800856c <lcd_display_view_get_y>:

uint16_t lcd_display_view_get_y(uint16_t y)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	80fb      	strh	r3, [r7, #6]
	if(flip_mode == LCD_DISPLAY_FLIP)
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <lcd_display_view_get_y+0x28>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d103      	bne.n	8008586 <lcd_display_view_get_y+0x1a>
	{
		y = VALUE_Y - y;
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8008584:	80fb      	strh	r3, [r7, #6]
	}

	return y;
 8008586:	88fb      	ldrh	r3, [r7, #6]
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20000175 	.word	0x20000175

08008598 <lcd_status_read>:
//	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_RESET);
//}


uint8_t lcd_status_read(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
//
//	__asm("NOP");
//
//	GPIO_output_config();

	return 0x23;
 800859c:	2323      	movs	r3, #35	; 0x23
}
 800859e:	4618      	mov	r0, r3
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <lcd_data_write>:

uint8_t lcd_data_write(uint8_t data)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
	if((lcd_status_read() & 0x23) != 0x23)
 80085b2:	f7ff fff1 	bl	8008598 <lcd_status_read>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f003 0323 	and.w	r3, r3, #35	; 0x23
 80085bc:	2b23      	cmp	r3, #35	; 0x23
 80085be:	d001      	beq.n	80085c4 <lcd_data_write+0x1c>
	{
		return 1;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0b2      	b.n	800872a <lcd_data_write+0x182>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085c4:	b672      	cpsid	i
}
 80085c6:	bf00      	nop
	}

	__disable_irq();

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, data & (1 << 0));
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	2120      	movs	r1, #32
 80085d4:	4857      	ldr	r0, [pc, #348]	; (8008734 <lcd_data_write+0x18c>)
 80085d6:	f7fa fec5 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, data & (1 << 1));
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	2140      	movs	r1, #64	; 0x40
 80085e6:	4853      	ldr	r0, [pc, #332]	; (8008734 <lcd_data_write+0x18c>)
 80085e8:	f7fa febc 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, data & (1 << 2));
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	2110      	movs	r1, #16
 80085f8:	484e      	ldr	r0, [pc, #312]	; (8008734 <lcd_data_write+0x18c>)
 80085fa:	f7fa feb3 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, data & (1 << 3));
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	b2db      	uxtb	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	2104      	movs	r1, #4
 800860a:	484a      	ldr	r0, [pc, #296]	; (8008734 <lcd_data_write+0x18c>)
 800860c:	f7fa feaa 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, data & (1 << 4));
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	2180      	movs	r1, #128	; 0x80
 800861c:	4846      	ldr	r0, [pc, #280]	; (8008738 <lcd_data_write+0x190>)
 800861e:	f7fa fea1 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, data & (1 << 5));
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	b2db      	uxtb	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	2120      	movs	r1, #32
 800862e:	4842      	ldr	r0, [pc, #264]	; (8008738 <lcd_data_write+0x190>)
 8008630:	f7fa fe98 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, data & (1 << 6));
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	b2db      	uxtb	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	2140      	movs	r1, #64	; 0x40
 8008640:	483e      	ldr	r0, [pc, #248]	; (800873c <lcd_data_write+0x194>)
 8008642:	f7fa fe8f 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, data & (1 << 7));
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	2104      	movs	r1, #4
 8008652:	483a      	ldr	r0, [pc, #232]	; (800873c <lcd_data_write+0x194>)
 8008654:	f7fa fe86 	bl	8003364 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GLCD_CD_GPIO_Port, GLCD_CD_Pin, GPIO_PIN_RESET);
 8008658:	2200      	movs	r2, #0
 800865a:	2180      	movs	r1, #128	; 0x80
 800865c:	4837      	ldr	r0, [pc, #220]	; (800873c <lcd_data_write+0x194>)
 800865e:	f7fa fe81 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_WR_GPIO_Port, GLCD_WR_Pin, GPIO_PIN_RESET);
 8008662:	2200      	movs	r2, #0
 8008664:	2101      	movs	r1, #1
 8008666:	4833      	ldr	r0, [pc, #204]	; (8008734 <lcd_data_write+0x18c>)
 8008668:	f7fa fe7c 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_RD_GPIO_Port, GLCD_RD_Pin, GPIO_PIN_SET);
 800866c:	2201      	movs	r2, #1
 800866e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008672:	4831      	ldr	r0, [pc, #196]	; (8008738 <lcd_data_write+0x190>)
 8008674:	f7fa fe76 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_CE_GPIO_Port, GLCD_CE_Pin, GPIO_PIN_RESET);
 8008678:	2200      	movs	r2, #0
 800867a:	2110      	movs	r1, #16
 800867c:	482e      	ldr	r0, [pc, #184]	; (8008738 <lcd_data_write+0x190>)
 800867e:	f7fa fe71 	bl	8003364 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < 100; i++)
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
 8008686:	e003      	b.n	8008690 <lcd_data_write+0xe8>
		__asm("NOP");
 8008688:	bf00      	nop
	for(uint8_t i = 0; i < 100; i++)
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	3301      	adds	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b63      	cmp	r3, #99	; 0x63
 8008694:	d9f8      	bls.n	8008688 <lcd_data_write+0xe0>

	HAL_GPIO_WritePin(GLCD_CE_GPIO_Port, GLCD_CE_Pin, GPIO_PIN_SET);
 8008696:	2201      	movs	r2, #1
 8008698:	2110      	movs	r1, #16
 800869a:	4827      	ldr	r0, [pc, #156]	; (8008738 <lcd_data_write+0x190>)
 800869c:	f7fa fe62 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_WR_GPIO_Port, GLCD_WR_Pin, GPIO_PIN_SET);
 80086a0:	2201      	movs	r2, #1
 80086a2:	2101      	movs	r1, #1
 80086a4:	4823      	ldr	r0, [pc, #140]	; (8008734 <lcd_data_write+0x18c>)
 80086a6:	f7fa fe5d 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_RD_GPIO_Port, GLCD_RD_Pin, GPIO_PIN_SET);
 80086aa:	2201      	movs	r2, #1
 80086ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086b0:	4821      	ldr	r0, [pc, #132]	; (8008738 <lcd_data_write+0x190>)
 80086b2:	f7fa fe57 	bl	8003364 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < 100; i++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	73bb      	strb	r3, [r7, #14]
 80086ba:	e003      	b.n	80086c4 <lcd_data_write+0x11c>
		__asm("NOP");
 80086bc:	bf00      	nop
	for(uint8_t i = 0; i < 100; i++)
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	3301      	adds	r3, #1
 80086c2:	73bb      	strb	r3, [r7, #14]
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b63      	cmp	r3, #99	; 0x63
 80086c8:	d9f8      	bls.n	80086bc <lcd_data_write+0x114>

	HAL_GPIO_WritePin(GLCD_CD_GPIO_Port, GLCD_CD_Pin, GPIO_PIN_SET);
 80086ca:	2201      	movs	r2, #1
 80086cc:	2180      	movs	r1, #128	; 0x80
 80086ce:	481b      	ldr	r0, [pc, #108]	; (800873c <lcd_data_write+0x194>)
 80086d0:	f7fa fe48 	bl	8003364 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80086d4:	2200      	movs	r2, #0
 80086d6:	2120      	movs	r1, #32
 80086d8:	4816      	ldr	r0, [pc, #88]	; (8008734 <lcd_data_write+0x18c>)
 80086da:	f7fa fe43 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80086de:	2200      	movs	r2, #0
 80086e0:	2140      	movs	r1, #64	; 0x40
 80086e2:	4814      	ldr	r0, [pc, #80]	; (8008734 <lcd_data_write+0x18c>)
 80086e4:	f7fa fe3e 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80086e8:	2200      	movs	r2, #0
 80086ea:	2110      	movs	r1, #16
 80086ec:	4811      	ldr	r0, [pc, #68]	; (8008734 <lcd_data_write+0x18c>)
 80086ee:	f7fa fe39 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	2104      	movs	r1, #4
 80086f6:	480f      	ldr	r0, [pc, #60]	; (8008734 <lcd_data_write+0x18c>)
 80086f8:	f7fa fe34 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, GPIO_PIN_RESET);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2180      	movs	r1, #128	; 0x80
 8008700:	480d      	ldr	r0, [pc, #52]	; (8008738 <lcd_data_write+0x190>)
 8008702:	f7fa fe2f 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_RESET);
 8008706:	2200      	movs	r2, #0
 8008708:	2120      	movs	r1, #32
 800870a:	480b      	ldr	r0, [pc, #44]	; (8008738 <lcd_data_write+0x190>)
 800870c:	f7fa fe2a 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_RESET);
 8008710:	2200      	movs	r2, #0
 8008712:	2140      	movs	r1, #64	; 0x40
 8008714:	4809      	ldr	r0, [pc, #36]	; (800873c <lcd_data_write+0x194>)
 8008716:	f7fa fe25 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_RESET);
 800871a:	2200      	movs	r2, #0
 800871c:	2104      	movs	r1, #4
 800871e:	4807      	ldr	r0, [pc, #28]	; (800873c <lcd_data_write+0x194>)
 8008720:	f7fa fe20 	bl	8003364 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8008724:	b662      	cpsie	i
}
 8008726:	bf00      	nop

	__enable_irq();

	return 0;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40021000 	.word	0x40021000
 8008738:	40020400 	.word	0x40020400
 800873c:	40020c00 	.word	0x40020c00

08008740 <lcd_cmd_write>:

uint8_t lcd_cmd_write(uint8_t data)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	71fb      	strb	r3, [r7, #7]
	if((lcd_status_read() & 0x23) != 0x23)
 800874a:	f7ff ff25 	bl	8008598 <lcd_status_read>
 800874e:	4603      	mov	r3, r0
 8008750:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8008754:	2b23      	cmp	r3, #35	; 0x23
 8008756:	d001      	beq.n	800875c <lcd_cmd_write+0x1c>
	{
		return 1;
 8008758:	2301      	movs	r3, #1
 800875a:	e0b2      	b.n	80088c2 <lcd_cmd_write+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 800875c:	b672      	cpsid	i
}
 800875e:	bf00      	nop
	}

	__disable_irq();

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, data & (1 << 0));
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	b2db      	uxtb	r3, r3
 8008768:	461a      	mov	r2, r3
 800876a:	2120      	movs	r1, #32
 800876c:	4857      	ldr	r0, [pc, #348]	; (80088cc <lcd_cmd_write+0x18c>)
 800876e:	f7fa fdf9 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, data & (1 << 1));
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	4853      	ldr	r0, [pc, #332]	; (80088cc <lcd_cmd_write+0x18c>)
 8008780:	f7fa fdf0 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, data & (1 << 2));
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	b2db      	uxtb	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	2110      	movs	r1, #16
 8008790:	484e      	ldr	r0, [pc, #312]	; (80088cc <lcd_cmd_write+0x18c>)
 8008792:	f7fa fde7 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, data & (1 << 3));
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	b2db      	uxtb	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	2104      	movs	r1, #4
 80087a2:	484a      	ldr	r0, [pc, #296]	; (80088cc <lcd_cmd_write+0x18c>)
 80087a4:	f7fa fdde 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, data & (1 << 4));
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	4846      	ldr	r0, [pc, #280]	; (80088d0 <lcd_cmd_write+0x190>)
 80087b6:	f7fa fdd5 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, data & (1 << 5));
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	2120      	movs	r1, #32
 80087c6:	4842      	ldr	r0, [pc, #264]	; (80088d0 <lcd_cmd_write+0x190>)
 80087c8:	f7fa fdcc 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, data & (1 << 6));
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	2140      	movs	r1, #64	; 0x40
 80087d8:	483e      	ldr	r0, [pc, #248]	; (80088d4 <lcd_cmd_write+0x194>)
 80087da:	f7fa fdc3 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, data & (1 << 7));
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	2104      	movs	r1, #4
 80087ea:	483a      	ldr	r0, [pc, #232]	; (80088d4 <lcd_cmd_write+0x194>)
 80087ec:	f7fa fdba 	bl	8003364 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GLCD_CD_GPIO_Port, GLCD_CD_Pin, GPIO_PIN_SET);
 80087f0:	2201      	movs	r2, #1
 80087f2:	2180      	movs	r1, #128	; 0x80
 80087f4:	4837      	ldr	r0, [pc, #220]	; (80088d4 <lcd_cmd_write+0x194>)
 80087f6:	f7fa fdb5 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_WR_GPIO_Port, GLCD_WR_Pin, GPIO_PIN_RESET);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2101      	movs	r1, #1
 80087fe:	4833      	ldr	r0, [pc, #204]	; (80088cc <lcd_cmd_write+0x18c>)
 8008800:	f7fa fdb0 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_RD_GPIO_Port, GLCD_RD_Pin, GPIO_PIN_SET);
 8008804:	2201      	movs	r2, #1
 8008806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800880a:	4831      	ldr	r0, [pc, #196]	; (80088d0 <lcd_cmd_write+0x190>)
 800880c:	f7fa fdaa 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_CE_GPIO_Port, GLCD_CE_Pin, GPIO_PIN_RESET);
 8008810:	2200      	movs	r2, #0
 8008812:	2110      	movs	r1, #16
 8008814:	482e      	ldr	r0, [pc, #184]	; (80088d0 <lcd_cmd_write+0x190>)
 8008816:	f7fa fda5 	bl	8003364 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < 100; i++)
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
 800881e:	e003      	b.n	8008828 <lcd_cmd_write+0xe8>
		__asm("NOP");
 8008820:	bf00      	nop
	for(uint8_t i = 0; i < 100; i++)
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	3301      	adds	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b63      	cmp	r3, #99	; 0x63
 800882c:	d9f8      	bls.n	8008820 <lcd_cmd_write+0xe0>

	HAL_GPIO_WritePin(GLCD_CE_GPIO_Port, GLCD_CE_Pin, GPIO_PIN_SET);
 800882e:	2201      	movs	r2, #1
 8008830:	2110      	movs	r1, #16
 8008832:	4827      	ldr	r0, [pc, #156]	; (80088d0 <lcd_cmd_write+0x190>)
 8008834:	f7fa fd96 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_WR_GPIO_Port, GLCD_WR_Pin, GPIO_PIN_SET);
 8008838:	2201      	movs	r2, #1
 800883a:	2101      	movs	r1, #1
 800883c:	4823      	ldr	r0, [pc, #140]	; (80088cc <lcd_cmd_write+0x18c>)
 800883e:	f7fa fd91 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCD_RD_GPIO_Port, GLCD_RD_Pin, GPIO_PIN_SET);
 8008842:	2201      	movs	r2, #1
 8008844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008848:	4821      	ldr	r0, [pc, #132]	; (80088d0 <lcd_cmd_write+0x190>)
 800884a:	f7fa fd8b 	bl	8003364 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < 100; i++)
 800884e:	2300      	movs	r3, #0
 8008850:	73bb      	strb	r3, [r7, #14]
 8008852:	e003      	b.n	800885c <lcd_cmd_write+0x11c>
		__asm("NOP");
 8008854:	bf00      	nop
	for(uint8_t i = 0; i < 100; i++)
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	3301      	adds	r3, #1
 800885a:	73bb      	strb	r3, [r7, #14]
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b63      	cmp	r3, #99	; 0x63
 8008860:	d9f8      	bls.n	8008854 <lcd_cmd_write+0x114>

	HAL_GPIO_WritePin(GLCD_CD_GPIO_Port, GLCD_CD_Pin, GPIO_PIN_SET);
 8008862:	2201      	movs	r2, #1
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	481b      	ldr	r0, [pc, #108]	; (80088d4 <lcd_cmd_write+0x194>)
 8008868:	f7fa fd7c 	bl	8003364 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800886c:	2200      	movs	r2, #0
 800886e:	2120      	movs	r1, #32
 8008870:	4816      	ldr	r0, [pc, #88]	; (80088cc <lcd_cmd_write+0x18c>)
 8008872:	f7fa fd77 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8008876:	2200      	movs	r2, #0
 8008878:	2140      	movs	r1, #64	; 0x40
 800887a:	4814      	ldr	r0, [pc, #80]	; (80088cc <lcd_cmd_write+0x18c>)
 800887c:	f7fa fd72 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8008880:	2200      	movs	r2, #0
 8008882:	2110      	movs	r1, #16
 8008884:	4811      	ldr	r0, [pc, #68]	; (80088cc <lcd_cmd_write+0x18c>)
 8008886:	f7fa fd6d 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 800888a:	2200      	movs	r2, #0
 800888c:	2104      	movs	r1, #4
 800888e:	480f      	ldr	r0, [pc, #60]	; (80088cc <lcd_cmd_write+0x18c>)
 8008890:	f7fa fd68 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, GPIO_PIN_RESET);
 8008894:	2200      	movs	r2, #0
 8008896:	2180      	movs	r1, #128	; 0x80
 8008898:	480d      	ldr	r0, [pc, #52]	; (80088d0 <lcd_cmd_write+0x190>)
 800889a:	f7fa fd63 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, GPIO_PIN_RESET);
 800889e:	2200      	movs	r2, #0
 80088a0:	2120      	movs	r1, #32
 80088a2:	480b      	ldr	r0, [pc, #44]	; (80088d0 <lcd_cmd_write+0x190>)
 80088a4:	f7fa fd5e 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, GPIO_PIN_RESET);
 80088a8:	2200      	movs	r2, #0
 80088aa:	2140      	movs	r1, #64	; 0x40
 80088ac:	4809      	ldr	r0, [pc, #36]	; (80088d4 <lcd_cmd_write+0x194>)
 80088ae:	f7fa fd59 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_RESET);
 80088b2:	2200      	movs	r2, #0
 80088b4:	2104      	movs	r1, #4
 80088b6:	4807      	ldr	r0, [pc, #28]	; (80088d4 <lcd_cmd_write+0x194>)
 80088b8:	f7fa fd54 	bl	8003364 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80088bc:	b662      	cpsie	i
}
 80088be:	bf00      	nop

	__enable_irq();

	return 0;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40021000 	.word	0x40021000
 80088d0:	40020400 	.word	0x40020400
 80088d4:	40020c00 	.word	0x40020c00

080088d8 <lcd_reset>:


void lcd_reset(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GLCD_RESET_GPIO_Port, GLCD_RESET_Pin, GPIO_PIN_RESET);
 80088dc:	2200      	movs	r2, #0
 80088de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088e2:	480e      	ldr	r0, [pc, #56]	; (800891c <lcd_reset+0x44>)
 80088e4:	f7fa fd3e 	bl	8003364 <HAL_GPIO_WritePin>
	__asm("NOP");__asm("NOP");__asm("NOP");
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
	__asm("NOP");__asm("NOP");__asm("NOP");
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	bf00      	nop
	__asm("NOP");__asm("NOP");__asm("NOP");
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
	__asm("NOP");__asm("NOP");__asm("NOP");
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
	__asm("NOP");__asm("NOP");__asm("NOP");
 8008900:	bf00      	nop
 8008902:	bf00      	nop
 8008904:	bf00      	nop
	__asm("NOP");__asm("NOP");__asm("NOP");
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	bf00      	nop
	HAL_GPIO_WritePin(GLCD_RESET_GPIO_Port, GLCD_RESET_Pin, GPIO_PIN_SET);
 800890c:	2201      	movs	r2, #1
 800890e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008912:	4802      	ldr	r0, [pc, #8]	; (800891c <lcd_reset+0x44>)
 8008914:	f7fa fd26 	bl	8003364 <HAL_GPIO_WritePin>
}
 8008918:	bf00      	nop
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40020800 	.word	0x40020800

08008920 <lcd_set_font>:

void lcd_set_font(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GLCD_FONT_GPIO_Port, GLCD_FONT_Pin, GPIO_PIN_RESET);
 8008924:	2200      	movs	r2, #0
 8008926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800892a:	4802      	ldr	r0, [pc, #8]	; (8008934 <lcd_set_font+0x14>)
 800892c:	f7fa fd1a 	bl	8003364 <HAL_GPIO_WritePin>
}
 8008930:	bf00      	nop
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40020800 	.word	0x40020800

08008938 <set_data_16bit>:
#include "lcd_config.h"
#include "lcd_cmd.h"


static void set_data_16bit(uint8_t cmd, uint16_t data)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	460a      	mov	r2, r1
 8008942:	71fb      	strb	r3, [r7, #7]
 8008944:	4613      	mov	r3, r2
 8008946:	80bb      	strh	r3, [r7, #4]
	lcd_data_write(data & 0xFF);
 8008948:	88bb      	ldrh	r3, [r7, #4]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fe2b 	bl	80085a8 <lcd_data_write>
	lcd_data_write(data >> 8);
 8008952:	88bb      	ldrh	r3, [r7, #4]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	b2db      	uxtb	r3, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fe24 	bl	80085a8 <lcd_data_write>

	lcd_cmd_write(cmd);
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff feec 	bl	8008740 <lcd_cmd_write>
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <set_data_8bit>:

static void set_data_8bit(uint8_t cmd, uint8_t data)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	460a      	mov	r2, r1
 800897a:	71fb      	strb	r3, [r7, #7]
 800897c:	4613      	mov	r3, r2
 800897e:	71bb      	strb	r3, [r7, #6]
	lcd_data_write(data);
 8008980:	79bb      	ldrb	r3, [r7, #6]
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff fe10 	bl	80085a8 <lcd_data_write>

	lcd_cmd_write(cmd);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fed8 	bl	8008740 <lcd_cmd_write>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <set_address_pointer>:

static void set_address_pointer(uint16_t addr)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	80fb      	strh	r3, [r7, #6]
	set_data_16bit(LCD_ADDRESS_POINTER_SET, addr);
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	4619      	mov	r1, r3
 80089a6:	2024      	movs	r0, #36	; 0x24
 80089a8:	f7ff ffc6 	bl	8008938 <set_data_16bit>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <write_data>:

static void write_data(uint8_t data)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	71fb      	strb	r3, [r7, #7]
	set_data_8bit(LCD_DATA_WRITE_AND_INC, data);
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	4619      	mov	r1, r3
 80089c2:	20c0      	movs	r0, #192	; 0xc0
 80089c4:	f7ff ffd4 	bl	8008970 <set_data_8bit>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <clear_text>:

// Clear text area
static void clear_text(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
	set_address_pointer(TEXT_HOME);
 80089d6:	2000      	movs	r0, #0
 80089d8:	f7ff ffde 	bl	8008998 <set_address_pointer>

	for(uint32_t i = 0; i < TEXT_SIZE; i++)
 80089dc:	2300      	movs	r3, #0
 80089de:	607b      	str	r3, [r7, #4]
 80089e0:	e005      	b.n	80089ee <clear_text+0x1e>
	{
		write_data(0);
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7ff ffe6 	bl	80089b4 <write_data>
	for(uint32_t i = 0; i < TEXT_SIZE; i++)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3301      	adds	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80089f4:	d3f5      	bcc.n	80089e2 <clear_text+0x12>
	}
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <clear_cg>:

// Clear character generator area
static void clear_cg(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
	set_address_pointer(EXTERNAL_CG_HOME);
 8008a06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008a0a:	f7ff ffc5 	bl	8008998 <set_address_pointer>

	for(uint32_t i = 0; i < 256 * 8; i++)
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	e005      	b.n	8008a20 <clear_cg+0x20>
	{
		write_data(0);
 8008a14:	2000      	movs	r0, #0
 8008a16:	f7ff ffcd 	bl	80089b4 <write_data>
	for(uint32_t i = 0; i < 256 * 8; i++)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a26:	d3f5      	bcc.n	8008a14 <clear_cg+0x14>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <clear_graphic>:

// Clear graphic area
static void clear_graphic(uint8_t data)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	71fb      	strb	r3, [r7, #7]
	set_address_pointer(GRAPHIC_HOME);
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f7ff ffab 	bl	8008998 <set_address_pointer>

	for(uint32_t i = 0; i < GRAPHIC_SIZE; i++)
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	e006      	b.n	8008a56 <clear_graphic+0x24>
	{
		write_data(data);
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff ffb2 	bl	80089b4 <write_data>
	for(uint32_t i = 0; i < GRAPHIC_SIZE; i++)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a5c:	d3f4      	bcc.n	8008a48 <clear_graphic+0x16>
	}
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <clear_display>:

static void clear_display(uint8_t data)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71fb      	strb	r3, [r7, #7]
	clear_text();
 8008a72:	f7ff ffad 	bl	80089d0 <clear_text>
	clear_cg();
 8008a76:	f7ff ffc3 	bl	8008a00 <clear_cg>
	clear_graphic(data);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ffd8 	bl	8008a32 <clear_graphic>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <lcd_initialize>:


uint8_t lcd_initialize(void)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	af00      	add	r7, sp, #0
	lcd_reset();
 8008a8e:	f7ff ff23 	bl	80088d8 <lcd_reset>
	lcd_set_font();
 8008a92:	f7ff ff45 	bl	8008920 <lcd_set_font>

	while((lcd_status_read() & 0x23) != 0x23);
 8008a96:	bf00      	nop
 8008a98:	f7ff fd7e 	bl	8008598 <lcd_status_read>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8008aa2:	2b23      	cmp	r3, #35	; 0x23
 8008aa4:	d1f8      	bne.n	8008a98 <lcd_initialize+0xe>

	__asm("NOP");__asm("NOP");
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
	__asm("NOP");__asm("NOP");
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
	__asm("NOP");__asm("NOP");
 8008aae:	bf00      	nop
 8008ab0:	bf00      	nop
	__asm("NOP");__asm("NOP");
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop

	set_data_16bit(LCD_GRAPHIC_HOME_ADDR_SET, GRAPHIC_HOME);
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	2042      	movs	r0, #66	; 0x42
 8008aba:	f7ff ff3d 	bl	8008938 <set_data_16bit>
	set_data_16bit(LCD_GRAPHIC_AREA_SET, GRAPHIC_AREA);
 8008abe:	211e      	movs	r1, #30
 8008ac0:	2043      	movs	r0, #67	; 0x43
 8008ac2:	f7ff ff39 	bl	8008938 <set_data_16bit>
	set_data_16bit(LCD_TEXT_HOME_ADDR_SET, TEXT_HOME);
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	2040      	movs	r0, #64	; 0x40
 8008aca:	f7ff ff35 	bl	8008938 <set_data_16bit>
	set_data_16bit(LCD_TEXT_AREA_SET, TEXT_AREA);
 8008ace:	211e      	movs	r1, #30
 8008ad0:	2041      	movs	r0, #65	; 0x41
 8008ad2:	f7ff ff31 	bl	8008938 <set_data_16bit>
	set_data_16bit(LCD_OFFSET_POINTER_SET, OFFSET_REGISTER);
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	2022      	movs	r0, #34	; 0x22
 8008ada:	f7ff ff2d 	bl	8008938 <set_data_16bit>

	set_address_pointer(0);
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f7ff ff5a 	bl	8008998 <set_address_pointer>

	if(lcd_cmd_write(LCD_DISPLAY_MODE | LCD_DISPLAY_TEXT_ON | LCD_DISPLAY_GRAPHIC_ON))
 8008ae4:	209c      	movs	r0, #156	; 0x9c
 8008ae6:	f7ff fe2b 	bl	8008740 <lcd_cmd_write>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <lcd_initialize+0x6a>
	{
		return 7;
 8008af0:	2307      	movs	r3, #7
 8008af2:	e00e      	b.n	8008b12 <lcd_initialize+0x88>
	}

	if(lcd_cmd_write(LCD_MODE_SET | LCD_MODE_OR | LCD_MODE_INTERNAL_CG_ROM))
 8008af4:	2080      	movs	r0, #128	; 0x80
 8008af6:	f7ff fe23 	bl	8008740 <lcd_cmd_write>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <lcd_initialize+0x7a>
	{
		return 8;
 8008b00:	2308      	movs	r3, #8
 8008b02:	e006      	b.n	8008b12 <lcd_initialize+0x88>
	}

	clear_display(0);
 8008b04:	2000      	movs	r0, #0
 8008b06:	f7ff ffaf 	bl	8008a68 <clear_display>

	lcd_cmd_write(LCD_DISPLAY_MODE | LCD_DISPLAY_GRAPHIC_ON);
 8008b0a:	2098      	movs	r0, #152	; 0x98
 8008b0c:	f7ff fe18 	bl	8008740 <lcd_cmd_write>

	return 0;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <lcd_set_pixel>:

uint8_t lcd_set_pixel(uint16_t x, uint16_t y)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	460a      	mov	r2, r1
 8008b20:	80fb      	strh	r3, [r7, #6]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80bb      	strh	r3, [r7, #4]
	uint8_t setBit = LCD_BIT | LCD_BIT_SET | (7 - (x % 8));
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	f063 0307 	orn	r3, r3, #7
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	73fb      	strb	r3, [r7, #15]

	set_address_pointer(GRAPHIC_HOME + (uint16_t)(x / 8) + y * 30);
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	08db      	lsrs	r3, r3, #3
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	88bb      	ldrh	r3, [r7, #4]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	0109      	lsls	r1, r1, #4
 8008b42:	1acb      	subs	r3, r1, r3
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff ff23 	bl	8008998 <set_address_pointer>

	if(lcd_cmd_write(setBit))
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff fdf3 	bl	8008740 <lcd_cmd_write>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <lcd_set_pixel+0x4e>
	{
		return 1;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <lcd_set_pixel+0x50>
	}

	return 0;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <lcd_clear_pixel>:

uint8_t lcd_clear_pixel(uint16_t x, uint16_t y)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	4603      	mov	r3, r0
 8008b76:	460a      	mov	r2, r1
 8008b78:	80fb      	strh	r3, [r7, #6]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80bb      	strh	r3, [r7, #4]
	uint8_t setBit = LCD_BIT | LCD_BIT_RESET | (7 - (x % 8));
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	f063 030f 	orn	r3, r3, #15
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	73fb      	strb	r3, [r7, #15]

	set_address_pointer(GRAPHIC_HOME + (uint16_t)(x / 8) + y * 30);
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	08db      	lsrs	r3, r3, #3
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	88bb      	ldrh	r3, [r7, #4]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	0109      	lsls	r1, r1, #4
 8008ba0:	1acb      	subs	r3, r1, r3
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff fef4 	bl	8008998 <set_address_pointer>

	if(lcd_cmd_write(setBit))
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff fdc4 	bl	8008740 <lcd_cmd_write>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <lcd_clear_pixel+0x54>
	{
		return 1;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <lcd_clear_pixel+0x56>
	}

	return 0;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <draw_value>:
#include "lcd_menu_coord.h"
#include "lcd_symbol.h"


static void draw_value(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
	lcd_symbol_rect(VALUE_RECT_OUTER_START_X, VALUE_RECT_OUTER_START_Y, VALUE_RECT_OUTER_LENGTH_X, VALUE_RECT_OUTER_LENGTH_Y);
 8008bd0:	230b      	movs	r3, #11
 8008bd2:	2221      	movs	r2, #33	; 0x21
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f000 fcb6 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(VALUE_NAME_AXIS_X, VALUE_NAME_AXIS_Y, "VALUE");
 8008bdc:	4a03      	ldr	r2, [pc, #12]	; (8008bec <draw_value+0x20>)
 8008bde:	2102      	movs	r1, #2
 8008be0:	2001      	movs	r0, #1
 8008be2:	f000 fea2 	bl	800992a <lcd_symbol_string>
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	08013f40 	.word	0x08013f40

08008bf0 <draw_value_inv>:

static void draw_value_inv(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(VALUE_RECT_OUTER_START_X, VALUE_RECT_OUTER_START_Y, VALUE_RECT_OUTER_LENGTH_X, VALUE_RECT_OUTER_LENGTH_Y);
 8008bf4:	230b      	movs	r3, #11
 8008bf6:	2221      	movs	r2, #33	; 0x21
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f000 fcf9 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(VALUE_NAME_AXIS_X, VALUE_NAME_AXIS_Y, "VALUE");
 8008c00:	4a03      	ldr	r2, [pc, #12]	; (8008c10 <draw_value_inv+0x20>)
 8008c02:	2102      	movs	r1, #2
 8008c04:	2001      	movs	r0, #1
 8008c06:	f000 feae 	bl	8009966 <lcd_symbol_string_inv>
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	08013f40 	.word	0x08013f40

08008c14 <draw_graph>:

static void draw_graph(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
	lcd_symbol_rect(GRAPH_RECT_OUTER_AXIS_X, GRAPH_RECT_OUTER_AXIS_Y, GRAPH_RECT_OUTER_LENGTH_X, GRAPH_RECT_OUTER_LENGTH_Y);
 8008c18:	230b      	movs	r3, #11
 8008c1a:	2221      	movs	r2, #33	; 0x21
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2020      	movs	r0, #32
 8008c20:	f000 fc92 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(GRAPH_NAME_AXIS_X, GRAPH_NAME_AXIS_Y, "GRAPH");
 8008c24:	4a03      	ldr	r2, [pc, #12]	; (8008c34 <draw_graph+0x20>)
 8008c26:	2102      	movs	r1, #2
 8008c28:	2021      	movs	r0, #33	; 0x21
 8008c2a:	f000 fe7e 	bl	800992a <lcd_symbol_string>
}
 8008c2e:	bf00      	nop
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	08013f48 	.word	0x08013f48

08008c38 <draw_graph_inv>:

static void draw_graph_inv(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(GRAPH_RECT_OUTER_AXIS_X, GRAPH_RECT_OUTER_AXIS_Y, GRAPH_RECT_OUTER_LENGTH_X, GRAPH_RECT_OUTER_LENGTH_Y);
 8008c3c:	230b      	movs	r3, #11
 8008c3e:	2221      	movs	r2, #33	; 0x21
 8008c40:	2100      	movs	r1, #0
 8008c42:	2020      	movs	r0, #32
 8008c44:	f000 fcd5 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(GRAPH_NAME_AXIS_X, GRAPH_NAME_AXIS_Y, "GRAPH");
 8008c48:	4a03      	ldr	r2, [pc, #12]	; (8008c58 <draw_graph_inv+0x20>)
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	2021      	movs	r0, #33	; 0x21
 8008c4e:	f000 fe8a 	bl	8009966 <lcd_symbol_string_inv>
}
 8008c52:	bf00      	nop
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	08013f48 	.word	0x08013f48

08008c5c <draw_settings>:

static void draw_settings(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
	lcd_symbol_rect(SETTINGS_RECT_OUTER_AXIS_X, SETTINGS_RECT_OUTER_AXIS_Y, SETTINGS_RECT_OUTER_LENGTH_X, SETTINGS_RECT_OUTER_LENGTH_Y);
 8008c60:	230b      	movs	r3, #11
 8008c62:	2233      	movs	r2, #51	; 0x33
 8008c64:	2100      	movs	r1, #0
 8008c66:	2040      	movs	r0, #64	; 0x40
 8008c68:	f000 fc6e 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(SETTINGS_NAME_AXIS_X, SETTINGS_NAME_AXIS_Y, "SETTINGS");
 8008c6c:	4a03      	ldr	r2, [pc, #12]	; (8008c7c <draw_settings+0x20>)
 8008c6e:	2102      	movs	r1, #2
 8008c70:	2041      	movs	r0, #65	; 0x41
 8008c72:	f000 fe5a 	bl	800992a <lcd_symbol_string>
}
 8008c76:	bf00      	nop
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08013f50 	.word	0x08013f50

08008c80 <draw_settings_inv>:

static void draw_settings_inv(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(SETTINGS_RECT_OUTER_AXIS_X, SETTINGS_RECT_OUTER_AXIS_Y, SETTINGS_RECT_OUTER_LENGTH_X, SETTINGS_RECT_OUTER_LENGTH_Y);
 8008c84:	230b      	movs	r3, #11
 8008c86:	2233      	movs	r2, #51	; 0x33
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2040      	movs	r0, #64	; 0x40
 8008c8c:	f000 fcb1 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(SETTINGS_NAME_AXIS_X, SETTINGS_NAME_AXIS_Y, "SETTINGS");
 8008c90:	4a03      	ldr	r2, [pc, #12]	; (8008ca0 <draw_settings_inv+0x20>)
 8008c92:	2102      	movs	r1, #2
 8008c94:	2041      	movs	r0, #65	; 0x41
 8008c96:	f000 fe66 	bl	8009966 <lcd_symbol_string_inv>
}
 8008c9a:	bf00      	nop
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08013f50 	.word	0x08013f50

08008ca4 <draw_debug>:

static void draw_debug(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
	lcd_symbol_rect(DEBUG_RECT_OUTER_AXIS_X, DEBUG_RECT_OUTER_AXIS_Y, DEBUG_RECT_OUTER_LENGTH_X, DEBUG_RECT_OUTER_LENGTH_Y);
 8008ca8:	230b      	movs	r3, #11
 8008caa:	2221      	movs	r2, #33	; 0x21
 8008cac:	2100      	movs	r1, #0
 8008cae:	2072      	movs	r0, #114	; 0x72
 8008cb0:	f000 fc4a 	bl	8009548 <lcd_symbol_rect>
	lcd_symbol_string(DEBUG_NAME_AXIS_X, DEBUG_NAME_AXIS_Y, "DEBUG");
 8008cb4:	4a03      	ldr	r2, [pc, #12]	; (8008cc4 <draw_debug+0x20>)
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	2073      	movs	r0, #115	; 0x73
 8008cba:	f000 fe36 	bl	800992a <lcd_symbol_string>
}
 8008cbe:	bf00      	nop
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08013f5c 	.word	0x08013f5c

08008cc8 <draw_debug_inv>:

static void draw_debug_inv(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
	lcd_symbol_rect_filled(DEBUG_RECT_OUTER_AXIS_X, DEBUG_RECT_OUTER_AXIS_Y, DEBUG_RECT_OUTER_LENGTH_X, DEBUG_RECT_OUTER_LENGTH_Y);
 8008ccc:	230b      	movs	r3, #11
 8008cce:	2221      	movs	r2, #33	; 0x21
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	2072      	movs	r0, #114	; 0x72
 8008cd4:	f000 fc8d 	bl	80095f2 <lcd_symbol_rect_filled>
	lcd_symbol_string_inv(DEBUG_NAME_AXIS_X, DEBUG_NAME_AXIS_Y, "DEBUG");
 8008cd8:	4a03      	ldr	r2, [pc, #12]	; (8008ce8 <draw_debug_inv+0x20>)
 8008cda:	2102      	movs	r1, #2
 8008cdc:	2073      	movs	r0, #115	; 0x73
 8008cde:	f000 fe42 	bl	8009966 <lcd_symbol_string_inv>
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08013f5c 	.word	0x08013f5c

08008cec <draw_head_basic>:

// DRAW
static void draw_head_basic(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
	draw_value();
 8008cf0:	f7ff ff6c 	bl	8008bcc <draw_value>
	draw_graph();
 8008cf4:	f7ff ff8e 	bl	8008c14 <draw_graph>
	draw_settings();
 8008cf8:	f7ff ffb0 	bl	8008c5c <draw_settings>
	draw_debug();
 8008cfc:	f7ff ffd2 	bl	8008ca4 <draw_debug>
}
 8008d00:	bf00      	nop
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <lcd_head_draw_value>:

uint8_t lcd_head_draw_value(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
	draw_head_basic();
 8008d08:	f7ff fff0 	bl	8008cec <draw_head_basic>
	draw_value_inv();
 8008d0c:	f7ff ff70 	bl	8008bf0 <draw_value_inv>

	return 0;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <lcd_head_draw_graph>:

uint8_t lcd_head_draw_graph(void)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	af00      	add	r7, sp, #0
	draw_head_basic();
 8008d1a:	f7ff ffe7 	bl	8008cec <draw_head_basic>
	draw_graph_inv();
 8008d1e:	f7ff ff8b 	bl	8008c38 <draw_graph_inv>

	return 0;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <lcd_head_draw_settings>:

uint8_t lcd_head_draw_settings(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
	draw_head_basic();
 8008d2c:	f7ff ffde 	bl	8008cec <draw_head_basic>
	draw_settings_inv();
 8008d30:	f7ff ffa6 	bl	8008c80 <draw_settings_inv>

	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <lcd_head_draw_debug>:

uint8_t lcd_head_draw_debug(void)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	af00      	add	r7, sp, #0
	draw_head_basic();
 8008d3e:	f7ff ffd5 	bl	8008cec <draw_head_basic>
	draw_debug_inv();
 8008d42:	f7ff ffc1 	bl	8008cc8 <draw_debug_inv>

	return 0;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <lcd_head_reset>:

// RESET
uint8_t lcd_head_reset(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
	lcd_matrix_reset(MENU_HOME_X, MENU_HOME_Y, DEBUG_RECT_OUTER_AXIS_X + DEBUG_RECT_OUTER_LENGTH_X, MENU_LENGTH_Y);		// TODO reset where really need
 8008d50:	2310      	movs	r3, #16
 8008d52:	2293      	movs	r2, #147	; 0x93
 8008d54:	2100      	movs	r1, #0
 8008d56:	2000      	movs	r0, #0
 8008d58:	f000 f94c 	bl	8008ff4 <lcd_matrix_reset>
	lcd_matrix_reset(BODY_HOME_X, BODY_HOME_Y, BODY_LENGTH_X, BODY_LENGTH_Y);
 8008d5c:	2370      	movs	r3, #112	; 0x70
 8008d5e:	22f0      	movs	r2, #240	; 0xf0
 8008d60:	2110      	movs	r1, #16
 8008d62:	2000      	movs	r0, #0
 8008d64:	f000 f946 	bl	8008ff4 <lcd_matrix_reset>

	return 0;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <lcd_matrix_set_pixel>:
uint8_t matrix_current[128][(240 / 8)] = { 0 };
uint8_t matrix_new[128][(240 / 8)] = { 0 };


uint8_t lcd_matrix_set_pixel(uint16_t x, uint16_t y)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	460a      	mov	r2, r1
 8008d7a:	80fb      	strh	r3, [r7, #6]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	80bb      	strh	r3, [r7, #4]
	x = lcd_display_view_get_x(x);
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fbdc 	bl	8008540 <lcd_display_view_get_x>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	80fb      	strh	r3, [r7, #6]
	y = lcd_display_view_get_y(y);
 8008d8c:	88bb      	ldrh	r3, [r7, #4]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fbec 	bl	800856c <lcd_display_view_get_y>
 8008d94:	4603      	mov	r3, r0
 8008d96:	80bb      	strh	r3, [r7, #4]

	matrix_new[y][(x / 8)] |= 1 << (x % 8);
 8008d98:	88ba      	ldrh	r2, [r7, #4]
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	08db      	lsrs	r3, r3, #3
 8008d9e:	b298      	uxth	r0, r3
 8008da0:	4604      	mov	r4, r0
 8008da2:	4911      	ldr	r1, [pc, #68]	; (8008de8 <lcd_matrix_set_pixel+0x78>)
 8008da4:	4613      	mov	r3, r2
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	440b      	add	r3, r1
 8008dae:	4423      	add	r3, r4
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b25a      	sxtb	r2, r3
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2101      	movs	r1, #1
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	b25b      	sxtb	r3, r3
 8008dc6:	88ba      	ldrh	r2, [r7, #4]
 8008dc8:	4604      	mov	r4, r0
 8008dca:	b2d8      	uxtb	r0, r3
 8008dcc:	4906      	ldr	r1, [pc, #24]	; (8008de8 <lcd_matrix_set_pixel+0x78>)
 8008dce:	4613      	mov	r3, r2
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	440b      	add	r3, r1
 8008dd8:	4423      	add	r3, r4
 8008dda:	4602      	mov	r2, r0
 8008ddc:	701a      	strb	r2, [r3, #0]

	return 0;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd90      	pop	{r4, r7, pc}
 8008de8:	20002158 	.word	0x20002158

08008dec <lcd_matrix_clear_pixel>:

uint8_t lcd_matrix_clear_pixel(uint16_t x, uint16_t y)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	460a      	mov	r2, r1
 8008df6:	80fb      	strh	r3, [r7, #6]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80bb      	strh	r3, [r7, #4]
	x = lcd_display_view_get_x(x);
 8008dfc:	88fb      	ldrh	r3, [r7, #6]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fb9e 	bl	8008540 <lcd_display_view_get_x>
 8008e04:	4603      	mov	r3, r0
 8008e06:	80fb      	strh	r3, [r7, #6]
	y = lcd_display_view_get_y(y);
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fbae 	bl	800856c <lcd_display_view_get_y>
 8008e10:	4603      	mov	r3, r0
 8008e12:	80bb      	strh	r3, [r7, #4]

	matrix_new[y][(x / 8)] &= ~(1 << (x % 8));
 8008e14:	88ba      	ldrh	r2, [r7, #4]
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	b298      	uxth	r0, r3
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4912      	ldr	r1, [pc, #72]	; (8008e68 <lcd_matrix_clear_pixel+0x7c>)
 8008e20:	4613      	mov	r3, r2
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	440b      	add	r3, r1
 8008e2a:	4423      	add	r3, r4
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b25a      	sxtb	r2, r3
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2101      	movs	r1, #1
 8008e38:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	43db      	mvns	r3, r3
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	4013      	ands	r3, r2
 8008e44:	b25b      	sxtb	r3, r3
 8008e46:	88ba      	ldrh	r2, [r7, #4]
 8008e48:	4604      	mov	r4, r0
 8008e4a:	b2d8      	uxtb	r0, r3
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <lcd_matrix_clear_pixel+0x7c>)
 8008e4e:	4613      	mov	r3, r2
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	1a9b      	subs	r3, r3, r2
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	440b      	add	r3, r1
 8008e58:	4423      	add	r3, r4
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	701a      	strb	r2, [r3, #0]

	return 0;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd90      	pop	{r4, r7, pc}
 8008e68:	20002158 	.word	0x20002158

08008e6c <lcd_matrix_update>:

uint8_t lcd_matrix_update(uint16_t x, uint16_t y, size_t x_length, size_t y_length)
{
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b089      	sub	sp, #36	; 0x24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60ba      	str	r2, [r7, #8]
 8008e74:	607b      	str	r3, [r7, #4]
 8008e76:	4603      	mov	r3, r0
 8008e78:	81fb      	strh	r3, [r7, #14]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	81bb      	strh	r3, [r7, #12]
	for(uint16_t _y = 0; _y < y_length; _y++)
 8008e7e:	2300      	movs	r3, #0
 8008e80:	83fb      	strh	r3, [r7, #30]
 8008e82:	e0a9      	b.n	8008fd8 <lcd_matrix_update+0x16c>
	{
		for(uint16_t _x = 0; _x < x_length; _x++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	83bb      	strh	r3, [r7, #28]
 8008e88:	e09e      	b.n	8008fc8 <lcd_matrix_update+0x15c>
		{
			uint16_t tmp_x = lcd_display_view_get_x(x + _x);
 8008e8a:	89fa      	ldrh	r2, [r7, #14]
 8008e8c:	8bbb      	ldrh	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fb54 	bl	8008540 <lcd_display_view_get_x>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	837b      	strh	r3, [r7, #26]
			uint16_t tmp_y = lcd_display_view_get_y(y + _y);
 8008e9c:	89ba      	ldrh	r2, [r7, #12]
 8008e9e:	8bfb      	ldrh	r3, [r7, #30]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fb61 	bl	800856c <lcd_display_view_get_y>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	833b      	strh	r3, [r7, #24]

			uint8_t px_new = matrix_new[tmp_y][(tmp_x / 8)] >> (tmp_x % 8);
 8008eae:	8b3a      	ldrh	r2, [r7, #24]
 8008eb0:	8b7b      	ldrh	r3, [r7, #26]
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	494c      	ldr	r1, [pc, #304]	; (8008fec <lcd_matrix_update+0x180>)
 8008eba:	4613      	mov	r3, r2
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	1a9b      	subs	r3, r3, r2
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	440b      	add	r3, r1
 8008ec4:	4403      	add	r3, r0
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	8b7b      	ldrh	r3, [r7, #26]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	fa42 f303 	asr.w	r3, r2, r3
 8008ed4:	75fb      	strb	r3, [r7, #23]
			uint8_t px_current = matrix_current[tmp_y][(tmp_x / 8)] >> (tmp_x % 8);
 8008ed6:	8b3a      	ldrh	r2, [r7, #24]
 8008ed8:	8b7b      	ldrh	r3, [r7, #26]
 8008eda:	08db      	lsrs	r3, r3, #3
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4618      	mov	r0, r3
 8008ee0:	4943      	ldr	r1, [pc, #268]	; (8008ff0 <lcd_matrix_update+0x184>)
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	440b      	add	r3, r1
 8008eec:	4403      	add	r3, r0
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	8b7b      	ldrh	r3, [r7, #26]
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	fa42 f303 	asr.w	r3, r2, r3
 8008efc:	75bb      	strb	r3, [r7, #22]

			if((px_new & 0x01) != (px_current & 0x01))
 8008efe:	7dfa      	ldrb	r2, [r7, #23]
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
 8008f02:	4053      	eors	r3, r2
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d059      	beq.n	8008fc2 <lcd_matrix_update+0x156>
			{
				if((px_new & 0x01) == 0x01)
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d029      	beq.n	8008f6c <lcd_matrix_update+0x100>
				{
					lcd_set_pixel(tmp_x, tmp_y);
 8008f18:	8b3a      	ldrh	r2, [r7, #24]
 8008f1a:	8b7b      	ldrh	r3, [r7, #26]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fdf9 	bl	8008b16 <lcd_set_pixel>
					matrix_current[tmp_y][(tmp_x / 8)] |= 1 << (tmp_x % 8);
 8008f24:	8b3a      	ldrh	r2, [r7, #24]
 8008f26:	8b7b      	ldrh	r3, [r7, #26]
 8008f28:	08db      	lsrs	r3, r3, #3
 8008f2a:	b298      	uxth	r0, r3
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	4930      	ldr	r1, [pc, #192]	; (8008ff0 <lcd_matrix_update+0x184>)
 8008f30:	4613      	mov	r3, r2
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	440b      	add	r3, r1
 8008f3a:	4423      	add	r3, r4
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b25a      	sxtb	r2, r3
 8008f40:	8b7b      	ldrh	r3, [r7, #26]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2101      	movs	r1, #1
 8008f48:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4c:	b25b      	sxtb	r3, r3
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	b25b      	sxtb	r3, r3
 8008f52:	8b3a      	ldrh	r2, [r7, #24]
 8008f54:	4604      	mov	r4, r0
 8008f56:	b2d8      	uxtb	r0, r3
 8008f58:	4925      	ldr	r1, [pc, #148]	; (8008ff0 <lcd_matrix_update+0x184>)
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	440b      	add	r3, r1
 8008f64:	4423      	add	r3, r4
 8008f66:	4602      	mov	r2, r0
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e02a      	b.n	8008fc2 <lcd_matrix_update+0x156>
				}
				else
				{
					lcd_clear_pixel(tmp_x, tmp_y);
 8008f6c:	8b3a      	ldrh	r2, [r7, #24]
 8008f6e:	8b7b      	ldrh	r3, [r7, #26]
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fdfb 	bl	8008b6e <lcd_clear_pixel>
					matrix_current[tmp_y][(tmp_x / 8)] &= ~(1 << (tmp_x % 8));
 8008f78:	8b3a      	ldrh	r2, [r7, #24]
 8008f7a:	8b7b      	ldrh	r3, [r7, #26]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	b298      	uxth	r0, r3
 8008f80:	4604      	mov	r4, r0
 8008f82:	491b      	ldr	r1, [pc, #108]	; (8008ff0 <lcd_matrix_update+0x184>)
 8008f84:	4613      	mov	r3, r2
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	440b      	add	r3, r1
 8008f8e:	4423      	add	r3, r4
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	b25a      	sxtb	r2, r3
 8008f94:	8b7b      	ldrh	r3, [r7, #26]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	b25b      	sxtb	r3, r3
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	b25b      	sxtb	r3, r3
 8008faa:	8b3a      	ldrh	r2, [r7, #24]
 8008fac:	4604      	mov	r4, r0
 8008fae:	b2d8      	uxtb	r0, r3
 8008fb0:	490f      	ldr	r1, [pc, #60]	; (8008ff0 <lcd_matrix_update+0x184>)
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	440b      	add	r3, r1
 8008fbc:	4423      	add	r3, r4
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	701a      	strb	r2, [r3, #0]
		for(uint16_t _x = 0; _x < x_length; _x++)
 8008fc2:	8bbb      	ldrh	r3, [r7, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	83bb      	strh	r3, [r7, #28]
 8008fc8:	8bbb      	ldrh	r3, [r7, #28]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	f63f af5c 	bhi.w	8008e8a <lcd_matrix_update+0x1e>
	for(uint16_t _y = 0; _y < y_length; _y++)
 8008fd2:	8bfb      	ldrh	r3, [r7, #30]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	83fb      	strh	r3, [r7, #30]
 8008fd8:	8bfb      	ldrh	r3, [r7, #30]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	f63f af51 	bhi.w	8008e84 <lcd_matrix_update+0x18>
				}
			}
		}
	}

	return 0;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3724      	adds	r7, #36	; 0x24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd90      	pop	{r4, r7, pc}
 8008fec:	20002158 	.word	0x20002158
 8008ff0:	20001258 	.word	0x20001258

08008ff4 <lcd_matrix_reset>:

uint8_t lcd_matrix_reset(uint16_t x, uint16_t y, size_t x_length, size_t y_length)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60ba      	str	r2, [r7, #8]
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	4603      	mov	r3, r0
 8009000:	81fb      	strh	r3, [r7, #14]
 8009002:	460b      	mov	r3, r1
 8009004:	81bb      	strh	r3, [r7, #12]
	for(uint16_t _y = 0; _y < y_length; _y++)
 8009006:	2300      	movs	r3, #0
 8009008:	82fb      	strh	r3, [r7, #22]
 800900a:	e065      	b.n	80090d8 <lcd_matrix_reset+0xe4>
	{
		uint16_t _x = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	82bb      	strh	r3, [r7, #20]

		while(_x < x_length)
 8009010:	e05b      	b.n	80090ca <lcd_matrix_reset+0xd6>
		{
			uint16_t tmp_x = lcd_display_view_get_x(x + _x);
 8009012:	89fa      	ldrh	r2, [r7, #14]
 8009014:	8abb      	ldrh	r3, [r7, #20]
 8009016:	4413      	add	r3, r2
 8009018:	b29b      	uxth	r3, r3
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fa90 	bl	8008540 <lcd_display_view_get_x>
 8009020:	4603      	mov	r3, r0
 8009022:	827b      	strh	r3, [r7, #18]
			uint16_t tmp_y = lcd_display_view_get_y(y + _y);
 8009024:	89ba      	ldrh	r2, [r7, #12]
 8009026:	8afb      	ldrh	r3, [r7, #22]
 8009028:	4413      	add	r3, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fa9d 	bl	800856c <lcd_display_view_get_y>
 8009032:	4603      	mov	r3, r0
 8009034:	823b      	strh	r3, [r7, #16]

			if(((tmp_x % 8) == 0) && ((x_length - tmp_x) >= 8) && lcd_display_view_is_original())	// TODO Pfusch! Problem ist, wenn beim flip Display dann alle Pixels gelöscht werden, obwohl es nicht notwendig ist.
 8009036:	8a7b      	ldrh	r3, [r7, #18]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d11b      	bne.n	800907a <lcd_matrix_reset+0x86>
 8009042:	8a7b      	ldrh	r3, [r7, #18]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b07      	cmp	r3, #7
 800904a:	d916      	bls.n	800907a <lcd_matrix_reset+0x86>
 800904c:	f7ff fa64 	bl	8008518 <lcd_display_view_is_original>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d011      	beq.n	800907a <lcd_matrix_reset+0x86>
			{
				matrix_new[tmp_y][(tmp_x / 8)] = 0;
 8009056:	8a3a      	ldrh	r2, [r7, #16]
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	08db      	lsrs	r3, r3, #3
 800905c:	b29b      	uxth	r3, r3
 800905e:	4618      	mov	r0, r3
 8009060:	4922      	ldr	r1, [pc, #136]	; (80090ec <lcd_matrix_reset+0xf8>)
 8009062:	4613      	mov	r3, r2
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	440b      	add	r3, r1
 800906c:	4403      	add	r3, r0
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
				_x += 8;
 8009072:	8abb      	ldrh	r3, [r7, #20]
 8009074:	3308      	adds	r3, #8
 8009076:	82bb      	strh	r3, [r7, #20]
 8009078:	e027      	b.n	80090ca <lcd_matrix_reset+0xd6>
			}
			else
			{
				matrix_new[tmp_y][(tmp_x / 8)] &= ~(1 << (tmp_x % 8));
 800907a:	8a3a      	ldrh	r2, [r7, #16]
 800907c:	8a7b      	ldrh	r3, [r7, #18]
 800907e:	08db      	lsrs	r3, r3, #3
 8009080:	b298      	uxth	r0, r3
 8009082:	4604      	mov	r4, r0
 8009084:	4919      	ldr	r1, [pc, #100]	; (80090ec <lcd_matrix_reset+0xf8>)
 8009086:	4613      	mov	r3, r2
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	440b      	add	r3, r1
 8009090:	4423      	add	r3, r4
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	b25a      	sxtb	r2, r3
 8009096:	8a7b      	ldrh	r3, [r7, #18]
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	b25b      	sxtb	r3, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	b25b      	sxtb	r3, r3
 80090a8:	4013      	ands	r3, r2
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	8a3a      	ldrh	r2, [r7, #16]
 80090ae:	4604      	mov	r4, r0
 80090b0:	b2d8      	uxtb	r0, r3
 80090b2:	490e      	ldr	r1, [pc, #56]	; (80090ec <lcd_matrix_reset+0xf8>)
 80090b4:	4613      	mov	r3, r2
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	440b      	add	r3, r1
 80090be:	4423      	add	r3, r4
 80090c0:	4602      	mov	r2, r0
 80090c2:	701a      	strb	r2, [r3, #0]
				_x++;
 80090c4:	8abb      	ldrh	r3, [r7, #20]
 80090c6:	3301      	adds	r3, #1
 80090c8:	82bb      	strh	r3, [r7, #20]
		while(_x < x_length)
 80090ca:	8abb      	ldrh	r3, [r7, #20]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d89f      	bhi.n	8009012 <lcd_matrix_reset+0x1e>
	for(uint16_t _y = 0; _y < y_length; _y++)
 80090d2:	8afb      	ldrh	r3, [r7, #22]
 80090d4:	3301      	adds	r3, #1
 80090d6:	82fb      	strh	r3, [r7, #22]
 80090d8:	8afb      	ldrh	r3, [r7, #22]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d895      	bhi.n	800900c <lcd_matrix_reset+0x18>
			}
		}
	}

	return 0;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd90      	pop	{r4, r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20002158 	.word	0x20002158

080090f0 <get_task_from_tree>:
};

uint8_t triggered = 0;

static menu_task_t get_task_from_tree(menu_task_t task, action_t action)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	460a      	mov	r2, r1
 80090fa:	71fb      	strb	r3, [r7, #7]
 80090fc:	4613      	mov	r3, r2
 80090fe:	71bb      	strb	r3, [r7, #6]
	menu_task_t new_task = task;
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	73fb      	strb	r3, [r7, #15]

	if(menu_tree[task].task[action] != menu_noaction)
 8009104:	79fa      	ldrb	r2, [r7, #7]
 8009106:	79bb      	ldrb	r3, [r7, #6]
 8009108:	492e      	ldr	r1, [pc, #184]	; (80091c4 <get_task_from_tree+0xd4>)
 800910a:	202c      	movs	r0, #44	; 0x2c
 800910c:	fb00 f202 	mul.w	r2, r0, r2
 8009110:	440a      	add	r2, r1
 8009112:	4413      	add	r3, r2
 8009114:	3324      	adds	r3, #36	; 0x24
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b0d      	cmp	r3, #13
 800911a:	d04e      	beq.n	80091ba <get_task_from_tree+0xca>
	{
		if(menu_tree[task].task[action] != menu_none)
 800911c:	79fa      	ldrb	r2, [r7, #7]
 800911e:	79bb      	ldrb	r3, [r7, #6]
 8009120:	4928      	ldr	r1, [pc, #160]	; (80091c4 <get_task_from_tree+0xd4>)
 8009122:	202c      	movs	r0, #44	; 0x2c
 8009124:	fb00 f202 	mul.w	r2, r0, r2
 8009128:	440a      	add	r2, r1
 800912a:	4413      	add	r3, r2
 800912c:	3324      	adds	r3, #36	; 0x24
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b0c      	cmp	r3, #12
 8009132:	d029      	beq.n	8009188 <get_task_from_tree+0x98>
		{
			if(menu_tree[task].trigger[action] != NULL)
 8009134:	79fa      	ldrb	r2, [r7, #7]
 8009136:	79b9      	ldrb	r1, [r7, #6]
 8009138:	4822      	ldr	r0, [pc, #136]	; (80091c4 <get_task_from_tree+0xd4>)
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	4413      	add	r3, r2
 8009144:	440b      	add	r3, r1
 8009146:	3302      	adds	r3, #2
 8009148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00f      	beq.n	8009170 <get_task_from_tree+0x80>
			{
				menu_tree[task].trigger[action]();
 8009150:	79fa      	ldrb	r2, [r7, #7]
 8009152:	79b9      	ldrb	r1, [r7, #6]
 8009154:	481b      	ldr	r0, [pc, #108]	; (80091c4 <get_task_from_tree+0xd4>)
 8009156:	4613      	mov	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	4413      	add	r3, r2
 8009160:	440b      	add	r3, r1
 8009162:	3302      	adds	r3, #2
 8009164:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009168:	4798      	blx	r3
				triggered = 1;
 800916a:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <get_task_from_tree+0xd8>)
 800916c:	2201      	movs	r2, #1
 800916e:	701a      	strb	r2, [r3, #0]
			}

			new_task = menu_tree[task].task[action];
 8009170:	79fa      	ldrb	r2, [r7, #7]
 8009172:	79bb      	ldrb	r3, [r7, #6]
 8009174:	4913      	ldr	r1, [pc, #76]	; (80091c4 <get_task_from_tree+0xd4>)
 8009176:	202c      	movs	r0, #44	; 0x2c
 8009178:	fb00 f202 	mul.w	r2, r0, r2
 800917c:	440a      	add	r2, r1
 800917e:	4413      	add	r3, r2
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	73fb      	strb	r3, [r7, #15]
 8009186:	e018      	b.n	80091ba <get_task_from_tree+0xca>
		}
		else
		{
			if(menu_tree[task].parent != menu_none)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	4a0e      	ldr	r2, [pc, #56]	; (80091c4 <get_task_from_tree+0xd4>)
 800918c:	212c      	movs	r1, #44	; 0x2c
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	4413      	add	r3, r2
 8009194:	3329      	adds	r3, #41	; 0x29
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d00e      	beq.n	80091ba <get_task_from_tree+0xca>
			{
				new_task = get_task_from_tree(menu_tree[task].parent, action);
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <get_task_from_tree+0xd4>)
 80091a0:	212c      	movs	r1, #44	; 0x2c
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	3329      	adds	r3, #41	; 0x29
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	79ba      	ldrb	r2, [r7, #6]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff ff9d 	bl	80090f0 <get_task_from_tree>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return new_task;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	08014014 	.word	0x08014014
 80091c8:	20003058 	.word	0x20003058

080091cc <get_new_task>:

static menu_task_t get_new_task(menu_task_t task)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	71fb      	strb	r3, [r7, #7]
	menu_task_t new_task = task;
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	73fb      	strb	r3, [r7, #15]

	if(button_get_pressed_any())
 80091da:	f006 fbd3 	bl	800f984 <button_get_pressed_any>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d073      	beq.n	80092cc <get_new_task+0x100>
	{
		if(button_get_pressed_up())
 80091e4:	f006 fbda 	bl	800f99c <button_get_pressed_up>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d014      	beq.n	8009218 <get_new_task+0x4c>
		{
			if(lcd_display_view_is_original())
 80091ee:	f7ff f993 	bl	8008518 <lcd_display_view_is_original>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <get_new_task+0x3c>
				new_task = get_task_from_tree(task, button_up);
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff ff77 	bl	80090f0 <get_task_from_tree>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
 8009206:	e061      	b.n	80092cc <get_new_task+0x100>
			else
				new_task = get_task_from_tree(task, button_down);
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	2101      	movs	r1, #1
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff ff6f 	bl	80090f0 <get_task_from_tree>
 8009212:	4603      	mov	r3, r0
 8009214:	73fb      	strb	r3, [r7, #15]
 8009216:	e059      	b.n	80092cc <get_new_task+0x100>
		}
		else if(button_get_pressed_down())
 8009218:	f006 fbda 	bl	800f9d0 <button_get_pressed_down>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d014      	beq.n	800924c <get_new_task+0x80>
		{
			if(lcd_display_view_is_original())
 8009222:	f7ff f979 	bl	8008518 <lcd_display_view_is_original>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d007      	beq.n	800923c <get_new_task+0x70>
				new_task = get_task_from_tree(task, button_down);
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	2101      	movs	r1, #1
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff ff5d 	bl	80090f0 <get_task_from_tree>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
 800923a:	e047      	b.n	80092cc <get_new_task+0x100>
			else
				new_task = get_task_from_tree(task, button_up);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2100      	movs	r1, #0
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff ff55 	bl	80090f0 <get_task_from_tree>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
 800924a:	e03f      	b.n	80092cc <get_new_task+0x100>
		}
		else if(button_get_pressed_left())
 800924c:	f006 fbda 	bl	800fa04 <button_get_pressed_left>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d014      	beq.n	8009280 <get_new_task+0xb4>
		{
			if(lcd_display_view_is_original())
 8009256:	f7ff f95f 	bl	8008518 <lcd_display_view_is_original>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d007      	beq.n	8009270 <get_new_task+0xa4>
				new_task = get_task_from_tree(task, button_left);
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	2102      	movs	r1, #2
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff ff43 	bl	80090f0 <get_task_from_tree>
 800926a:	4603      	mov	r3, r0
 800926c:	73fb      	strb	r3, [r7, #15]
 800926e:	e02d      	b.n	80092cc <get_new_task+0x100>
			else
				new_task = get_task_from_tree(task, button_right);
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2103      	movs	r1, #3
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff ff3b 	bl	80090f0 <get_task_from_tree>
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	e025      	b.n	80092cc <get_new_task+0x100>
		}
		else if(button_get_pressed_right())
 8009280:	f006 fbda 	bl	800fa38 <button_get_pressed_right>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d014      	beq.n	80092b4 <get_new_task+0xe8>
		{
			if(lcd_display_view_is_original())
 800928a:	f7ff f945 	bl	8008518 <lcd_display_view_is_original>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <get_new_task+0xd8>
				new_task = get_task_from_tree(task, button_right);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2103      	movs	r1, #3
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff ff29 	bl	80090f0 <get_task_from_tree>
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]
 80092a2:	e013      	b.n	80092cc <get_new_task+0x100>
			else
				new_task = get_task_from_tree(task, button_left);
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2102      	movs	r1, #2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff ff21 	bl	80090f0 <get_task_from_tree>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73fb      	strb	r3, [r7, #15]
 80092b2:	e00b      	b.n	80092cc <get_new_task+0x100>
		}
		else if(button_get_pressed_ok())
 80092b4:	f006 fbda 	bl	800fa6c <button_get_pressed_ok>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d006      	beq.n	80092cc <get_new_task+0x100>
		{
			new_task = get_task_from_tree(task, button_ok);
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2104      	movs	r1, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff14 	bl	80090f0 <get_task_from_tree>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
		}
	}

	return new_task;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <get_child>:

static menu_task_t get_child(menu_task_t task)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
	menu_task_t new_task = task;
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	73fb      	strb	r3, [r7, #15]

	if(menu_tree[task].child != menu_none)
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	4a15      	ldr	r2, [pc, #84]	; (8009340 <get_child+0x68>)
 80092ea:	212c      	movs	r1, #44	; 0x2c
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	332a      	adds	r3, #42	; 0x2a
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b0c      	cmp	r3, #12
 80092f8:	d01c      	beq.n	8009334 <get_child+0x5c>
	{
		menu_tree[menu_tree[task].child].draw();
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	4a10      	ldr	r2, [pc, #64]	; (8009340 <get_child+0x68>)
 80092fe:	212c      	movs	r1, #44	; 0x2c
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	332a      	adds	r3, #42	; 0x2a
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	4a0c      	ldr	r2, [pc, #48]	; (8009340 <get_child+0x68>)
 800930e:	232c      	movs	r3, #44	; 0x2c
 8009310:	fb03 f301 	mul.w	r3, r3, r1
 8009314:	4413      	add	r3, r2
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4798      	blx	r3
		new_task = get_child(menu_tree[task].child);
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	4a08      	ldr	r2, [pc, #32]	; (8009340 <get_child+0x68>)
 800931e:	212c      	movs	r1, #44	; 0x2c
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	4413      	add	r3, r2
 8009326:	332a      	adds	r3, #42	; 0x2a
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff ffd4 	bl	80092d8 <get_child>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
	}

	return new_task;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	08014014 	.word	0x08014014

08009344 <get_parent>:

static menu_task_t get_parent(menu_task_t task)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	71fb      	strb	r3, [r7, #7]
	menu_task_t new_task = task;
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	73fb      	strb	r3, [r7, #15]

	if(menu_tree[task].parent != menu_none)
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	4a1d      	ldr	r2, [pc, #116]	; (80093cc <get_parent+0x88>)
 8009356:	212c      	movs	r1, #44	; 0x2c
 8009358:	fb01 f303 	mul.w	r3, r1, r3
 800935c:	4413      	add	r3, r2
 800935e:	3329      	adds	r3, #41	; 0x29
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b0c      	cmp	r3, #12
 8009364:	d02d      	beq.n	80093c2 <get_parent+0x7e>
	{
		menu_tree[menu_tree[task].parent].reset_matrix();
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	4a18      	ldr	r2, [pc, #96]	; (80093cc <get_parent+0x88>)
 800936a:	212c      	movs	r1, #44	; 0x2c
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	4413      	add	r3, r2
 8009372:	3329      	adds	r3, #41	; 0x29
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	4a14      	ldr	r2, [pc, #80]	; (80093cc <get_parent+0x88>)
 800937a:	232c      	movs	r3, #44	; 0x2c
 800937c:	fb03 f301 	mul.w	r3, r3, r1
 8009380:	4413      	add	r3, r2
 8009382:	3304      	adds	r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4798      	blx	r3
		new_task = get_parent(menu_tree[task].parent);
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <get_parent+0x88>)
 800938c:	212c      	movs	r1, #44	; 0x2c
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
 8009394:	3329      	adds	r3, #41	; 0x29
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ffd3 	bl	8009344 <get_parent>
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]
		menu_tree[menu_tree[task].parent].draw();
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	4a09      	ldr	r2, [pc, #36]	; (80093cc <get_parent+0x88>)
 80093a6:	212c      	movs	r1, #44	; 0x2c
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	4413      	add	r3, r2
 80093ae:	3329      	adds	r3, #41	; 0x29
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	4a05      	ldr	r2, [pc, #20]	; (80093cc <get_parent+0x88>)
 80093b6:	232c      	movs	r3, #44	; 0x2c
 80093b8:	fb03 f301 	mul.w	r3, r3, r1
 80093bc:	4413      	add	r3, r2
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4798      	blx	r3
	}

	return new_task;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	08014014 	.word	0x08014014

080093d0 <lcd_menu_update>:

void lcd_menu_update(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
	menu_task_t task = get_new_task(menu_active);
 80093d6:	4b45      	ldr	r3, [pc, #276]	; (80094ec <lcd_menu_update+0x11c>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fef6 	bl	80091cc <get_new_task>
 80093e0:	4603      	mov	r3, r0
 80093e2:	71fb      	strb	r3, [r7, #7]

	if(task != menu_none)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b0c      	cmp	r3, #12
 80093e8:	d07c      	beq.n	80094e4 <lcd_menu_update+0x114>
	{
		if(triggered == 1)
 80093ea:	4b41      	ldr	r3, [pc, #260]	; (80094f0 <lcd_menu_update+0x120>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d136      	bne.n	8009460 <lcd_menu_update+0x90>
		{
			menu_tree[task].reset_matrix();
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	4a3f      	ldr	r2, [pc, #252]	; (80094f4 <lcd_menu_update+0x124>)
 80093f6:	212c      	movs	r1, #44	; 0x2c
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	4413      	add	r3, r2
 80093fe:	3304      	adds	r3, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4798      	blx	r3
			get_parent(task);
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff ff9c 	bl	8009344 <get_parent>

			if(menu_tree[task].trigger_draw != NULL)	// TODO is there a better solution?
 800940c:	79fb      	ldrb	r3, [r7, #7]
 800940e:	4a39      	ldr	r2, [pc, #228]	; (80094f4 <lcd_menu_update+0x124>)
 8009410:	212c      	movs	r1, #44	; 0x2c
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	331c      	adds	r3, #28
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d009      	beq.n	8009434 <lcd_menu_update+0x64>
				menu_tree[task].trigger_draw();
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	4a34      	ldr	r2, [pc, #208]	; (80094f4 <lcd_menu_update+0x124>)
 8009424:	212c      	movs	r1, #44	; 0x2c
 8009426:	fb01 f303 	mul.w	r3, r1, r3
 800942a:	4413      	add	r3, r2
 800942c:	331c      	adds	r3, #28
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4798      	blx	r3
 8009432:	e007      	b.n	8009444 <lcd_menu_update+0x74>
			else
				menu_tree[task].draw();
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	4a2f      	ldr	r2, [pc, #188]	; (80094f4 <lcd_menu_update+0x124>)
 8009438:	212c      	movs	r1, #44	; 0x2c
 800943a:	fb01 f303 	mul.w	r3, r1, r3
 800943e:	4413      	add	r3, r2
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4798      	blx	r3

			measure_mode_status_set_changed();
 8009444:	f006 fd72 	bl	800ff2c <measure_mode_status_set_changed>
			clock_set_status();
 8009448:	f006 fc78 	bl	800fd3c <clock_set_status>

			lcd_matrix_update(0, 0, 240, 128);
 800944c:	2380      	movs	r3, #128	; 0x80
 800944e:	22f0      	movs	r2, #240	; 0xf0
 8009450:	2100      	movs	r1, #0
 8009452:	2000      	movs	r0, #0
 8009454:	f7ff fd0a 	bl	8008e6c <lcd_matrix_update>

			triggered = 0;
 8009458:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <lcd_menu_update+0x120>)
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
			menu_tree[menu_active].update();

			lcd_matrix_update(0, 0, 240, 128);
		}
	}
}
 800945e:	e041      	b.n	80094e4 <lcd_menu_update+0x114>
		else if(menu_active != task)
 8009460:	4b22      	ldr	r3, [pc, #136]	; (80094ec <lcd_menu_update+0x11c>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	79fa      	ldrb	r2, [r7, #7]
 8009466:	429a      	cmp	r2, r3
 8009468:	d01f      	beq.n	80094aa <lcd_menu_update+0xda>
			menu_tree[task].reset_matrix();
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <lcd_menu_update+0x124>)
 800946e:	212c      	movs	r1, #44	; 0x2c
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	4413      	add	r3, r2
 8009476:	3304      	adds	r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4798      	blx	r3
			menu_tree[task].draw();
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <lcd_menu_update+0x124>)
 8009480:	212c      	movs	r1, #44	; 0x2c
 8009482:	fb01 f303 	mul.w	r3, r1, r3
 8009486:	4413      	add	r3, r2
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4798      	blx	r3
			menu_active = get_child(task);
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff ff22 	bl	80092d8 <get_child>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <lcd_menu_update+0x11c>)
 800949a:	701a      	strb	r2, [r3, #0]
			lcd_matrix_update(0, 0, 240, 128);
 800949c:	2380      	movs	r3, #128	; 0x80
 800949e:	22f0      	movs	r2, #240	; 0xf0
 80094a0:	2100      	movs	r1, #0
 80094a2:	2000      	movs	r0, #0
 80094a4:	f7ff fce2 	bl	8008e6c <lcd_matrix_update>
}
 80094a8:	e01c      	b.n	80094e4 <lcd_menu_update+0x114>
		else if(menu_tree[menu_active].update != NULL)
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <lcd_menu_update+0x11c>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	4619      	mov	r1, r3
 80094b0:	4a10      	ldr	r2, [pc, #64]	; (80094f4 <lcd_menu_update+0x124>)
 80094b2:	232c      	movs	r3, #44	; 0x2c
 80094b4:	fb03 f301 	mul.w	r3, r3, r1
 80094b8:	4413      	add	r3, r2
 80094ba:	3320      	adds	r3, #32
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d010      	beq.n	80094e4 <lcd_menu_update+0x114>
			menu_tree[menu_active].update();
 80094c2:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <lcd_menu_update+0x11c>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	4619      	mov	r1, r3
 80094c8:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <lcd_menu_update+0x124>)
 80094ca:	232c      	movs	r3, #44	; 0x2c
 80094cc:	fb03 f301 	mul.w	r3, r3, r1
 80094d0:	4413      	add	r3, r2
 80094d2:	3320      	adds	r3, #32
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4798      	blx	r3
			lcd_matrix_update(0, 0, 240, 128);
 80094d8:	2380      	movs	r3, #128	; 0x80
 80094da:	22f0      	movs	r2, #240	; 0xf0
 80094dc:	2100      	movs	r1, #0
 80094de:	2000      	movs	r0, #0
 80094e0:	f7ff fcc4 	bl	8008e6c <lcd_matrix_update>
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000176 	.word	0x20000176
 80094f0:	20003058 	.word	0x20003058
 80094f4:	08014014 	.word	0x08014014

080094f8 <lcd_menu_draw>:

void lcd_menu_draw(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
	menu_tree[menu_active].draw();
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <lcd_menu_draw+0x3c>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	4a0d      	ldr	r2, [pc, #52]	; (8009538 <lcd_menu_draw+0x40>)
 8009504:	232c      	movs	r3, #44	; 0x2c
 8009506:	fb03 f301 	mul.w	r3, r3, r1
 800950a:	4413      	add	r3, r2
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4798      	blx	r3
	menu_active = get_child(menu_active);
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <lcd_menu_draw+0x3c>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fedf 	bl	80092d8 <get_child>
 800951a:	4603      	mov	r3, r0
 800951c:	461a      	mov	r2, r3
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <lcd_menu_draw+0x3c>)
 8009520:	701a      	strb	r2, [r3, #0]

	lcd_matrix_update(0, 0, 240, 128);
 8009522:	2380      	movs	r3, #128	; 0x80
 8009524:	22f0      	movs	r2, #240	; 0xf0
 8009526:	2100      	movs	r1, #0
 8009528:	2000      	movs	r0, #0
 800952a:	f7ff fc9f 	bl	8008e6c <lcd_matrix_update>
}
 800952e:	bf00      	nop
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20000176 	.word	0x20000176
 8009538:	08014014 	.word	0x08014014

0800953c <lcd_menu_stop>:

void lcd_menu_stop(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
	lcd_body_graph_stop();
 8009540:	f7fe fcb4 	bl	8007eac <lcd_body_graph_stop>
}
 8009544:	bf00      	nop
 8009546:	bd80      	pop	{r7, pc}

08009548 <lcd_symbol_rect>:
#include "lcd_pixel_settings.h"


// RECT
void lcd_symbol_rect(uint16_t x, uint16_t y, size_t x_length, size_t y_length)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60ba      	str	r2, [r7, #8]
 8009550:	607b      	str	r3, [r7, #4]
 8009552:	4603      	mov	r3, r0
 8009554:	81fb      	strh	r3, [r7, #14]
 8009556:	460b      	mov	r3, r1
 8009558:	81bb      	strh	r3, [r7, #12]
	for(size_t _x = 0; _x < x_length; _x++)
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e01b      	b.n	8009598 <lcd_symbol_rect+0x50>
	{
		lcd_matrix_set_pixel(x + _x, y);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	b29a      	uxth	r2, r3
 8009564:	89fb      	ldrh	r3, [r7, #14]
 8009566:	4413      	add	r3, r2
 8009568:	b29b      	uxth	r3, r3
 800956a:	89ba      	ldrh	r2, [r7, #12]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fbfe 	bl	8008d70 <lcd_matrix_set_pixel>
		lcd_matrix_set_pixel(x + _x, y + y_length - 1);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	b29a      	uxth	r2, r3
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	4413      	add	r3, r2
 800957c:	b298      	uxth	r0, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	b29a      	uxth	r2, r3
 8009582:	89bb      	ldrh	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	b29b      	uxth	r3, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	b29b      	uxth	r3, r3
 800958c:	4619      	mov	r1, r3
 800958e:	f7ff fbef 	bl	8008d70 <lcd_matrix_set_pixel>
	for(size_t _x = 0; _x < x_length; _x++)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	3301      	adds	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	429a      	cmp	r2, r3
 800959e:	d3df      	bcc.n	8009560 <lcd_symbol_rect+0x18>
	}

	for(size_t _y = 0; _y < (y_length - 1); _y++)
 80095a0:	2300      	movs	r3, #0
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	e01b      	b.n	80095de <lcd_symbol_rect+0x96>
	{
		lcd_matrix_set_pixel(x, y + _y);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	89bb      	ldrh	r3, [r7, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	89fb      	ldrh	r3, [r7, #14]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fbdb 	bl	8008d70 <lcd_matrix_set_pixel>
		lcd_matrix_set_pixel(x + x_length - 1, y + _y);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	b29a      	uxth	r2, r3
 80095be:	89fb      	ldrh	r3, [r7, #14]
 80095c0:	4413      	add	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b298      	uxth	r0, r3
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	89bb      	ldrh	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4619      	mov	r1, r3
 80095d4:	f7ff fbcc 	bl	8008d70 <lcd_matrix_set_pixel>
	for(size_t _y = 0; _y < (y_length - 1); _y++)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d3de      	bcc.n	80095a6 <lcd_symbol_rect+0x5e>
	}
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <lcd_symbol_rect_filled>:
		lcd_matrix_clear_pixel(x + x_length - 1, y + _y);
	}
}

void lcd_symbol_rect_filled(uint16_t x, uint16_t y, size_t x_length, size_t y_length)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b086      	sub	sp, #24
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60ba      	str	r2, [r7, #8]
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	4603      	mov	r3, r0
 80095fe:	81fb      	strh	r3, [r7, #14]
 8009600:	460b      	mov	r3, r1
 8009602:	81bb      	strh	r3, [r7, #12]
	for(size_t _x = 0; _x < x_length; _x++)
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	e019      	b.n	800963e <lcd_symbol_rect_filled+0x4c>
	{
		for(size_t _y = 0; _y < y_length; _y++)
 800960a:	2300      	movs	r3, #0
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	e00f      	b.n	8009630 <lcd_symbol_rect_filled+0x3e>
		{
			lcd_matrix_set_pixel(x + _x, y + _y);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	b29a      	uxth	r2, r3
 8009614:	89fb      	ldrh	r3, [r7, #14]
 8009616:	4413      	add	r3, r2
 8009618:	b298      	uxth	r0, r3
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	b29a      	uxth	r2, r3
 800961e:	89bb      	ldrh	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	b29b      	uxth	r3, r3
 8009624:	4619      	mov	r1, r3
 8009626:	f7ff fba3 	bl	8008d70 <lcd_matrix_set_pixel>
		for(size_t _y = 0; _y < y_length; _y++)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3301      	adds	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d3eb      	bcc.n	8009610 <lcd_symbol_rect_filled+0x1e>
	for(size_t _x = 0; _x < x_length; _x++)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	d3e1      	bcc.n	800960a <lcd_symbol_rect_filled+0x18>
		}
	}
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <set_symbol_in_matrix>:

// SYMBOL
static void set_symbol_in_matrix(uint16_t x, uint16_t y, uint8_t symbol[LETTER_Y][LETTER_X])
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	603a      	str	r2, [r7, #0]
 800965a:	80fb      	strh	r3, [r7, #6]
 800965c:	460b      	mov	r3, r1
 800965e:	80bb      	strh	r3, [r7, #4]
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e033      	b.n	80096ce <set_symbol_in_matrix+0x7e>
	{
		for(size_t _x = 0; _x < LETTER_X; _x++)
 8009666:	2300      	movs	r3, #0
 8009668:	60bb      	str	r3, [r7, #8]
 800966a:	e02a      	b.n	80096c2 <set_symbol_in_matrix+0x72>
		{
			if(symbol[_y][_x] == 1)
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	4613      	mov	r3, r2
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	4413      	add	r3, r2
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	461a      	mov	r2, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	441a      	add	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4413      	add	r3, r2
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10d      	bne.n	80096a2 <set_symbol_in_matrix+0x52>
			{
				lcd_matrix_set_pixel(x + _x, y + _y);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	b29a      	uxth	r2, r3
 800968a:	88fb      	ldrh	r3, [r7, #6]
 800968c:	4413      	add	r3, r2
 800968e:	b298      	uxth	r0, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	b29a      	uxth	r2, r3
 8009694:	88bb      	ldrh	r3, [r7, #4]
 8009696:	4413      	add	r3, r2
 8009698:	b29b      	uxth	r3, r3
 800969a:	4619      	mov	r1, r3
 800969c:	f7ff fb68 	bl	8008d70 <lcd_matrix_set_pixel>
 80096a0:	e00c      	b.n	80096bc <set_symbol_in_matrix+0x6c>
			}
			else
			{
				lcd_matrix_clear_pixel(x + _x, y + _y);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	88fb      	ldrh	r3, [r7, #6]
 80096a8:	4413      	add	r3, r2
 80096aa:	b298      	uxth	r0, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	88bb      	ldrh	r3, [r7, #4]
 80096b2:	4413      	add	r3, r2
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4619      	mov	r1, r3
 80096b8:	f7ff fb98 	bl	8008dec <lcd_matrix_clear_pixel>
		for(size_t _x = 0; _x < LETTER_X; _x++)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	3301      	adds	r3, #1
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b05      	cmp	r3, #5
 80096c6:	d9d1      	bls.n	800966c <set_symbol_in_matrix+0x1c>
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b07      	cmp	r3, #7
 80096d2:	d9c8      	bls.n	8009666 <set_symbol_in_matrix+0x16>
			}
		}
	}
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <get_symbol>:

static uint8_t get_symbol(uint8_t tmp[][LETTER_X], char data)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
	if((data >= 'A') && (data <= 'Z'))
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	2b40      	cmp	r3, #64	; 0x40
 80096f0:	d911      	bls.n	8009716 <get_symbol+0x36>
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	2b5a      	cmp	r3, #90	; 0x5a
 80096f6:	d80e      	bhi.n	8009716 <get_symbol+0x36>
	{
		memcpy(tmp, &custom_char_upper[data - 'A'][0][0], LETTER_Y * LETTER_X);
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	4a37      	ldr	r2, [pc, #220]	; (80097e4 <get_symbol+0x104>)
 8009708:	4413      	add	r3, r2
 800970a:	2230      	movs	r2, #48	; 0x30
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f007 fcf0 	bl	80110f4 <memcpy>
 8009714:	e061      	b.n	80097da <get_symbol+0xfa>
	}
	else if((data >= 'a') && (data <= 'z'))
 8009716:	78fb      	ldrb	r3, [r7, #3]
 8009718:	2b60      	cmp	r3, #96	; 0x60
 800971a:	d911      	bls.n	8009740 <get_symbol+0x60>
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	2b7a      	cmp	r3, #122	; 0x7a
 8009720:	d80e      	bhi.n	8009740 <get_symbol+0x60>
	{
		memcpy(tmp, &custom_char_lower[data - 'a'][0][0], LETTER_Y * LETTER_X);
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009728:	4613      	mov	r3, r2
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	4a2d      	ldr	r2, [pc, #180]	; (80097e8 <get_symbol+0x108>)
 8009732:	4413      	add	r3, r2
 8009734:	2230      	movs	r2, #48	; 0x30
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f007 fcdb 	bl	80110f4 <memcpy>
 800973e:	e04c      	b.n	80097da <get_symbol+0xfa>
	}
	else if((data >= '0') && (data <= '9'))
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	2b2f      	cmp	r3, #47	; 0x2f
 8009744:	d911      	bls.n	800976a <get_symbol+0x8a>
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	2b39      	cmp	r3, #57	; 0x39
 800974a:	d80e      	bhi.n	800976a <get_symbol+0x8a>
	{
		memcpy(tmp, &custom_nmb[data - '0'][0][0], LETTER_Y * LETTER_X);
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009752:	4613      	mov	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	4413      	add	r3, r2
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	4a24      	ldr	r2, [pc, #144]	; (80097ec <get_symbol+0x10c>)
 800975c:	4413      	add	r3, r2
 800975e:	2230      	movs	r2, #48	; 0x30
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f007 fcc6 	bl	80110f4 <memcpy>
 8009768:	e037      	b.n	80097da <get_symbol+0xfa>
	}
	else if(data == '.')
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	2b2e      	cmp	r3, #46	; 0x2e
 800976e:	d105      	bne.n	800977c <get_symbol+0x9c>
	{
		memcpy(tmp, &custom_symbol[SYMBOL_PUNKT][0][0], LETTER_Y * LETTER_X);
 8009770:	2230      	movs	r2, #48	; 0x30
 8009772:	491f      	ldr	r1, [pc, #124]	; (80097f0 <get_symbol+0x110>)
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f007 fcbd 	bl	80110f4 <memcpy>
 800977a:	e02e      	b.n	80097da <get_symbol+0xfa>
	}
	else if(data == ':')
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	2b3a      	cmp	r3, #58	; 0x3a
 8009780:	d105      	bne.n	800978e <get_symbol+0xae>
	{
		memcpy(tmp, &custom_symbol[SYMBOL_DOPPELPUNKT][0][0], LETTER_Y * LETTER_X);
 8009782:	2230      	movs	r2, #48	; 0x30
 8009784:	491b      	ldr	r1, [pc, #108]	; (80097f4 <get_symbol+0x114>)
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f007 fcb4 	bl	80110f4 <memcpy>
 800978c:	e025      	b.n	80097da <get_symbol+0xfa>
	}
//	else if(data == ' ')
//	{
//		;
//	}
	else if(data == 0xB0)	// '°'
 800978e:	78fb      	ldrb	r3, [r7, #3]
 8009790:	2bb0      	cmp	r3, #176	; 0xb0
 8009792:	d105      	bne.n	80097a0 <get_symbol+0xc0>
	{
		memcpy(tmp, &custom_symbol[SYM_DEGREE][0][0], LETTER_Y * LETTER_X);
 8009794:	2230      	movs	r2, #48	; 0x30
 8009796:	4918      	ldr	r1, [pc, #96]	; (80097f8 <get_symbol+0x118>)
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f007 fcab 	bl	80110f4 <memcpy>
 800979e:	e01c      	b.n	80097da <get_symbol+0xfa>
	}
	else if(data == '[')
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	2b5b      	cmp	r3, #91	; 0x5b
 80097a4:	d105      	bne.n	80097b2 <get_symbol+0xd2>
	{
		memcpy(tmp, &custom_symbol[SYM_SQUARE_BRACKETS_LEFT][0][0], LETTER_Y * LETTER_X);
 80097a6:	2230      	movs	r2, #48	; 0x30
 80097a8:	4914      	ldr	r1, [pc, #80]	; (80097fc <get_symbol+0x11c>)
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f007 fca2 	bl	80110f4 <memcpy>
 80097b0:	e013      	b.n	80097da <get_symbol+0xfa>
	}
	else if(data == ']')
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	2b5d      	cmp	r3, #93	; 0x5d
 80097b6:	d105      	bne.n	80097c4 <get_symbol+0xe4>
	{
		memcpy(tmp, &custom_symbol[SYM_SQUARE_BRACKETS_RIGHT][0][0], LETTER_Y * LETTER_X);
 80097b8:	2230      	movs	r2, #48	; 0x30
 80097ba:	4911      	ldr	r1, [pc, #68]	; (8009800 <get_symbol+0x120>)
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f007 fc99 	bl	80110f4 <memcpy>
 80097c2:	e00a      	b.n	80097da <get_symbol+0xfa>
	}
	else if(data == '-')
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	2b2d      	cmp	r3, #45	; 0x2d
 80097c8:	d105      	bne.n	80097d6 <get_symbol+0xf6>
	{
		memcpy(tmp, &custom_symbol[SYM_HYPHEN][0][0], LETTER_Y * LETTER_X);
 80097ca:	2230      	movs	r2, #48	; 0x30
 80097cc:	490d      	ldr	r1, [pc, #52]	; (8009804 <get_symbol+0x124>)
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f007 fc90 	bl	80110f4 <memcpy>
 80097d4:	e001      	b.n	80097da <get_symbol+0xfa>
	}
	else
	{
		// got no symbol
		return 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e000      	b.n	80097dc <get_symbol+0xfc>
	}

	return 1;
 80097da:	2301      	movs	r3, #1
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	08014224 	.word	0x08014224
 80097e8:	08014704 	.word	0x08014704
 80097ec:	08014be4 	.word	0x08014be4
 80097f0:	08014dc4 	.word	0x08014dc4
 80097f4:	08014df4 	.word	0x08014df4
 80097f8:	08014e84 	.word	0x08014e84
 80097fc:	08014e24 	.word	0x08014e24
 8009800:	08014e54 	.word	0x08014e54
 8009804:	08014f74 	.word	0x08014f74

08009808 <set_char_in_matrix>:

static void set_char_in_matrix(uint16_t x, uint16_t y, char data)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08e      	sub	sp, #56	; 0x38
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	80fb      	strh	r3, [r7, #6]
 8009812:	460b      	mov	r3, r1
 8009814:	80bb      	strh	r3, [r7, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp[LETTER_Y][LETTER_X] = {0};
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	2230      	movs	r2, #48	; 0x30
 8009820:	2100      	movs	r1, #0
 8009822:	4618      	mov	r0, r3
 8009824:	f007 fc8e 	bl	8011144 <memset>

	if(get_symbol(tmp, data))
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ff55 	bl	80096e0 <get_symbol>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d006      	beq.n	800984a <set_char_in_matrix+0x42>
	{
		set_symbol_in_matrix(x, y, tmp);
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	88b9      	ldrh	r1, [r7, #4]
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff ff03 	bl	8009650 <set_symbol_in_matrix>
	}
}
 800984a:	bf00      	nop
 800984c:	3738      	adds	r7, #56	; 0x38
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <set_symbol_in_matrix_inv>:

static void set_symbol_in_matrix_inv(uint16_t x, uint16_t y, uint8_t symbol[LETTER_Y][LETTER_X])
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	4603      	mov	r3, r0
 800985a:	603a      	str	r2, [r7, #0]
 800985c:	80fb      	strh	r3, [r7, #6]
 800985e:	460b      	mov	r3, r1
 8009860:	80bb      	strh	r3, [r7, #4]
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	e033      	b.n	80098d0 <set_symbol_in_matrix_inv+0x7e>
	{
		for(size_t _x = 0; _x < LETTER_X; _x++)
 8009868:	2300      	movs	r3, #0
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	e02a      	b.n	80098c4 <set_symbol_in_matrix_inv+0x72>
		{
			if(symbol[_y][_x] == 0)
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4613      	mov	r3, r2
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	4413      	add	r3, r2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	461a      	mov	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	441a      	add	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	4413      	add	r3, r2
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10d      	bne.n	80098a4 <set_symbol_in_matrix_inv+0x52>
			{
				lcd_matrix_set_pixel(x + _x, y + _y);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	b29a      	uxth	r2, r3
 800988c:	88fb      	ldrh	r3, [r7, #6]
 800988e:	4413      	add	r3, r2
 8009890:	b298      	uxth	r0, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	b29a      	uxth	r2, r3
 8009896:	88bb      	ldrh	r3, [r7, #4]
 8009898:	4413      	add	r3, r2
 800989a:	b29b      	uxth	r3, r3
 800989c:	4619      	mov	r1, r3
 800989e:	f7ff fa67 	bl	8008d70 <lcd_matrix_set_pixel>
 80098a2:	e00c      	b.n	80098be <set_symbol_in_matrix_inv+0x6c>
			}
			else
			{
				lcd_matrix_clear_pixel(x + _x, y + _y);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	4413      	add	r3, r2
 80098ac:	b298      	uxth	r0, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	88bb      	ldrh	r3, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7ff fa97 	bl	8008dec <lcd_matrix_clear_pixel>
		for(size_t _x = 0; _x < LETTER_X; _x++)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	3301      	adds	r3, #1
 80098c2:	60bb      	str	r3, [r7, #8]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b05      	cmp	r3, #5
 80098c8:	d9d1      	bls.n	800986e <set_symbol_in_matrix_inv+0x1c>
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b07      	cmp	r3, #7
 80098d4:	d9c8      	bls.n	8009868 <set_symbol_in_matrix_inv+0x16>
			}
		}
	}
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <set_char_in_matrix_inv>:

static void set_char_in_matrix_inv(uint16_t x, uint16_t y, char data)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08e      	sub	sp, #56	; 0x38
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	80fb      	strh	r3, [r7, #6]
 80098ea:	460b      	mov	r3, r1
 80098ec:	80bb      	strh	r3, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp[LETTER_Y][LETTER_X] = {0};
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	2230      	movs	r2, #48	; 0x30
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f007 fc22 	bl	8011144 <memset>

	if(get_symbol(tmp, data))
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fee9 	bl	80096e0 <get_symbol>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <set_char_in_matrix_inv+0x42>
	{
		set_symbol_in_matrix_inv(x, y, tmp);
 8009914:	f107 0208 	add.w	r2, r7, #8
 8009918:	88b9      	ldrh	r1, [r7, #4]
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ff98 	bl	8009852 <set_symbol_in_matrix_inv>
	}
}
 8009922:	bf00      	nop
 8009924:	3738      	adds	r7, #56	; 0x38
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <lcd_symbol_string>:

void lcd_symbol_string(uint16_t x, uint16_t y, char* string)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	4603      	mov	r3, r0
 8009932:	603a      	str	r2, [r7, #0]
 8009934:	80fb      	strh	r3, [r7, #6]
 8009936:	460b      	mov	r3, r1
 8009938:	80bb      	strh	r3, [r7, #4]
	while(*string)
 800993a:	e00b      	b.n	8009954 <lcd_symbol_string+0x2a>
	{
		set_char_in_matrix(x, y, *string++);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	603a      	str	r2, [r7, #0]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	88b9      	ldrh	r1, [r7, #4]
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff ff5d 	bl	8009808 <set_char_in_matrix>
		x += LETTER_X;
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	3306      	adds	r3, #6
 8009952:	80fb      	strh	r3, [r7, #6]
	while(*string)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1ef      	bne.n	800993c <lcd_symbol_string+0x12>
	}
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <lcd_symbol_string_inv>:

void lcd_symbol_string_inv(uint16_t x, uint16_t y, char* string)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	4603      	mov	r3, r0
 800996e:	603a      	str	r2, [r7, #0]
 8009970:	80fb      	strh	r3, [r7, #6]
 8009972:	460b      	mov	r3, r1
 8009974:	80bb      	strh	r3, [r7, #4]
	while(*string)
 8009976:	e00b      	b.n	8009990 <lcd_symbol_string_inv+0x2a>
	{
		set_char_in_matrix_inv(x, y, *string++);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	603a      	str	r2, [r7, #0]
 800997e:	781a      	ldrb	r2, [r3, #0]
 8009980:	88b9      	ldrh	r1, [r7, #4]
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff ffab 	bl	80098e0 <set_char_in_matrix_inv>
		x += LETTER_X;
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	3306      	adds	r3, #6
 800998e:	80fb      	strh	r3, [r7, #6]
	while(*string)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1ef      	bne.n	8009978 <lcd_symbol_string_inv+0x12>
	}
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <lcd_symbol_symb>:

/*
 * SYMBOL
 */
void lcd_symbol_symb(uint16_t x, uint16_t y, uint8_t index)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
 80099ae:	460b      	mov	r3, r1
 80099b0:	80bb      	strh	r3, [r7, #4]
 80099b2:	4613      	mov	r3, r2
 80099b4:	70fb      	strb	r3, [r7, #3]
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	e039      	b.n	8009a30 <lcd_symbol_symb+0x8c>
	{
		for(size_t _x = 0; _x < LETTER_X; _x++)
 80099bc:	2300      	movs	r3, #0
 80099be:	60bb      	str	r3, [r7, #8]
 80099c0:	e030      	b.n	8009a24 <lcd_symbol_symb+0x80>
		{
			if(custom_symbol[index][_y][_x] == 1)
 80099c2:	78f9      	ldrb	r1, [r7, #3]
 80099c4:	481e      	ldr	r0, [pc, #120]	; (8009a40 <lcd_symbol_symb+0x9c>)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	461a      	mov	r2, r3
 80099ca:	0052      	lsls	r2, r2, #1
 80099cc:	441a      	add	r2, r3
 80099ce:	0053      	lsls	r3, r2, #1
 80099d0:	461a      	mov	r2, r3
 80099d2:	460b      	mov	r3, r1
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	440b      	add	r3, r1
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	4413      	add	r3, r2
 80099dc:	18c2      	adds	r2, r0, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d10d      	bne.n	8009a04 <lcd_symbol_symb+0x60>
			{
				lcd_matrix_set_pixel(x + _x, y + _y);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	88fb      	ldrh	r3, [r7, #6]
 80099ee:	4413      	add	r3, r2
 80099f0:	b298      	uxth	r0, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	88bb      	ldrh	r3, [r7, #4]
 80099f8:	4413      	add	r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	4619      	mov	r1, r3
 80099fe:	f7ff f9b7 	bl	8008d70 <lcd_matrix_set_pixel>
 8009a02:	e00c      	b.n	8009a1e <lcd_symbol_symb+0x7a>
			}
			else
			{
				lcd_matrix_clear_pixel(x + _x, y + _y);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	b298      	uxth	r0, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	88bb      	ldrh	r3, [r7, #4]
 8009a14:	4413      	add	r3, r2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f7ff f9e7 	bl	8008dec <lcd_matrix_clear_pixel>
		for(size_t _x = 0; _x < LETTER_X; _x++)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60bb      	str	r3, [r7, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d9cb      	bls.n	80099c2 <lcd_symbol_symb+0x1e>
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b07      	cmp	r3, #7
 8009a34:	d9c2      	bls.n	80099bc <lcd_symbol_symb+0x18>
			}
		}
	}
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	08014dc4 	.word	0x08014dc4

08009a44 <lcd_symbol_symb_clear>:
		}
	}
}

void lcd_symbol_symb_clear(uint16_t x, uint16_t y)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	460a      	mov	r2, r1
 8009a4e:	80fb      	strh	r3, [r7, #6]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80bb      	strh	r3, [r7, #4]
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e018      	b.n	8009a8c <lcd_symbol_symb_clear+0x48>
	{
		for(size_t _x = 0; _x < LETTER_X; _x++)
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60bb      	str	r3, [r7, #8]
 8009a5e:	e00f      	b.n	8009a80 <lcd_symbol_symb_clear+0x3c>
		{
			lcd_matrix_clear_pixel(x + _x, y + _y);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	4413      	add	r3, r2
 8009a68:	b298      	uxth	r0, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	88bb      	ldrh	r3, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	4619      	mov	r1, r3
 8009a76:	f7ff f9b9 	bl	8008dec <lcd_matrix_clear_pixel>
		for(size_t _x = 0; _x < LETTER_X; _x++)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	60bb      	str	r3, [r7, #8]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d9ec      	bls.n	8009a60 <lcd_symbol_symb_clear+0x1c>
	for(size_t _y = 0; _y < LETTER_Y; _y++)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	d9e3      	bls.n	8009a5a <lcd_symbol_symb_clear+0x16>
		}
	}
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <lcd_time_draw_time>:
#include "lcd_matrix.h"
#include "lcd_symbol.h"


static void lcd_time_draw_time(uint8_t hour, uint8_t min, uint8_t sec, uint8_t msec)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4623      	mov	r3, r4
 8009aac:	71fb      	strb	r3, [r7, #7]
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71bb      	strb	r3, [r7, #6]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	717b      	strb	r3, [r7, #5]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	713b      	strb	r3, [r7, #4]
	// 10 chars + 1 char for null terminated
	char tmp[11] = {0};
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	f107 0310 	add.w	r3, r7, #16
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	f8c3 2003 	str.w	r2, [r3, #3]

	tmp[0] = hour / 10 + '0';
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	4a31      	ldr	r2, [pc, #196]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	3330      	adds	r3, #48	; 0x30
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	733b      	strb	r3, [r7, #12]
	tmp[1] = hour % 10 + '0';
 8009adc:	79fa      	ldrb	r2, [r7, #7]
 8009ade:	4b2d      	ldr	r3, [pc, #180]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae4:	08d9      	lsrs	r1, r3, #3
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	3330      	adds	r3, #48	; 0x30
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	737b      	strb	r3, [r7, #13]
	tmp[2] = ':';
 8009af8:	233a      	movs	r3, #58	; 0x3a
 8009afa:	73bb      	strb	r3, [r7, #14]

	tmp[3] = min / 10 + '0';
 8009afc:	79bb      	ldrb	r3, [r7, #6]
 8009afe:	4a25      	ldr	r2, [pc, #148]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009b00:	fba2 2303 	umull	r2, r3, r2, r3
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	3330      	adds	r3, #48	; 0x30
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	73fb      	strb	r3, [r7, #15]
	tmp[4] = min % 10 + '0';
 8009b0e:	79ba      	ldrb	r2, [r7, #6]
 8009b10:	4b20      	ldr	r3, [pc, #128]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009b12:	fba3 1302 	umull	r1, r3, r3, r2
 8009b16:	08d9      	lsrs	r1, r3, #3
 8009b18:	460b      	mov	r3, r1
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	3330      	adds	r3, #48	; 0x30
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	743b      	strb	r3, [r7, #16]
	tmp[5] = ':';
 8009b2a:	233a      	movs	r3, #58	; 0x3a
 8009b2c:	747b      	strb	r3, [r7, #17]

	tmp[6] = sec / 10 + '0';
 8009b2e:	797b      	ldrb	r3, [r7, #5]
 8009b30:	4a18      	ldr	r2, [pc, #96]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	08db      	lsrs	r3, r3, #3
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	3330      	adds	r3, #48	; 0x30
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	74bb      	strb	r3, [r7, #18]
	tmp[7] = sec % 10 + '0';
 8009b40:	797a      	ldrb	r2, [r7, #5]
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009b44:	fba3 1302 	umull	r1, r3, r3, r2
 8009b48:	08d9      	lsrs	r1, r3, #3
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	440b      	add	r3, r1
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	3330      	adds	r3, #48	; 0x30
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	74fb      	strb	r3, [r7, #19]
	tmp[8] = '.';
 8009b5c:	232e      	movs	r3, #46	; 0x2e
 8009b5e:	753b      	strb	r3, [r7, #20]

	tmp[9] = msec % 10 + '0';
 8009b60:	793a      	ldrb	r2, [r7, #4]
 8009b62:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <lcd_time_draw_time+0xf8>)
 8009b64:	fba3 1302 	umull	r1, r3, r3, r2
 8009b68:	08d9      	lsrs	r1, r3, #3
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	3330      	adds	r3, #48	; 0x30
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	757b      	strb	r3, [r7, #21]

	lcd_symbol_string(HEAD_TIME_X, HEAD_TIME_Y, tmp);
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	461a      	mov	r2, r3
 8009b82:	2102      	movs	r1, #2
 8009b84:	20b4      	movs	r0, #180	; 0xb4
 8009b86:	f7ff fed0 	bl	800992a <lcd_symbol_string>
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd90      	pop	{r4, r7, pc}
 8009b92:	bf00      	nop
 8009b94:	cccccccd 	.word	0xcccccccd

08009b98 <lcd_time_draw>:

void lcd_time_draw(void)
{
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	clock_reset();
 8009b9c:	f006 f888 	bl	800fcb0 <clock_reset>
	lcd_time_draw_time(clock_get_hour(), clock_get_min(), clock_get_sec(), clock_get_msec());
 8009ba0:	f006 f8c0 	bl	800fd24 <clock_get_hour>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	461c      	mov	r4, r3
 8009ba8:	f006 f8b0 	bl	800fd0c <clock_get_min>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461d      	mov	r5, r3
 8009bb0:	f006 f8a0 	bl	800fcf4 <clock_get_sec>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461e      	mov	r6, r3
 8009bb8:	f006 f890 	bl	800fcdc <clock_get_msec>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7ff ff6a 	bl	8009a9c <lcd_time_draw_time>
	lcd_matrix_update(HEAD_TIME_X, 0, HEAD_TIME_LENGTH_X, HEAD_TIME_LENGTH_Y);
 8009bc8:	2308      	movs	r3, #8
 8009bca:	223c      	movs	r2, #60	; 0x3c
 8009bcc:	2100      	movs	r1, #0
 8009bce:	20b4      	movs	r0, #180	; 0xb4
 8009bd0:	f7ff f94c 	bl	8008e6c <lcd_matrix_update>
}
 8009bd4:	bf00      	nop
 8009bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bd8 <lcd_time_update>:

void lcd_time_update(void)
{
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	af00      	add	r7, sp, #0
	lcd_time_draw_time(clock_get_hour(), clock_get_min(), clock_get_sec(), clock_get_msec());
 8009bdc:	f006 f8a2 	bl	800fd24 <clock_get_hour>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461c      	mov	r4, r3
 8009be4:	f006 f892 	bl	800fd0c <clock_get_min>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461d      	mov	r5, r3
 8009bec:	f006 f882 	bl	800fcf4 <clock_get_sec>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461e      	mov	r6, r3
 8009bf4:	f006 f872 	bl	800fcdc <clock_get_msec>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7ff ff4c 	bl	8009a9c <lcd_time_draw_time>
	lcd_matrix_update(HEAD_TIME_X, 0, HEAD_TIME_LENGTH_X, HEAD_TIME_LENGTH_Y);
 8009c04:	2308      	movs	r3, #8
 8009c06:	223c      	movs	r2, #60	; 0x3c
 8009c08:	2100      	movs	r1, #0
 8009c0a:	20b4      	movs	r0, #180	; 0xb4
 8009c0c:	f7ff f92e 	bl	8008e6c <lcd_matrix_update>
}
 8009c10:	bf00      	nop
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c14 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009c14:	b590      	push	{r4, r7, lr}
 8009c16:	b089      	sub	sp, #36	; 0x24
 8009c18:	af04      	add	r7, sp, #16
 8009c1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c22:	7919      	ldrb	r1, [r3, #4]
 8009c24:	2350      	movs	r3, #80	; 0x50
 8009c26:	2206      	movs	r2, #6
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 fc53 	bl	800b4d4 <USBH_FindInterface>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2bff      	cmp	r3, #255	; 0xff
 8009c36:	d002      	beq.n	8009c3e <USBH_MSC_InterfaceInit+0x2a>
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d901      	bls.n	8009c42 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e0ef      	b.n	8009e22 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fc28 	bl	800b49c <USBH_SelectInterface>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009c56:	2302      	movs	r3, #2
 8009c58:	e0e3      	b.n	8009e22 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c64:	f007 fa36 	bl	80110d4 <malloc>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e0d0      	b.n	8009e22 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c84:	2100      	movs	r1, #0
 8009c86:	68b8      	ldr	r0, [r7, #8]
 8009c88:	f007 fa5c 	bl	8011144 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	211a      	movs	r1, #26
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b25b      	sxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da16      	bge.n	8009cd2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	211a      	movs	r1, #26
 8009caa:	fb01 f303 	mul.w	r3, r1, r3
 8009cae:	4413      	add	r3, r2
 8009cb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cb4:	781a      	ldrb	r2, [r3, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	211a      	movs	r1, #26
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cca:	881a      	ldrh	r2, [r3, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	815a      	strh	r2, [r3, #10]
 8009cd0:	e015      	b.n	8009cfe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	211a      	movs	r1, #26
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	4413      	add	r3, r2
 8009cde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	211a      	movs	r1, #26
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cf8:	881a      	ldrh	r2, [r3, #0]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	211a      	movs	r1, #26
 8009d04:	fb01 f303 	mul.w	r3, r1, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da16      	bge.n	8009d44 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	211a      	movs	r1, #26
 8009d1c:	fb01 f303 	mul.w	r3, r1, r3
 8009d20:	4413      	add	r3, r2
 8009d22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	211a      	movs	r1, #26
 8009d32:	fb01 f303 	mul.w	r3, r1, r3
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	815a      	strh	r2, [r3, #10]
 8009d42:	e015      	b.n	8009d70 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	211a      	movs	r1, #26
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d54:	781a      	ldrb	r2, [r3, #0]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	211a      	movs	r1, #26
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d6a:	881a      	ldrh	r2, [r3, #0]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2200      	movs	r2, #0
 8009d74:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	799b      	ldrb	r3, [r3, #6]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f002 fdc4 	bl	800c916 <USBH_AllocPipe>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	79db      	ldrb	r3, [r3, #7]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f002 fdba 	bl	800c916 <USBH_AllocPipe>
 8009da2:	4603      	mov	r3, r0
 8009da4:	461a      	mov	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fdac 	bl	800a908 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	7959      	ldrb	r1, [r3, #5]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	7998      	ldrb	r0, [r3, #6]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	8912      	ldrh	r2, [r2, #8]
 8009dc8:	9202      	str	r2, [sp, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	9201      	str	r2, [sp, #4]
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f002 fd6f 	bl	800c8b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	7919      	ldrb	r1, [r3, #4]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	79d8      	ldrb	r0, [r3, #7]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	8952      	ldrh	r2, [r2, #10]
 8009df2:	9202      	str	r2, [sp, #8]
 8009df4:	2202      	movs	r2, #2
 8009df6:	9201      	str	r2, [sp, #4]
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	4623      	mov	r3, r4
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f002 fd5a 	bl	800c8b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	791b      	ldrb	r3, [r3, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f007 f883 	bl	8010f18 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	2200      	movs	r2, #0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f007 f87c 	bl	8010f18 <USBH_LL_SetToggle>

  return USBH_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd90      	pop	{r4, r7, pc}

08009e2a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	795b      	ldrb	r3, [r3, #5]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00e      	beq.n	8009e62 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	795b      	ldrb	r3, [r3, #5]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 fd53 	bl	800c8f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	795b      	ldrb	r3, [r3, #5]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f002 fd7e 	bl	800c958 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	791b      	ldrb	r3, [r3, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00e      	beq.n	8009e88 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	791b      	ldrb	r3, [r3, #4]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f002 fd40 	bl	800c8f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f002 fd6b 	bl	800c958 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f007 f921 	bl	80110e4 <free>
    phost->pActiveClass->pData = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	7b9b      	ldrb	r3, [r3, #14]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d041      	beq.n	8009f58 <USBH_MSC_ClassRequest+0xa2>
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	dc4b      	bgt.n	8009f70 <USBH_MSC_ClassRequest+0xba>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <USBH_MSC_ClassRequest+0x2a>
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d147      	bne.n	8009f70 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fcf0 	bl	800a8ca <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d104      	bne.n	8009efe <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d137      	bne.n	8009f74 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d804      	bhi.n	8009f16 <USBH_MSC_ClassRequest+0x60>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	e000      	b.n	8009f18 <USBH_MSC_ClassRequest+0x62>
 8009f16:	2202      	movs	r2, #2
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73bb      	strb	r3, [r7, #14]
 8009f20:	e014      	b.n	8009f4c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	2134      	movs	r1, #52	; 0x34
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	3392      	adds	r3, #146	; 0x92
 8009f30:	2202      	movs	r2, #2
 8009f32:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	2134      	movs	r1, #52	; 0x34
 8009f3a:	fb01 f303 	mul.w	r3, r1, r3
 8009f3e:	4413      	add	r3, r2
 8009f40:	33c1      	adds	r3, #193	; 0xc1
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	73bb      	strb	r3, [r7, #14]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	7bba      	ldrb	r2, [r7, #14]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d3e5      	bcc.n	8009f22 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009f56:	e00d      	b.n	8009f74 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f002 f87b 	bl	800c056 <USBH_ClrFeature>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d108      	bne.n	8009f78 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	7bda      	ldrb	r2, [r3, #15]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009f6e:	e003      	b.n	8009f78 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009f70:	bf00      	nop
 8009f72:	e002      	b.n	8009f7a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009f78:	bf00      	nop
  }

  return status;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009f96:	2301      	movs	r3, #1
 8009f98:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	7b1b      	ldrb	r3, [r3, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <USBH_MSC_Process+0x2e>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	f000 8271 	beq.w	800a492 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009fb0:	e272      	b.n	800a498 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	f080 824f 	bcs.w	800a462 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fca:	4619      	mov	r1, r3
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	2334      	movs	r3, #52	; 0x34
 8009fd0:	fb03 f301 	mul.w	r3, r3, r1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	3391      	adds	r3, #145	; 0x91
 8009fd8:	2201      	movs	r2, #1
 8009fda:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	2334      	movs	r3, #52	; 0x34
 8009fe8:	fb03 f301 	mul.w	r3, r3, r1
 8009fec:	4413      	add	r3, r2
 8009fee:	3390      	adds	r3, #144	; 0x90
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	f200 8243 	bhi.w	800a47e <USBH_MSC_Process+0x4fa>
 8009ff8:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <USBH_MSC_Process+0x7c>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a47f 	.word	0x0800a47f
 800a008:	0800a0ed 	.word	0x0800a0ed
 800a00c:	0800a271 	.word	0x0800a271
 800a010:	0800a04b 	.word	0x0800a04b
 800a014:	0800a33d 	.word	0x0800a33d
 800a018:	0800a47f 	.word	0x0800a47f
 800a01c:	0800a47f 	.word	0x0800a47f
 800a020:	0800a451 	.word	0x0800a451
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a02a:	4619      	mov	r1, r3
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	2334      	movs	r3, #52	; 0x34
 800a030:	fb03 f301 	mul.w	r3, r3, r1
 800a034:	4413      	add	r3, r2
 800a036:	3390      	adds	r3, #144	; 0x90
 800a038:	2204      	movs	r2, #4
 800a03a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a048:	e222      	b.n	800a490 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a050:	b2d9      	uxtb	r1, r3
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a058:	461a      	mov	r2, r3
 800a05a:	2334      	movs	r3, #52	; 0x34
 800a05c:	fb03 f302 	mul.w	r3, r3, r2
 800a060:	3398      	adds	r3, #152	; 0x98
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	4413      	add	r3, r2
 800a066:	3307      	adds	r3, #7
 800a068:	461a      	mov	r2, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 ff6a 	bl	800af44 <USBH_MSC_SCSI_Inquiry>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a080:	4619      	mov	r1, r3
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	2334      	movs	r3, #52	; 0x34
 800a086:	fb03 f301 	mul.w	r3, r3, r1
 800a08a:	4413      	add	r3, r2
 800a08c:	3390      	adds	r3, #144	; 0x90
 800a08e:	2202      	movs	r2, #2
 800a090:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d10c      	bne.n	800a0b2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09e:	4619      	mov	r1, r3
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	2334      	movs	r3, #52	; 0x34
 800a0a4:	fb03 f301 	mul.w	r3, r3, r1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	3390      	adds	r3, #144	; 0x90
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	701a      	strb	r2, [r3, #0]
            break;
 800a0b0:	e1e7      	b.n	800a482 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	f040 81e4 	bne.w	800a482 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	2334      	movs	r3, #52	; 0x34
 800a0c6:	fb03 f301 	mul.w	r3, r3, r1
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3390      	adds	r3, #144	; 0x90
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0d8:	4619      	mov	r1, r3
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	2334      	movs	r3, #52	; 0x34
 800a0de:	fb03 f301 	mul.w	r3, r3, r1
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3391      	adds	r3, #145	; 0x91
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	701a      	strb	r2, [r3, #0]
            break;
 800a0ea:	e1ca      	b.n	800a482 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fe66 	bl	800adc8 <USBH_MSC_SCSI_TestUnitReady>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d149      	bne.n	800a19a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a10c:	4619      	mov	r1, r3
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	2334      	movs	r3, #52	; 0x34
 800a112:	fb03 f301 	mul.w	r3, r3, r1
 800a116:	4413      	add	r3, r2
 800a118:	3392      	adds	r3, #146	; 0x92
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a126:	4619      	mov	r1, r3
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	2334      	movs	r3, #52	; 0x34
 800a12c:	fb03 f301 	mul.w	r3, r3, r1
 800a130:	4413      	add	r3, r2
 800a132:	33c1      	adds	r3, #193	; 0xc1
 800a134:	2201      	movs	r2, #1
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e00b      	b.n	800a152 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a140:	4619      	mov	r1, r3
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	2334      	movs	r3, #52	; 0x34
 800a146:	fb03 f301 	mul.w	r3, r3, r1
 800a14a:	4413      	add	r3, r2
 800a14c:	33c1      	adds	r3, #193	; 0xc1
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a158:	4619      	mov	r1, r3
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	2334      	movs	r3, #52	; 0x34
 800a15e:	fb03 f301 	mul.w	r3, r3, r1
 800a162:	4413      	add	r3, r2
 800a164:	3390      	adds	r3, #144	; 0x90
 800a166:	2203      	movs	r2, #3
 800a168:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a170:	4619      	mov	r1, r3
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	2334      	movs	r3, #52	; 0x34
 800a176:	fb03 f301 	mul.w	r3, r3, r1
 800a17a:	4413      	add	r3, r2
 800a17c:	3391      	adds	r3, #145	; 0x91
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a188:	4619      	mov	r1, r3
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	2334      	movs	r3, #52	; 0x34
 800a18e:	fb03 f301 	mul.w	r3, r3, r1
 800a192:	4413      	add	r3, r2
 800a194:	3392      	adds	r3, #146	; 0x92
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d14a      	bne.n	800a236 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	2334      	movs	r3, #52	; 0x34
 800a1ac:	fb03 f301 	mul.w	r3, r3, r1
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3392      	adds	r3, #146	; 0x92
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d00c      	beq.n	800a1d4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	2334      	movs	r3, #52	; 0x34
 800a1c6:	fb03 f301 	mul.w	r3, r3, r1
 800a1ca:	4413      	add	r3, r2
 800a1cc:	33c1      	adds	r3, #193	; 0xc1
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e00b      	b.n	800a1ec <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1da:	4619      	mov	r1, r3
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	2334      	movs	r3, #52	; 0x34
 800a1e0:	fb03 f301 	mul.w	r3, r3, r1
 800a1e4:	4413      	add	r3, r2
 800a1e6:	33c1      	adds	r3, #193	; 0xc1
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	2334      	movs	r3, #52	; 0x34
 800a1f8:	fb03 f301 	mul.w	r3, r3, r1
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3390      	adds	r3, #144	; 0x90
 800a200:	2205      	movs	r2, #5
 800a202:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a20a:	4619      	mov	r1, r3
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	2334      	movs	r3, #52	; 0x34
 800a210:	fb03 f301 	mul.w	r3, r3, r1
 800a214:	4413      	add	r3, r2
 800a216:	3391      	adds	r3, #145	; 0x91
 800a218:	2201      	movs	r2, #1
 800a21a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a222:	4619      	mov	r1, r3
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	2334      	movs	r3, #52	; 0x34
 800a228:	fb03 f301 	mul.w	r3, r3, r1
 800a22c:	4413      	add	r3, r2
 800a22e:	3392      	adds	r3, #146	; 0x92
 800a230:	2202      	movs	r2, #2
 800a232:	701a      	strb	r2, [r3, #0]
            break;
 800a234:	e127      	b.n	800a486 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b04      	cmp	r3, #4
 800a23a:	f040 8124 	bne.w	800a486 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a244:	4619      	mov	r1, r3
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	2334      	movs	r3, #52	; 0x34
 800a24a:	fb03 f301 	mul.w	r3, r3, r1
 800a24e:	4413      	add	r3, r2
 800a250:	3390      	adds	r3, #144	; 0x90
 800a252:	2201      	movs	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a25c:	4619      	mov	r1, r3
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	2334      	movs	r3, #52	; 0x34
 800a262:	fb03 f301 	mul.w	r3, r3, r1
 800a266:	4413      	add	r3, r2
 800a268:	3391      	adds	r3, #145	; 0x91
 800a26a:	2202      	movs	r2, #2
 800a26c:	701a      	strb	r2, [r3, #0]
            break;
 800a26e:	e10a      	b.n	800a486 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a276:	b2d9      	uxtb	r1, r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a27e:	461a      	mov	r2, r3
 800a280:	2334      	movs	r3, #52	; 0x34
 800a282:	fb03 f302 	mul.w	r3, r3, r2
 800a286:	3390      	adds	r3, #144	; 0x90
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4413      	add	r3, r2
 800a28c:	3304      	adds	r3, #4
 800a28e:	461a      	mov	r2, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fddc 	bl	800ae4e <USBH_MSC_SCSI_ReadCapacity>
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d120      	bne.n	800a2e2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	2334      	movs	r3, #52	; 0x34
 800a2ac:	fb03 f301 	mul.w	r3, r3, r1
 800a2b0:	4413      	add	r3, r2
 800a2b2:	3390      	adds	r3, #144	; 0x90
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2be:	4619      	mov	r1, r3
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	2334      	movs	r3, #52	; 0x34
 800a2c4:	fb03 f301 	mul.w	r3, r3, r1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3391      	adds	r3, #145	; 0x91
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a2e0:	e0d3      	b.n	800a48a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d10c      	bne.n	800a302 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	2334      	movs	r3, #52	; 0x34
 800a2f4:	fb03 f301 	mul.w	r3, r3, r1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	3390      	adds	r3, #144	; 0x90
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	701a      	strb	r2, [r3, #0]
            break;
 800a300:	e0c3      	b.n	800a48a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b04      	cmp	r3, #4
 800a306:	f040 80c0 	bne.w	800a48a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a310:	4619      	mov	r1, r3
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	2334      	movs	r3, #52	; 0x34
 800a316:	fb03 f301 	mul.w	r3, r3, r1
 800a31a:	4413      	add	r3, r2
 800a31c:	3390      	adds	r3, #144	; 0x90
 800a31e:	2201      	movs	r2, #1
 800a320:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a328:	4619      	mov	r1, r3
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	2334      	movs	r3, #52	; 0x34
 800a32e:	fb03 f301 	mul.w	r3, r3, r1
 800a332:	4413      	add	r3, r2
 800a334:	3391      	adds	r3, #145	; 0x91
 800a336:	2202      	movs	r2, #2
 800a338:	701a      	strb	r2, [r3, #0]
            break;
 800a33a:	e0a6      	b.n	800a48a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a342:	b2d9      	uxtb	r1, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a34a:	461a      	mov	r2, r3
 800a34c:	2334      	movs	r3, #52	; 0x34
 800a34e:	fb03 f302 	mul.w	r3, r3, r2
 800a352:	3398      	adds	r3, #152	; 0x98
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4413      	add	r3, r2
 800a358:	3304      	adds	r3, #4
 800a35a:	461a      	mov	r2, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fe96 	bl	800b08e <USBH_MSC_SCSI_RequestSense>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d145      	bne.n	800a3f8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a372:	4619      	mov	r1, r3
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	2334      	movs	r3, #52	; 0x34
 800a378:	fb03 f301 	mul.w	r3, r3, r1
 800a37c:	4413      	add	r3, r2
 800a37e:	339c      	adds	r3, #156	; 0x9c
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b06      	cmp	r3, #6
 800a384:	d00c      	beq.n	800a3a0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a38c:	4619      	mov	r1, r3
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	2334      	movs	r3, #52	; 0x34
 800a392:	fb03 f301 	mul.w	r3, r3, r1
 800a396:	4413      	add	r3, r2
 800a398:	339c      	adds	r3, #156	; 0x9c
 800a39a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d117      	bne.n	800a3d0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	f242 720f 	movw	r2, #9999	; 0x270f
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d80c      	bhi.n	800a3d0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3bc:	4619      	mov	r1, r3
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	2334      	movs	r3, #52	; 0x34
 800a3c2:	fb03 f301 	mul.w	r3, r3, r1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	3390      	adds	r3, #144	; 0x90
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	701a      	strb	r2, [r3, #0]
                  break;
 800a3ce:	e05f      	b.n	800a490 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	2334      	movs	r3, #52	; 0x34
 800a3dc:	fb03 f301 	mul.w	r3, r3, r1
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3390      	adds	r3, #144	; 0x90
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d10c      	bne.n	800a418 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a404:	4619      	mov	r1, r3
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	2334      	movs	r3, #52	; 0x34
 800a40a:	fb03 f301 	mul.w	r3, r3, r1
 800a40e:	4413      	add	r3, r2
 800a410:	3390      	adds	r3, #144	; 0x90
 800a412:	2208      	movs	r2, #8
 800a414:	701a      	strb	r2, [r3, #0]
            break;
 800a416:	e03a      	b.n	800a48e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d137      	bne.n	800a48e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a424:	4619      	mov	r1, r3
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	2334      	movs	r3, #52	; 0x34
 800a42a:	fb03 f301 	mul.w	r3, r3, r1
 800a42e:	4413      	add	r3, r2
 800a430:	3390      	adds	r3, #144	; 0x90
 800a432:	2201      	movs	r2, #1
 800a434:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a43c:	4619      	mov	r1, r3
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	2334      	movs	r3, #52	; 0x34
 800a442:	fb03 f301 	mul.w	r3, r3, r1
 800a446:	4413      	add	r3, r2
 800a448:	3391      	adds	r3, #145	; 0x91
 800a44a:	2202      	movs	r2, #2
 800a44c:	701a      	strb	r2, [r3, #0]
            break;
 800a44e:	e01e      	b.n	800a48e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a456:	3301      	adds	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a460:	e016      	b.n	800a490 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2200      	movs	r2, #0
 800a466:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2201      	movs	r2, #1
 800a46e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a476:	2102      	movs	r1, #2
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
      break;
 800a47c:	e00c      	b.n	800a498 <USBH_MSC_Process+0x514>
            break;
 800a47e:	bf00      	nop
 800a480:	e00a      	b.n	800a498 <USBH_MSC_Process+0x514>
            break;
 800a482:	bf00      	nop
 800a484:	e008      	b.n	800a498 <USBH_MSC_Process+0x514>
            break;
 800a486:	bf00      	nop
 800a488:	e006      	b.n	800a498 <USBH_MSC_Process+0x514>
            break;
 800a48a:	bf00      	nop
 800a48c:	e004      	b.n	800a498 <USBH_MSC_Process+0x514>
            break;
 800a48e:	bf00      	nop
      break;
 800a490:	e002      	b.n	800a498 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
      break;
 800a496:	bf00      	nop
  }
  return error;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop

0800a4a4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b088      	sub	sp, #32
 800a4be:	af02      	add	r7, sp, #8
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	2134      	movs	r1, #52	; 0x34
 800a4de:	fb01 f303 	mul.w	r3, r1, r3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	3390      	adds	r3, #144	; 0x90
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b07      	cmp	r3, #7
 800a4ea:	d03c      	beq.n	800a566 <USBH_MSC_RdWrProcess+0xac>
 800a4ec:	2b07      	cmp	r3, #7
 800a4ee:	f300 80a7 	bgt.w	800a640 <USBH_MSC_RdWrProcess+0x186>
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d06c      	beq.n	800a5d0 <USBH_MSC_RdWrProcess+0x116>
 800a4f6:	2b06      	cmp	r3, #6
 800a4f8:	f040 80a2 	bne.w	800a640 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a4fc:	78f9      	ldrb	r1, [r7, #3]
 800a4fe:	2300      	movs	r3, #0
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	2300      	movs	r3, #0
 800a504:	2200      	movs	r2, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fea5 	bl	800b256 <USBH_MSC_SCSI_Read>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	2134      	movs	r1, #52	; 0x34
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	4413      	add	r3, r2
 800a522:	3390      	adds	r3, #144	; 0x90
 800a524:	2201      	movs	r2, #1
 800a526:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a52c:	e08a      	b.n	800a644 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d109      	bne.n	800a548 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	2134      	movs	r1, #52	; 0x34
 800a53a:	fb01 f303 	mul.w	r3, r1, r3
 800a53e:	4413      	add	r3, r2
 800a540:	3390      	adds	r3, #144	; 0x90
 800a542:	2205      	movs	r2, #5
 800a544:	701a      	strb	r2, [r3, #0]
      break;
 800a546:	e07d      	b.n	800a644 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d17a      	bne.n	800a644 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	2134      	movs	r1, #52	; 0x34
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	4413      	add	r3, r2
 800a55a:	3390      	adds	r3, #144	; 0x90
 800a55c:	2208      	movs	r2, #8
 800a55e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a560:	2302      	movs	r3, #2
 800a562:	75fb      	strb	r3, [r7, #23]
      break;
 800a564:	e06e      	b.n	800a644 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a566:	78f9      	ldrb	r1, [r7, #3]
 800a568:	2300      	movs	r3, #0
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	2300      	movs	r3, #0
 800a56e:	2200      	movs	r2, #0
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fe05 	bl	800b180 <USBH_MSC_SCSI_Write>
 800a576:	4603      	mov	r3, r0
 800a578:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10b      	bne.n	800a598 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a580:	78fb      	ldrb	r3, [r7, #3]
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	2134      	movs	r1, #52	; 0x34
 800a586:	fb01 f303 	mul.w	r3, r1, r3
 800a58a:	4413      	add	r3, r2
 800a58c:	3390      	adds	r3, #144	; 0x90
 800a58e:	2201      	movs	r2, #1
 800a590:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a596:	e057      	b.n	800a648 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d109      	bne.n	800a5b2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	2134      	movs	r1, #52	; 0x34
 800a5a4:	fb01 f303 	mul.w	r3, r1, r3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3390      	adds	r3, #144	; 0x90
 800a5ac:	2205      	movs	r2, #5
 800a5ae:	701a      	strb	r2, [r3, #0]
      break;
 800a5b0:	e04a      	b.n	800a648 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d147      	bne.n	800a648 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	2134      	movs	r1, #52	; 0x34
 800a5be:	fb01 f303 	mul.w	r3, r1, r3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3390      	adds	r3, #144	; 0x90
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ce:	e03b      	b.n	800a648 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	2234      	movs	r2, #52	; 0x34
 800a5d4:	fb02 f303 	mul.w	r3, r2, r3
 800a5d8:	3398      	adds	r3, #152	; 0x98
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4413      	add	r3, r2
 800a5de:	1d1a      	adds	r2, r3, #4
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fd52 	bl	800b08e <USBH_MSC_SCSI_RequestSense>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d113      	bne.n	800a61c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	2134      	movs	r1, #52	; 0x34
 800a5fa:	fb01 f303 	mul.w	r3, r1, r3
 800a5fe:	4413      	add	r3, r2
 800a600:	3390      	adds	r3, #144	; 0x90
 800a602:	2201      	movs	r2, #1
 800a604:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	2134      	movs	r1, #52	; 0x34
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	4413      	add	r3, r2
 800a612:	3391      	adds	r3, #145	; 0x91
 800a614:	2202      	movs	r2, #2
 800a616:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a618:	2302      	movs	r3, #2
 800a61a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d014      	beq.n	800a64c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b04      	cmp	r3, #4
 800a626:	d111      	bne.n	800a64c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	2134      	movs	r1, #52	; 0x34
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	4413      	add	r3, r2
 800a634:	3390      	adds	r3, #144	; 0x90
 800a636:	2208      	movs	r2, #8
 800a638:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a63a:	2302      	movs	r3, #2
 800a63c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a63e:	e005      	b.n	800a64c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a640:	bf00      	nop
 800a642:	e004      	b.n	800a64e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a644:	bf00      	nop
 800a646:	e002      	b.n	800a64e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a648:	bf00      	nop
 800a64a:	e000      	b.n	800a64e <USBH_MSC_RdWrProcess+0x194>
      break;
 800a64c:	bf00      	nop

  }
  return error;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b0b      	cmp	r3, #11
 800a676:	d10c      	bne.n	800a692 <USBH_MSC_UnitIsReady+0x3a>
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	2134      	movs	r1, #52	; 0x34
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	4413      	add	r3, r2
 800a684:	3391      	adds	r3, #145	; 0x91
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
 800a690:	e001      	b.n	800a696 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b0b      	cmp	r3, #11
 800a6c4:	d10d      	bne.n	800a6e2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	2234      	movs	r2, #52	; 0x34
 800a6ca:	fb02 f303 	mul.w	r3, r2, r3
 800a6ce:	3390      	adds	r3, #144	; 0x90
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	2234      	movs	r2, #52	; 0x34
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f006 fd0b 	bl	80110f4 <memcpy>
    return USBH_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e000      	b.n	800a6e4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a6e2:	2302      	movs	r3, #2
  }
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a702:	69db      	ldr	r3, [r3, #28]
 800a704:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00e      	beq.n	800a730 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a718:	2b0b      	cmp	r3, #11
 800a71a:	d109      	bne.n	800a730 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	2134      	movs	r1, #52	; 0x34
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	3390      	adds	r3, #144	; 0x90
 800a72a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d001      	beq.n	800a734 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a730:	2302      	movs	r3, #2
 800a732:	e040      	b.n	800a7b6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2206      	movs	r2, #6
 800a738:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a73a:	7afb      	ldrb	r3, [r7, #11]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	2134      	movs	r1, #52	; 0x34
 800a740:	fb01 f303 	mul.w	r3, r1, r3
 800a744:	4413      	add	r3, r2
 800a746:	3390      	adds	r3, #144	; 0x90
 800a748:	2206      	movs	r2, #6
 800a74a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	b29a      	uxth	r2, r3
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a756:	7af9      	ldrb	r1, [r7, #11]
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fd78 	bl	800b256 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a76c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a76e:	e016      	b.n	800a79e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	429a      	cmp	r2, r3
 800a786:	d805      	bhi.n	800a794 <USBH_MSC_Read+0xa8>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d104      	bne.n	800a79e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2201      	movs	r2, #1
 800a798:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a79a:	2302      	movs	r3, #2
 800a79c:	e00b      	b.n	800a7b6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a79e:	7afb      	ldrb	r3, [r7, #11]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff fe89 	bl	800a4ba <USBH_MSC_RdWrProcess>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d0e0      	beq.n	800a770 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af02      	add	r7, sp, #8
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	603b      	str	r3, [r7, #0]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00e      	beq.n	800a802 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a7ea:	2b0b      	cmp	r3, #11
 800a7ec:	d109      	bne.n	800a802 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	2134      	movs	r1, #52	; 0x34
 800a7f4:	fb01 f303 	mul.w	r3, r1, r3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3390      	adds	r3, #144	; 0x90
 800a7fc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d001      	beq.n	800a806 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	e040      	b.n	800a888 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2207      	movs	r2, #7
 800a80a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	2134      	movs	r1, #52	; 0x34
 800a812:	fb01 f303 	mul.w	r3, r1, r3
 800a816:	4413      	add	r3, r2
 800a818:	3390      	adds	r3, #144	; 0x90
 800a81a:	2207      	movs	r2, #7
 800a81c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	b29a      	uxth	r2, r3
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a828:	7af9      	ldrb	r1, [r7, #11]
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 fca4 	bl	800b180 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a83e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a840:	e016      	b.n	800a870 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	f242 7110 	movw	r1, #10000	; 0x2710
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	429a      	cmp	r2, r3
 800a858:	d805      	bhi.n	800a866 <USBH_MSC_Write+0xa8>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d104      	bne.n	800a870 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2201      	movs	r2, #1
 800a86a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a86c:	2302      	movs	r3, #2
 800a86e:	e00b      	b.n	800a888 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fe20 	bl	800a4ba <USBH_MSC_RdWrProcess>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d0e0      	beq.n	800a842 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2201      	movs	r2, #1
 800a884:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2221      	movs	r2, #33	; 0x21
 800a89c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	22ff      	movs	r2, #255	; 0xff
 800a8a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f001 fdab 	bl	800c416 <USBH_CtlReq>
 800a8c0:	4603      	mov	r3, r0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	22a1      	movs	r2, #161	; 0xa1
 800a8d8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	22fe      	movs	r2, #254	; 0xfe
 800a8de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 fd8d 	bl	800c416 <USBH_CtlReq>
 800a8fc:	4603      	mov	r3, r0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a09      	ldr	r2, [pc, #36]	; (800a944 <USBH_MSC_BOT_Init+0x3c>)
 800a91e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4a09      	ldr	r2, [pc, #36]	; (800a948 <USBH_MSC_BOT_Init+0x40>)
 800a924:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	43425355 	.word	0x43425355
 800a948:	20304050 	.word	0x20304050

0800a94c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af02      	add	r7, sp, #8
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a958:	2301      	movs	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a95c:	2301      	movs	r3, #1
 800a95e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a960:	2301      	movs	r3, #1
 800a962:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a964:	2300      	movs	r3, #0
 800a966:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a97c:	3b01      	subs	r3, #1
 800a97e:	2b0a      	cmp	r3, #10
 800a980:	f200 819e 	bhi.w	800acc0 <USBH_MSC_BOT_Process+0x374>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <USBH_MSC_BOT_Process+0x40>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9b9 	.word	0x0800a9b9
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800aa4b 	.word	0x0800aa4b
 800a998:	0800aa69 	.word	0x0800aa69
 800a99c:	0800aaed 	.word	0x0800aaed
 800a9a0:	0800ab0f 	.word	0x0800ab0f
 800a9a4:	0800aba7 	.word	0x0800aba7
 800a9a8:	0800abc3 	.word	0x0800abc3
 800a9ac:	0800ac15 	.word	0x0800ac15
 800a9b0:	0800ac45 	.word	0x0800ac45
 800a9b4:	0800aca7 	.word	0x0800aca7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	78fa      	ldrb	r2, [r7, #3]
 800a9bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	795b      	ldrb	r3, [r3, #5]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	9200      	str	r2, [sp, #0]
 800a9d6:	221f      	movs	r2, #31
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f001 ff2a 	bl	800c832 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a9de:	e17e      	b.n	800acde <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	795b      	ldrb	r3, [r3, #5]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f006 fa6c 	bl	8010ec4 <USBH_LL_GetURBState>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a9f0:	7d3b      	ldrb	r3, [r7, #20]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d118      	bne.n	800aa28 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00f      	beq.n	800aa1e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800aa04:	b25b      	sxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da04      	bge.n	800aa14 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2203      	movs	r2, #3
 800aa0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa12:	e157      	b.n	800acc4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	2205      	movs	r2, #5
 800aa18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa1c:	e152      	b.n	800acc4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2207      	movs	r2, #7
 800aa22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa26:	e14d      	b.n	800acc4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa28:	7d3b      	ldrb	r3, [r7, #20]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d104      	bne.n	800aa38 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa36:	e145      	b.n	800acc4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800aa38:	7d3b      	ldrb	r3, [r7, #20]
 800aa3a:	2b05      	cmp	r3, #5
 800aa3c:	f040 8142 	bne.w	800acc4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	220a      	movs	r2, #10
 800aa44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa48:	e13c      	b.n	800acc4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	895a      	ldrh	r2, [r3, #10]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	791b      	ldrb	r3, [r3, #4]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 ff0f 	bl	800c87c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2204      	movs	r2, #4
 800aa62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aa66:	e13a      	b.n	800acde <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	791b      	ldrb	r3, [r3, #4]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f006 fa28 	bl	8010ec4 <USBH_LL_GetURBState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aa78:	7d3b      	ldrb	r3, [r7, #20]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d12d      	bne.n	800aada <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	8952      	ldrh	r2, [r2, #10]
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d910      	bls.n	800aaac <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	8952      	ldrh	r2, [r2, #10]
 800aa94:	441a      	add	r2, r3
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	8952      	ldrh	r2, [r2, #10]
 800aaa4:	1a9a      	subs	r2, r3, r2
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	65da      	str	r2, [r3, #92]	; 0x5c
 800aaaa:	e002      	b.n	800aab2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2200      	movs	r2, #0
 800aab0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	895a      	ldrh	r2, [r3, #10]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	791b      	ldrb	r3, [r3, #4]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 fed7 	bl	800c87c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aace:	e0fb      	b.n	800acc8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2207      	movs	r2, #7
 800aad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aad8:	e0f6      	b.n	800acc8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aada:	7d3b      	ldrb	r3, [r7, #20]
 800aadc:	2b05      	cmp	r3, #5
 800aade:	f040 80f3 	bne.w	800acc8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2209      	movs	r2, #9
 800aae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaea:	e0ed      	b.n	800acc8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	891a      	ldrh	r2, [r3, #8]
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	795b      	ldrb	r3, [r3, #5]
 800aafa:	2001      	movs	r0, #1
 800aafc:	9000      	str	r0, [sp, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 fe97 	bl	800c832 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2206      	movs	r2, #6
 800ab08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab0c:	e0e7      	b.n	800acde <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	795b      	ldrb	r3, [r3, #5]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f006 f9d5 	bl	8010ec4 <USBH_LL_GetURBState>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ab1e:	7d3b      	ldrb	r3, [r7, #20]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d12f      	bne.n	800ab84 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	8912      	ldrh	r2, [r2, #8]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d910      	bls.n	800ab52 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	8912      	ldrh	r2, [r2, #8]
 800ab3a:	441a      	add	r2, r3
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	8912      	ldrh	r2, [r2, #8]
 800ab4a:	1a9a      	subs	r2, r3, r2
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab50:	e002      	b.n	800ab58 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2200      	movs	r2, #0
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00c      	beq.n	800ab7a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	891a      	ldrh	r2, [r3, #8]
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	795b      	ldrb	r3, [r3, #5]
 800ab6e:	2001      	movs	r0, #1
 800ab70:	9000      	str	r0, [sp, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fe5d 	bl	800c832 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ab78:	e0a8      	b.n	800accc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	2207      	movs	r2, #7
 800ab7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab82:	e0a3      	b.n	800accc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab84:	7d3b      	ldrb	r3, [r7, #20]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d104      	bne.n	800ab94 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2205      	movs	r2, #5
 800ab8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab92:	e09b      	b.n	800accc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ab94:	7d3b      	ldrb	r3, [r7, #20]
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	f040 8098 	bne.w	800accc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	220a      	movs	r2, #10
 800aba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aba4:	e092      	b.n	800accc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	791b      	ldrb	r3, [r3, #4]
 800abb0:	220d      	movs	r2, #13
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 fe62 	bl	800c87c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2208      	movs	r2, #8
 800abbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abc0:	e08d      	b.n	800acde <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	791b      	ldrb	r3, [r3, #4]
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f006 f97b 	bl	8010ec4 <USBH_LL_GetURBState>
 800abce:	4603      	mov	r3, r0
 800abd0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800abd2:	7d3b      	ldrb	r3, [r7, #20]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d115      	bne.n	800ac04 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f8a9 	bl	800ad40 <USBH_MSC_DecodeCSW>
 800abee:	4603      	mov	r3, r0
 800abf0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800abf2:	7d7b      	ldrb	r3, [r7, #21]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800abfc:	e068      	b.n	800acd0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800abfe:	2302      	movs	r3, #2
 800ac00:	75fb      	strb	r3, [r7, #23]
      break;
 800ac02:	e065      	b.n	800acd0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ac04:	7d3b      	ldrb	r3, [r7, #20]
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	d162      	bne.n	800acd0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2209      	movs	r2, #9
 800ac0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac12:	e05d      	b.n	800acd0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	2200      	movs	r2, #0
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f864 	bl	800ace8 <USBH_MSC_BOT_Abort>
 800ac20:	4603      	mov	r3, r0
 800ac22:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ac24:	7dbb      	ldrb	r3, [r7, #22]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d104      	bne.n	800ac34 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ac32:	e04f      	b.n	800acd4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ac34:	7dbb      	ldrb	r3, [r7, #22]
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	d14c      	bne.n	800acd4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	220b      	movs	r2, #11
 800ac3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac42:	e047      	b.n	800acd4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	2201      	movs	r2, #1
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f84c 	bl	800ace8 <USBH_MSC_BOT_Abort>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ac54:	7dbb      	ldrb	r3, [r7, #22]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d11d      	bne.n	800ac96 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	795b      	ldrb	r3, [r3, #5]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f006 f989 	bl	8010f78 <USBH_LL_GetToggle>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	7959      	ldrb	r1, [r3, #5]
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	f1c3 0301 	rsb	r3, r3, #1
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	461a      	mov	r2, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f006 f94d 	bl	8010f18 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	791b      	ldrb	r3, [r3, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f006 f946 	bl	8010f18 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2209      	movs	r2, #9
 800ac90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ac94:	e020      	b.n	800acd8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ac96:	7dbb      	ldrb	r3, [r7, #22]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d11d      	bne.n	800acd8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	220b      	movs	r2, #11
 800aca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aca4:	e018      	b.n	800acd8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fdf2 	bl	800a890 <USBH_MSC_BOT_REQ_Reset>
 800acac:	4603      	mov	r3, r0
 800acae:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d112      	bne.n	800acdc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800acbe:	e00d      	b.n	800acdc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800acc0:	bf00      	nop
 800acc2:	e00c      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acc4:	bf00      	nop
 800acc6:	e00a      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acc8:	bf00      	nop
 800acca:	e008      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800accc:	bf00      	nop
 800acce:	e006      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acd0:	bf00      	nop
 800acd2:	e004      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acd4:	bf00      	nop
 800acd6:	e002      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acd8:	bf00      	nop
 800acda:	e000      	b.n	800acde <USBH_MSC_BOT_Process+0x392>
      break;
 800acdc:	bf00      	nop
  }
  return status;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
 800acf4:	4613      	mov	r3, r2
 800acf6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800acf8:	2302      	movs	r3, #2
 800acfa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ad06:	78bb      	ldrb	r3, [r7, #2]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <USBH_MSC_BOT_Abort+0x2a>
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d009      	beq.n	800ad24 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ad10:	e011      	b.n	800ad36 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	79db      	ldrb	r3, [r3, #7]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f001 f99c 	bl	800c056 <USBH_ClrFeature>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	73fb      	strb	r3, [r7, #15]
      break;
 800ad22:	e008      	b.n	800ad36 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	799b      	ldrb	r3, [r3, #6]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 f993 	bl	800c056 <USBH_ClrFeature>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
      break;
 800ad34:	bf00      	nop
  }
  return status;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	791b      	ldrb	r3, [r3, #4]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f006 f81f 	bl	8010da0 <USBH_LL_GetLastXferSize>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b0d      	cmp	r3, #13
 800ad66:	d002      	beq.n	800ad6e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	73fb      	strb	r3, [r7, #15]
 800ad6c:	e024      	b.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <USBH_MSC_DecodeCSW+0x84>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d11d      	bne.n	800adb4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d119      	bne.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
 800ad92:	e011      	b.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d102      	bne.n	800ada4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	73fb      	strb	r3, [r7, #15]
 800ada2:	e009      	b.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d104      	bne.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800adae:	2302      	movs	r3, #2
 800adb0:	73fb      	strb	r3, [r7, #15]
 800adb2:	e001      	b.n	800adb8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800adb4:	2302      	movs	r3, #2
 800adb6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	53425355 	.word	0x53425355

0800adc8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800add4:	2302      	movs	r3, #2
 800add6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d002      	beq.n	800adf2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800adec:	2b02      	cmp	r3, #2
 800adee:	d021      	beq.n	800ae34 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800adf0:	e028      	b.n	800ae44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2200      	movs	r2, #0
 800adf6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	220a      	movs	r2, #10
 800ae04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3363      	adds	r3, #99	; 0x63
 800ae0c:	2210      	movs	r2, #16
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f006 f997 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2202      	movs	r2, #2
 800ae2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	73fb      	strb	r3, [r7, #15]
      break;
 800ae32:	e007      	b.n	800ae44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fd87 	bl	800a94c <USBH_MSC_BOT_Process>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
      break;
 800ae42:	bf00      	nop
  }

  return error;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b086      	sub	sp, #24
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	460b      	mov	r3, r1
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d002      	beq.n	800ae7a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d027      	beq.n	800aec8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ae78:	e05f      	b.n	800af3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2280      	movs	r2, #128	; 0x80
 800ae84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	220a      	movs	r2, #10
 800ae8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	3363      	adds	r3, #99	; 0x63
 800ae94:	2210      	movs	r2, #16
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f006 f953 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2225      	movs	r2, #37	; 0x25
 800aea2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f103 0210 	add.w	r2, r3, #16
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aec2:	2301      	movs	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
      break;
 800aec6:	e038      	b.n	800af3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aec8:	7afb      	ldrb	r3, [r7, #11]
 800aeca:	4619      	mov	r1, r3
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff fd3d 	bl	800a94c <USBH_MSC_BOT_Process>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d12d      	bne.n	800af38 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aee2:	3303      	adds	r3, #3
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeee:	3302      	adds	r3, #2
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	021b      	lsls	r3, r3, #8
 800aef4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aefc:	3301      	adds	r3, #1
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800af02:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	061b      	lsls	r3, r3, #24
 800af0e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af1a:	3307      	adds	r3, #7
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	b29a      	uxth	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af26:	3306      	adds	r3, #6
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4313      	orrs	r3, r2
 800af32:	b29a      	uxth	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	809a      	strh	r2, [r3, #4]
      break;
 800af38:	bf00      	nop
  }

  return error;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	460b      	mov	r3, r1
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800af52:	2302      	movs	r3, #2
 800af54:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af66:	2b01      	cmp	r3, #1
 800af68:	d002      	beq.n	800af70 <USBH_MSC_SCSI_Inquiry+0x2c>
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d03d      	beq.n	800afea <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800af6e:	e089      	b.n	800b084 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2224      	movs	r2, #36	; 0x24
 800af74:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2280      	movs	r2, #128	; 0x80
 800af7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	220a      	movs	r2, #10
 800af82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3363      	adds	r3, #99	; 0x63
 800af8a:	220a      	movs	r2, #10
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f006 f8d8 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2212      	movs	r2, #18
 800af98:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	015b      	lsls	r3, r3, #5
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2224      	movs	r2, #36	; 0x24
 800afbc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f103 0210 	add.w	r2, r3, #16
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800afe4:	2301      	movs	r3, #1
 800afe6:	75fb      	strb	r3, [r7, #23]
      break;
 800afe8:	e04c      	b.n	800b084 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800afea:	7afb      	ldrb	r3, [r7, #11]
 800afec:	4619      	mov	r1, r3
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff fcac 	bl	800a94c <USBH_MSC_BOT_Process>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d141      	bne.n	800b082 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800affe:	2222      	movs	r2, #34	; 0x22
 800b000:	2100      	movs	r1, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f006 f89e 	bl	8011144 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	f003 031f 	and.w	r3, r3, #31
 800b014:	b2da      	uxtb	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	b2da      	uxtb	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b030:	3301      	adds	r3, #1
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b25b      	sxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	da03      	bge.n	800b042 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	709a      	strb	r2, [r3, #2]
 800b040:	e002      	b.n	800b048 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1cd8      	adds	r0, r3, #3
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b052:	3308      	adds	r3, #8
 800b054:	2208      	movs	r2, #8
 800b056:	4619      	mov	r1, r3
 800b058:	f006 f84c 	bl	80110f4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f103 000c 	add.w	r0, r3, #12
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b068:	3310      	adds	r3, #16
 800b06a:	2210      	movs	r2, #16
 800b06c:	4619      	mov	r1, r3
 800b06e:	f006 f841 	bl	80110f4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	331d      	adds	r3, #29
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b07c:	3220      	adds	r2, #32
 800b07e:	6812      	ldr	r2, [r2, #0]
 800b080:	601a      	str	r2, [r3, #0]
      break;
 800b082:	bf00      	nop
  }

  return error;
 800b084:	7dfb      	ldrb	r3, [r7, #23]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b086      	sub	sp, #24
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	460b      	mov	r3, r1
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b09c:	2302      	movs	r3, #2
 800b09e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d002      	beq.n	800b0ba <USBH_MSC_SCSI_RequestSense+0x2c>
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d03d      	beq.n	800b134 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b0b8:	e05d      	b.n	800b176 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	220e      	movs	r2, #14
 800b0be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2280      	movs	r2, #128	; 0x80
 800b0c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3363      	adds	r3, #99	; 0x63
 800b0d4:	2210      	movs	r2, #16
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f006 f833 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	015b      	lsls	r3, r3, #5
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	220e      	movs	r2, #14
 800b106:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2202      	movs	r2, #2
 800b11e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f103 0210 	add.w	r2, r3, #16
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b12e:	2301      	movs	r3, #1
 800b130:	75fb      	strb	r3, [r7, #23]
      break;
 800b132:	e020      	b.n	800b176 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b134:	7afb      	ldrb	r3, [r7, #11]
 800b136:	4619      	mov	r1, r3
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff fc07 	bl	800a94c <USBH_MSC_BOT_Process>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d115      	bne.n	800b174 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b14e:	3302      	adds	r3, #2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	b2da      	uxtb	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b162:	7b1a      	ldrb	r2, [r3, #12]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b16e:	7b5a      	ldrb	r2, [r3, #13]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	709a      	strb	r2, [r3, #2]
      break;
 800b174:	bf00      	nop
  }

  return error;
 800b176:	7dfb      	ldrb	r3, [r7, #23]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	607a      	str	r2, [r7, #4]
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	460b      	mov	r3, r1
 800b18e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b190:	2302      	movs	r3, #2
 800b192:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b19a:	69db      	ldr	r3, [r3, #28]
 800b19c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d002      	beq.n	800b1ae <USBH_MSC_SCSI_Write+0x2e>
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d047      	beq.n	800b23c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b1ac:	e04e      	b.n	800b24c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	fb03 f202 	mul.w	r2, r3, r2
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	220a      	movs	r2, #10
 800b1cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	3363      	adds	r3, #99	; 0x63
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f005 ffb3 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	222a      	movs	r2, #42	; 0x2a
 800b1e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b1e6:	79fa      	ldrb	r2, [r7, #7]
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b1ee:	79ba      	ldrb	r2, [r7, #6]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b1f6:	797a      	ldrb	r2, [r7, #5]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b1fe:	1d3b      	adds	r3, r7, #4
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b208:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b212:	f107 0320 	add.w	r3, r7, #32
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2202      	movs	r2, #2
 800b22a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b236:	2301      	movs	r3, #1
 800b238:	75fb      	strb	r3, [r7, #23]
      break;
 800b23a:	e007      	b.n	800b24c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	4619      	mov	r1, r3
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff fb83 	bl	800a94c <USBH_MSC_BOT_Process>
 800b246:	4603      	mov	r3, r0
 800b248:	75fb      	strb	r3, [r7, #23]
      break;
 800b24a:	bf00      	nop
  }

  return error;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b086      	sub	sp, #24
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	607a      	str	r2, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]
 800b262:	460b      	mov	r3, r1
 800b264:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b266:	2302      	movs	r3, #2
 800b268:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d002      	beq.n	800b284 <USBH_MSC_SCSI_Read+0x2e>
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d047      	beq.n	800b312 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b282:	e04e      	b.n	800b322 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b28a:	461a      	mov	r2, r3
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	fb03 f202 	mul.w	r2, r3, r2
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2280      	movs	r2, #128	; 0x80
 800b29a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3363      	adds	r3, #99	; 0x63
 800b2aa:	2210      	movs	r2, #16
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f005 ff48 	bl	8011144 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2228      	movs	r2, #40	; 0x28
 800b2b8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b2bc:	79fa      	ldrb	r2, [r7, #7]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b2c4:	79ba      	ldrb	r2, [r7, #6]
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b2cc:	797a      	ldrb	r2, [r7, #5]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b2d4:	1d3b      	adds	r3, r7, #4
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b2de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b2e8:	f107 0320 	add.w	r3, r7, #32
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b30c:	2301      	movs	r3, #1
 800b30e:	75fb      	strb	r3, [r7, #23]
      break;
 800b310:	e007      	b.n	800b322 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b312:	7afb      	ldrb	r3, [r7, #11]
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fb18 	bl	800a94c <USBH_MSC_BOT_Process>
 800b31c:	4603      	mov	r3, r0
 800b31e:	75fb      	strb	r3, [r7, #23]
      break;
 800b320:	bf00      	nop
  }

  return error;
 800b322:	7dfb      	ldrb	r3, [r7, #23]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	4613      	mov	r3, r2
 800b338:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b340:	2302      	movs	r3, #2
 800b342:	e029      	b.n	800b398 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	79fa      	ldrb	r2, [r7, #7]
 800b348:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 f81f 	bl	800b3a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f005 fc51 	bl	8010c38 <USBH_LL_Init>

  return USBH_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e009      	b.n	800b3c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	33e0      	adds	r3, #224	; 0xe0
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	2200      	movs	r2, #0
 800b3be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b0e      	cmp	r3, #14
 800b3ca:	d9f2      	bls.n	800b3b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e009      	b.n	800b3e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ec:	d3f1      	bcc.n	800b3d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2240      	movs	r2, #64	; 0x40
 800b412:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d016      	beq.n	800b48a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10e      	bne.n	800b484 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b46c:	1c59      	adds	r1, r3, #1
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	33de      	adds	r3, #222	; 0xde
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
 800b482:	e004      	b.n	800b48e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b484:	2302      	movs	r3, #2
 800b486:	73fb      	strb	r3, [r7, #15]
 800b488:	e001      	b.n	800b48e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b48a:	2302      	movs	r3, #2
 800b48c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d204      	bcs.n	800b4c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	78fa      	ldrb	r2, [r7, #3]
 800b4bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b4c0:	e001      	b.n	800b4c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	4608      	mov	r0, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	70fb      	strb	r3, [r7, #3]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	70bb      	strb	r3, [r7, #2]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b4fe:	e025      	b.n	800b54c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	221a      	movs	r2, #26
 800b504:	fb02 f303 	mul.w	r3, r2, r3
 800b508:	3308      	adds	r3, #8
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4413      	add	r3, r2
 800b50e:	3302      	adds	r3, #2
 800b510:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	795b      	ldrb	r3, [r3, #5]
 800b516:	78fa      	ldrb	r2, [r7, #3]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d002      	beq.n	800b522 <USBH_FindInterface+0x4e>
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	2bff      	cmp	r3, #255	; 0xff
 800b520:	d111      	bne.n	800b546 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b526:	78ba      	ldrb	r2, [r7, #2]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d002      	beq.n	800b532 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b52c:	78bb      	ldrb	r3, [r7, #2]
 800b52e:	2bff      	cmp	r3, #255	; 0xff
 800b530:	d109      	bne.n	800b546 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b536:	787a      	ldrb	r2, [r7, #1]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d002      	beq.n	800b542 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b53c:	787b      	ldrb	r3, [r7, #1]
 800b53e:	2bff      	cmp	r3, #255	; 0xff
 800b540:	d101      	bne.n	800b546 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	e006      	b.n	800b554 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	3301      	adds	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d9d6      	bls.n	800b500 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b552:	23ff      	movs	r3, #255	; 0xff
}
 800b554:	4618      	mov	r0, r3
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f005 fba1 	bl	8010cb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b56e:	2101      	movs	r1, #1
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f005 fcba 	bl	8010eea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af04      	add	r7, sp, #16
 800b586:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b588:	2302      	movs	r3, #2
 800b58a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d102      	bne.n	800b5a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2203      	movs	r2, #3
 800b5a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b0b      	cmp	r3, #11
 800b5aa:	f200 81b3 	bhi.w	800b914 <USBH_Process+0x394>
 800b5ae:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <USBH_Process+0x34>)
 800b5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b4:	0800b5e5 	.word	0x0800b5e5
 800b5b8:	0800b617 	.word	0x0800b617
 800b5bc:	0800b67f 	.word	0x0800b67f
 800b5c0:	0800b8af 	.word	0x0800b8af
 800b5c4:	0800b915 	.word	0x0800b915
 800b5c8:	0800b723 	.word	0x0800b723
 800b5cc:	0800b855 	.word	0x0800b855
 800b5d0:	0800b759 	.word	0x0800b759
 800b5d4:	0800b779 	.word	0x0800b779
 800b5d8:	0800b799 	.word	0x0800b799
 800b5dc:	0800b7c7 	.word	0x0800b7c7
 800b5e0:	0800b897 	.word	0x0800b897
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8193 	beq.w	800b918 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b5f8:	20c8      	movs	r0, #200	; 0xc8
 800b5fa:	f005 fced 	bl	8010fd8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f005 fbb3 	bl	8010d6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b614:	e180      	b.n	800b918 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d107      	bne.n	800b630 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b62e:	e182      	b.n	800b936 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b63a:	d914      	bls.n	800b666 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b642:	3301      	adds	r3, #1
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b652:	2b03      	cmp	r3, #3
 800b654:	d903      	bls.n	800b65e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	220d      	movs	r2, #13
 800b65a:	701a      	strb	r2, [r3, #0]
      break;
 800b65c:	e16b      	b.n	800b936 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	701a      	strb	r2, [r3, #0]
      break;
 800b664:	e167      	b.n	800b936 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b66c:	f103 020a 	add.w	r2, r3, #10
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b676:	200a      	movs	r0, #10
 800b678:	f005 fcae 	bl	8010fd8 <USBH_Delay>
      break;
 800b67c:	e15b      	b.n	800b936 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d005      	beq.n	800b694 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b68e:	2104      	movs	r1, #4
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b694:	2064      	movs	r0, #100	; 0x64
 800b696:	f005 fc9f 	bl	8010fd8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f005 fb3e 	bl	8010d1c <USBH_LL_GetSpeed>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2205      	movs	r2, #5
 800b6ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f001 f92f 	bl	800c916 <USBH_AllocPipe>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b6c0:	2180      	movs	r1, #128	; 0x80
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f927 	bl	800c916 <USBH_AllocPipe>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7919      	ldrb	r1, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6e4:	b292      	uxth	r2, r2
 800b6e6:	9202      	str	r2, [sp, #8]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	9201      	str	r2, [sp, #4]
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2280      	movs	r2, #128	; 0x80
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f001 f8e0 	bl	800c8b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	7959      	ldrb	r1, [r3, #5]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b70c:	b292      	uxth	r2, r2
 800b70e:	9202      	str	r2, [sp, #8]
 800b710:	2200      	movs	r2, #0
 800b712:	9201      	str	r2, [sp, #4]
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	4603      	mov	r3, r0
 800b718:	2200      	movs	r2, #0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 f8cc 	bl	800c8b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b720:	e109      	b.n	800b936 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f90c 	bl	800b940 <USBH_HandleEnum>
 800b728:	4603      	mov	r3, r0
 800b72a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	f040 80f3 	bne.w	800b91c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b744:	2b01      	cmp	r3, #1
 800b746:	d103      	bne.n	800b750 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2208      	movs	r2, #8
 800b74c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b74e:	e0e5      	b.n	800b91c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2207      	movs	r2, #7
 800b754:	701a      	strb	r2, [r3, #0]
      break;
 800b756:	e0e1      	b.n	800b91c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 80de 	beq.w	800b920 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b76a:	2101      	movs	r1, #1
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2208      	movs	r2, #8
 800b774:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b776:	e0d3      	b.n	800b920 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b77e:	b29b      	uxth	r3, r3
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fc20 	bl	800bfc8 <USBH_SetCfg>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f040 80ca 	bne.w	800b924 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2209      	movs	r2, #9
 800b794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b796:	e0c5      	b.n	800b924 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fc30 	bl	800c00e <USBH_SetFeature>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f040 80b9 	bne.w	800b928 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	220a      	movs	r2, #10
 800b7ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b7bc:	e0b4      	b.n	800b928 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	701a      	strb	r2, [r3, #0]
      break;
 800b7c4:	e0b0      	b.n	800b928 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80ad 	beq.w	800b92c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73fb      	strb	r3, [r7, #15]
 800b7de:	e016      	b.n	800b80e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b7e0:	7bfa      	ldrb	r2, [r7, #15]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	32de      	adds	r2, #222	; 0xde
 800b7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ea:	791a      	ldrb	r2, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d108      	bne.n	800b808 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b7f6:	7bfa      	ldrb	r2, [r7, #15]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	32de      	adds	r2, #222	; 0xde
 800b7fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b806:	e005      	b.n	800b814 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	3301      	adds	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0e5      	beq.n	800b7e0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d016      	beq.n	800b84c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	4798      	blx	r3
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d109      	bne.n	800b844 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2206      	movs	r2, #6
 800b834:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b83c:	2103      	movs	r1, #3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b842:	e073      	b.n	800b92c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	220d      	movs	r2, #13
 800b848:	701a      	strb	r2, [r3, #0]
      break;
 800b84a:	e06f      	b.n	800b92c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	220d      	movs	r2, #13
 800b850:	701a      	strb	r2, [r3, #0]
      break;
 800b852:	e06b      	b.n	800b92c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d017      	beq.n	800b88e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	4798      	blx	r3
 800b86a:	4603      	mov	r3, r0
 800b86c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	220b      	movs	r2, #11
 800b87a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b87c:	e058      	b.n	800b930 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b02      	cmp	r3, #2
 800b884:	d154      	bne.n	800b930 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	220d      	movs	r2, #13
 800b88a:	701a      	strb	r2, [r3, #0]
      break;
 800b88c:	e050      	b.n	800b930 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	220d      	movs	r2, #13
 800b892:	701a      	strb	r2, [r3, #0]
      break;
 800b894:	e04c      	b.n	800b930 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d049      	beq.n	800b934 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
      }
      break;
 800b8ac:	e042      	b.n	800b934 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff fd72 	bl	800b3a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d009      	beq.n	800b8da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ea:	2105      	movs	r1, #5
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d107      	bne.n	800b90c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fe2b 	bl	800b560 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b90a:	e014      	b.n	800b936 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f005 f9cf 	bl	8010cb0 <USBH_LL_Start>
      break;
 800b912:	e010      	b.n	800b936 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b914:	bf00      	nop
 800b916:	e00e      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b918:	bf00      	nop
 800b91a:	e00c      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b91c:	bf00      	nop
 800b91e:	e00a      	b.n	800b936 <USBH_Process+0x3b6>
    break;
 800b920:	bf00      	nop
 800b922:	e008      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b924:	bf00      	nop
 800b926:	e006      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b928:	bf00      	nop
 800b92a:	e004      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b92c:	bf00      	nop
 800b92e:	e002      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b930:	bf00      	nop
 800b932:	e000      	b.n	800b936 <USBH_Process+0x3b6>
      break;
 800b934:	bf00      	nop
  }
  return USBH_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af04      	add	r7, sp, #16
 800b946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b948:	2301      	movs	r3, #1
 800b94a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b94c:	2301      	movs	r3, #1
 800b94e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	785b      	ldrb	r3, [r3, #1]
 800b954:	2b07      	cmp	r3, #7
 800b956:	f200 81c1 	bhi.w	800bcdc <USBH_HandleEnum+0x39c>
 800b95a:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <USBH_HandleEnum+0x20>)
 800b95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b960:	0800b981 	.word	0x0800b981
 800b964:	0800ba3f 	.word	0x0800ba3f
 800b968:	0800baa9 	.word	0x0800baa9
 800b96c:	0800bb37 	.word	0x0800bb37
 800b970:	0800bba1 	.word	0x0800bba1
 800b974:	0800bc11 	.word	0x0800bc11
 800b978:	0800bc57 	.word	0x0800bc57
 800b97c:	0800bc9d 	.word	0x0800bc9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b980:	2108      	movs	r1, #8
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa50 	bl	800be28 <USBH_Get_DevDesc>
 800b988:	4603      	mov	r3, r0
 800b98a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d130      	bne.n	800b9f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7919      	ldrb	r1, [r3, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9b6:	b292      	uxth	r2, r2
 800b9b8:	9202      	str	r2, [sp, #8]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	9201      	str	r2, [sp, #4]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2280      	movs	r2, #128	; 0x80
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 ff77 	bl	800c8b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7959      	ldrb	r1, [r3, #5]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	9201      	str	r2, [sp, #4]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 ff63 	bl	800c8b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b9f2:	e175      	b.n	800bce0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	f040 8172 	bne.w	800bce0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba02:	3301      	adds	r3, #1
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d903      	bls.n	800ba1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	220d      	movs	r2, #13
 800ba1a:	701a      	strb	r2, [r3, #0]
      break;
 800ba1c:	e160      	b.n	800bce0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	795b      	ldrb	r3, [r3, #5]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 ff97 	bl	800c958 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	791b      	ldrb	r3, [r3, #4]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 ff91 	bl	800c958 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
      break;
 800ba3c:	e150      	b.n	800bce0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba3e:	2112      	movs	r1, #18
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f9f1 	bl	800be28 <USBH_Get_DevDesc>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d103      	bne.n	800ba58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba56:	e145      	b.n	800bce4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	f040 8142 	bne.w	800bce4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba66:	3301      	adds	r3, #1
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d903      	bls.n	800ba82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	220d      	movs	r2, #13
 800ba7e:	701a      	strb	r2, [r3, #0]
      break;
 800ba80:	e130      	b.n	800bce4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	795b      	ldrb	r3, [r3, #5]
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 ff65 	bl	800c958 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	791b      	ldrb	r3, [r3, #4]
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 ff5f 	bl	800c958 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	701a      	strb	r2, [r3, #0]
      break;
 800baa6:	e11d      	b.n	800bce4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800baa8:	2101      	movs	r1, #1
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fa68 	bl	800bf80 <USBH_SetAddress>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d132      	bne.n	800bb20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800baba:	2002      	movs	r0, #2
 800babc:	f005 fa8c 	bl	8010fd8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2203      	movs	r2, #3
 800bacc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7919      	ldrb	r1, [r3, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bae2:	b292      	uxth	r2, r2
 800bae4:	9202      	str	r2, [sp, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	9201      	str	r2, [sp, #4]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	4603      	mov	r3, r0
 800baee:	2280      	movs	r2, #128	; 0x80
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fee1 	bl	800c8b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	7959      	ldrb	r1, [r3, #5]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb0a:	b292      	uxth	r2, r2
 800bb0c:	9202      	str	r2, [sp, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	9201      	str	r2, [sp, #4]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	4603      	mov	r3, r0
 800bb16:	2200      	movs	r2, #0
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fecd 	bl	800c8b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb1e:	e0e3      	b.n	800bce8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	f040 80e0 	bne.w	800bce8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	220d      	movs	r2, #13
 800bb2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	705a      	strb	r2, [r3, #1]
      break;
 800bb34:	e0d8      	b.n	800bce8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb36:	2109      	movs	r1, #9
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f99d 	bl	800be78 <USBH_Get_CfgDesc>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2204      	movs	r2, #4
 800bb4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb4e:	e0cd      	b.n	800bcec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	f040 80ca 	bne.w	800bcec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d903      	bls.n	800bb7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	220d      	movs	r2, #13
 800bb76:	701a      	strb	r2, [r3, #0]
      break;
 800bb78:	e0b8      	b.n	800bcec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	795b      	ldrb	r3, [r3, #5]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fee9 	bl	800c958 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	791b      	ldrb	r3, [r3, #4]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fee3 	bl	800c958 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	701a      	strb	r2, [r3, #0]
      break;
 800bb9e:	e0a5      	b.n	800bcec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f965 	bl	800be78 <USBH_Get_CfgDesc>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d103      	bne.n	800bbc0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2205      	movs	r2, #5
 800bbbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbbe:	e097      	b.n	800bcf0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	f040 8094 	bne.w	800bcf0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d903      	bls.n	800bbea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	220d      	movs	r2, #13
 800bbe6:	701a      	strb	r2, [r3, #0]
      break;
 800bbe8:	e082      	b.n	800bcf0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	795b      	ldrb	r3, [r3, #5]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 feb1 	bl	800c958 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 feab 	bl	800c958 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
      break;
 800bc0e:	e06f      	b.n	800bcf0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d019      	beq.n	800bc4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc26:	23ff      	movs	r3, #255	; 0xff
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f949 	bl	800bec0 <USBH_Get_StringDesc>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d103      	bne.n	800bc40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2206      	movs	r2, #6
 800bc3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bc3e:	e059      	b.n	800bcf4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d156      	bne.n	800bcf4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2206      	movs	r2, #6
 800bc4a:	705a      	strb	r2, [r3, #1]
      break;
 800bc4c:	e052      	b.n	800bcf4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2206      	movs	r2, #6
 800bc52:	705a      	strb	r2, [r3, #1]
      break;
 800bc54:	e04e      	b.n	800bcf4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d019      	beq.n	800bc94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc6c:	23ff      	movs	r3, #255	; 0xff
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f926 	bl	800bec0 <USBH_Get_StringDesc>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d103      	bne.n	800bc86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2207      	movs	r2, #7
 800bc82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bc84:	e038      	b.n	800bcf8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d135      	bne.n	800bcf8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2207      	movs	r2, #7
 800bc90:	705a      	strb	r2, [r3, #1]
      break;
 800bc92:	e031      	b.n	800bcf8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2207      	movs	r2, #7
 800bc98:	705a      	strb	r2, [r3, #1]
      break;
 800bc9a:	e02d      	b.n	800bcf8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d017      	beq.n	800bcd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bcb2:	23ff      	movs	r3, #255	; 0xff
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f903 	bl	800bec0 <USBH_Get_StringDesc>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d102      	bne.n	800bcca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bcc8:	e018      	b.n	800bcfc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d115      	bne.n	800bcfc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd4:	e012      	b.n	800bcfc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcda:	e00f      	b.n	800bcfc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bcdc:	bf00      	nop
 800bcde:	e00e      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bce0:	bf00      	nop
 800bce2:	e00c      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bce4:	bf00      	nop
 800bce6:	e00a      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bce8:	bf00      	nop
 800bcea:	e008      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bcec:	bf00      	nop
 800bcee:	e006      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bcf0:	bf00      	nop
 800bcf2:	e004      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bcf4:	bf00      	nop
 800bcf6:	e002      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bcf8:	bf00      	nop
 800bcfa:	e000      	b.n	800bcfe <USBH_HandleEnum+0x3be>
      break;
 800bcfc:	bf00      	nop
  }
  return Status;
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f804 	bl	800bd4a <USBH_HandleSof>
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b0b      	cmp	r3, #11
 800bd5a:	d10a      	bne.n	800bd72 <USBH_HandleSof+0x28>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d005      	beq.n	800bd72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	4798      	blx	r3
  }
}
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bd8a:	bf00      	nop
}
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bda6:	bf00      	nop
}
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f004 ff70 	bl	8010ce6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	791b      	ldrb	r3, [r3, #4]
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fda3 	bl	800c958 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	795b      	ldrb	r3, [r3, #5]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fd9d 	bl	800c958 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	4613      	mov	r3, r2
 800be42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be46:	2100      	movs	r1, #0
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f864 	bl	800bf16 <USBH_GetDescriptor>
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10a      	bne.n	800be6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	b292      	uxth	r2, r2
 800be68:	4619      	mov	r1, r3
 800be6a:	f000 f918 	bl	800c09e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af02      	add	r7, sp, #8
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	331c      	adds	r3, #28
 800be88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800be8a:	887b      	ldrh	r3, [r7, #2]
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be94:	2100      	movs	r1, #0
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f83d 	bl	800bf16 <USBH_GetDescriptor>
 800be9c:	4603      	mov	r3, r0
 800be9e:	72fb      	strb	r3, [r7, #11]
 800bea0:	7afb      	ldrb	r3, [r7, #11]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d107      	bne.n	800beb6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800beac:	887a      	ldrh	r2, [r7, #2]
 800beae:	68f9      	ldr	r1, [r7, #12]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 f964 	bl	800c17e <USBH_ParseCfgDesc>
  }

  return status;
 800beb6:	7afb      	ldrb	r3, [r7, #11]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af02      	add	r7, sp, #8
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	607a      	str	r2, [r7, #4]
 800beca:	461a      	mov	r2, r3
 800becc:	460b      	mov	r3, r1
 800bece:	72fb      	strb	r3, [r7, #11]
 800bed0:	4613      	mov	r3, r2
 800bed2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bed4:	7afb      	ldrb	r3, [r7, #11]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bedc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bee4:	893b      	ldrh	r3, [r7, #8]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	460b      	mov	r3, r1
 800beea:	2100      	movs	r1, #0
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 f812 	bl	800bf16 <USBH_GetDescriptor>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d107      	bne.n	800bf0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bf02:	893a      	ldrh	r2, [r7, #8]
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 fa37 	bl	800c37a <USBH_ParseStringDesc>
  }

  return status;
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3718      	adds	r7, #24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	607b      	str	r3, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	72fb      	strb	r3, [r7, #11]
 800bf24:	4613      	mov	r3, r2
 800bf26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	789b      	ldrb	r3, [r3, #2]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d11c      	bne.n	800bf6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2206      	movs	r2, #6
 800bf40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	893a      	ldrh	r2, [r7, #8]
 800bf46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bf48:	893b      	ldrh	r3, [r7, #8]
 800bf4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bf4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf52:	d104      	bne.n	800bf5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f240 4209 	movw	r2, #1033	; 0x409
 800bf5a:	829a      	strh	r2, [r3, #20]
 800bf5c:	e002      	b.n	800bf64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8b3a      	ldrh	r2, [r7, #24]
 800bf68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bf6a:	8b3b      	ldrh	r3, [r7, #24]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f000 fa50 	bl	800c416 <USBH_CtlReq>
 800bf76:	4603      	mov	r3, r0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	789b      	ldrb	r3, [r3, #2]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d10f      	bne.n	800bfb4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2205      	movs	r2, #5
 800bf9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa2c 	bl	800c416 <USBH_CtlReq>
 800bfbe:	4603      	mov	r3, r0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	789b      	ldrb	r3, [r3, #2]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d10e      	bne.n	800bffa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2209      	movs	r2, #9
 800bfe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	887a      	ldrh	r2, [r7, #2]
 800bfec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bffa:	2200      	movs	r2, #0
 800bffc:	2100      	movs	r1, #0
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fa09 	bl	800c416 <USBH_CtlReq>
 800c004:	4603      	mov	r3, r0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	789b      	ldrb	r3, [r3, #2]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d10f      	bne.n	800c042 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2203      	movs	r2, #3
 800c02c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c02e:	78fb      	ldrb	r3, [r7, #3]
 800c030:	b29a      	uxth	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c042:	2200      	movs	r2, #0
 800c044:	2100      	movs	r1, #0
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f9e5 	bl	800c416 <USBH_CtlReq>
 800c04c:	4603      	mov	r3, r0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	789b      	ldrb	r3, [r3, #2]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d10f      	bne.n	800c08a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2202      	movs	r2, #2
 800c06e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c08a:	2200      	movs	r2, #0
 800c08c:	2100      	movs	r1, #0
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f9c1 	bl	800c416 <USBH_CtlReq>
 800c094:	4603      	mov	r3, r0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	785a      	ldrb	r2, [r3, #1]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	3302      	adds	r3, #2
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	3303      	adds	r3, #3
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	791a      	ldrb	r2, [r3, #4]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	795a      	ldrb	r2, [r3, #5]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	799a      	ldrb	r2, [r3, #6]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	79da      	ldrb	r2, [r3, #7]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	2b08      	cmp	r3, #8
 800c0fc:	d939      	bls.n	800c172 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3308      	adds	r3, #8
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	b29a      	uxth	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	3309      	adds	r3, #9
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	021b      	lsls	r3, r3, #8
 800c110:	b29b      	uxth	r3, r3
 800c112:	4313      	orrs	r3, r2
 800c114:	b29a      	uxth	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	330a      	adds	r3, #10
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	b29a      	uxth	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	330b      	adds	r3, #11
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4313      	orrs	r3, r2
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	330c      	adds	r3, #12
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	330d      	adds	r3, #13
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	b29b      	uxth	r3, r3
 800c146:	021b      	lsls	r3, r3, #8
 800c148:	b29b      	uxth	r3, r3
 800c14a:	4313      	orrs	r3, r2
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	7b9a      	ldrb	r2, [r3, #14]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	7bda      	ldrb	r2, [r3, #15]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	7c1a      	ldrb	r2, [r3, #16]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	7c5a      	ldrb	r2, [r3, #17]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	745a      	strb	r2, [r3, #17]
  }
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b08a      	sub	sp, #40	; 0x28
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	4613      	mov	r3, r2
 800c18a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c196:	2300      	movs	r3, #0
 800c198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	785a      	ldrb	r2, [r3, #1]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	3303      	adds	r3, #3
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	021b      	lsls	r3, r3, #8
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	791a      	ldrb	r2, [r3, #4]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	795a      	ldrb	r2, [r3, #5]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	799a      	ldrb	r2, [r3, #6]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	79da      	ldrb	r2, [r3, #7]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	7a1a      	ldrb	r2, [r3, #8]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c1f4:	88fb      	ldrh	r3, [r7, #6]
 800c1f6:	2b09      	cmp	r3, #9
 800c1f8:	d95f      	bls.n	800c2ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c1fa:	2309      	movs	r3, #9
 800c1fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c202:	e051      	b.n	800c2a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c204:	f107 0316 	add.w	r3, r7, #22
 800c208:	4619      	mov	r1, r3
 800c20a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c20c:	f000 f8e8 	bl	800c3e0 <USBH_GetNextDesc>
 800c210:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	2b04      	cmp	r3, #4
 800c218:	d146      	bne.n	800c2a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c21a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c21e:	221a      	movs	r2, #26
 800c220:	fb02 f303 	mul.w	r3, r2, r3
 800c224:	3308      	adds	r3, #8
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	3302      	adds	r3, #2
 800c22c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c22e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c230:	69f8      	ldr	r0, [r7, #28]
 800c232:	f000 f846 	bl	800c2c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c240:	e022      	b.n	800c288 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c242:	f107 0316 	add.w	r3, r7, #22
 800c246:	4619      	mov	r1, r3
 800c248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c24a:	f000 f8c9 	bl	800c3e0 <USBH_GetNextDesc>
 800c24e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	785b      	ldrb	r3, [r3, #1]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d117      	bne.n	800c288 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c25c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c260:	3201      	adds	r2, #1
 800c262:	00d2      	lsls	r2, r2, #3
 800c264:	211a      	movs	r1, #26
 800c266:	fb01 f303 	mul.w	r3, r1, r3
 800c26a:	4413      	add	r3, r2
 800c26c:	3308      	adds	r3, #8
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	4413      	add	r3, r2
 800c272:	3304      	adds	r3, #4
 800c274:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c278:	69b8      	ldr	r0, [r7, #24]
 800c27a:	f000 f851 	bl	800c320 <USBH_ParseEPDesc>
            ep_ix++;
 800c27e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c282:	3301      	adds	r3, #1
 800c284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	791b      	ldrb	r3, [r3, #4]
 800c28c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c290:	429a      	cmp	r2, r3
 800c292:	d204      	bcs.n	800c29e <USBH_ParseCfgDesc+0x120>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	885a      	ldrh	r2, [r3, #2]
 800c298:	8afb      	ldrh	r3, [r7, #22]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d8d1      	bhi.n	800c242 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c29e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c2a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d804      	bhi.n	800c2ba <USBH_ParseCfgDesc+0x13c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	885a      	ldrh	r2, [r3, #2]
 800c2b4:	8afb      	ldrh	r3, [r7, #22]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d8a4      	bhi.n	800c204 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c2ba:	bf00      	nop
 800c2bc:	3728      	adds	r7, #40	; 0x28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	785a      	ldrb	r2, [r3, #1]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	789a      	ldrb	r2, [r3, #2]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	78da      	ldrb	r2, [r3, #3]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	791a      	ldrb	r2, [r3, #4]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	795a      	ldrb	r2, [r3, #5]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	799a      	ldrb	r2, [r3, #6]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	79da      	ldrb	r2, [r3, #7]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	7a1a      	ldrb	r2, [r3, #8]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	721a      	strb	r2, [r3, #8]
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	781a      	ldrb	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	785a      	ldrb	r2, [r3, #1]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	789a      	ldrb	r2, [r3, #2]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	78da      	ldrb	r2, [r3, #3]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	3304      	adds	r3, #4
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	b29a      	uxth	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	3305      	adds	r3, #5
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	4313      	orrs	r3, r2
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	799a      	ldrb	r2, [r3, #6]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	719a      	strb	r2, [r3, #6]
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b087      	sub	sp, #28
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	4613      	mov	r3, r2
 800c386:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3301      	adds	r3, #1
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d120      	bne.n	800c3d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	1e9a      	subs	r2, r3, #2
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	4293      	cmp	r3, r2
 800c39c:	bf28      	it	cs
 800c39e:	4613      	movcs	r3, r2
 800c3a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3302      	adds	r3, #2
 800c3a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	82fb      	strh	r3, [r7, #22]
 800c3ac:	e00b      	b.n	800c3c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c3ae:	8afb      	ldrh	r3, [r7, #22]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	781a      	ldrb	r2, [r3, #0]
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c3c0:	8afb      	ldrh	r3, [r7, #22]
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	82fb      	strh	r3, [r7, #22]
 800c3c6:	8afa      	ldrh	r2, [r7, #22]
 800c3c8:	8abb      	ldrh	r3, [r7, #20]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d3ef      	bcc.n	800c3ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	701a      	strb	r2, [r3, #0]
  }
}
 800c3d4:	bf00      	nop
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	881a      	ldrh	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c408:	68fb      	ldr	r3, [r7, #12]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b086      	sub	sp, #24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	4613      	mov	r3, r2
 800c422:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c424:	2301      	movs	r3, #1
 800c426:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	789b      	ldrb	r3, [r3, #2]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d002      	beq.n	800c436 <USBH_CtlReq+0x20>
 800c430:	2b02      	cmp	r3, #2
 800c432:	d00f      	beq.n	800c454 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c434:	e027      	b.n	800c486 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	88fa      	ldrh	r2, [r7, #6]
 800c440:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2202      	movs	r2, #2
 800c44c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c44e:	2301      	movs	r3, #1
 800c450:	75fb      	strb	r3, [r7, #23]
      break;
 800c452:	e018      	b.n	800c486 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 f81b 	bl	800c490 <USBH_HandleControl>
 800c45a:	4603      	mov	r3, r0
 800c45c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <USBH_CtlReq+0x54>
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	2b03      	cmp	r3, #3
 800c468:	d106      	bne.n	800c478 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2201      	movs	r2, #1
 800c46e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	761a      	strb	r2, [r3, #24]
      break;
 800c476:	e005      	b.n	800c484 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d102      	bne.n	800c484 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2201      	movs	r2, #1
 800c482:	709a      	strb	r2, [r3, #2]
      break;
 800c484:	bf00      	nop
  }
  return status;
 800c486:	7dfb      	ldrb	r3, [r7, #23]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af02      	add	r7, sp, #8
 800c496:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	7e1b      	ldrb	r3, [r3, #24]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	2b0a      	cmp	r3, #10
 800c4a8:	f200 8156 	bhi.w	800c758 <USBH_HandleControl+0x2c8>
 800c4ac:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <USBH_HandleControl+0x24>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c4e1 	.word	0x0800c4e1
 800c4b8:	0800c4fb 	.word	0x0800c4fb
 800c4bc:	0800c565 	.word	0x0800c565
 800c4c0:	0800c58b 	.word	0x0800c58b
 800c4c4:	0800c5c3 	.word	0x0800c5c3
 800c4c8:	0800c5ed 	.word	0x0800c5ed
 800c4cc:	0800c63f 	.word	0x0800c63f
 800c4d0:	0800c661 	.word	0x0800c661
 800c4d4:	0800c69d 	.word	0x0800c69d
 800c4d8:	0800c6c3 	.word	0x0800c6c3
 800c4dc:	0800c701 	.word	0x0800c701
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f103 0110 	add.w	r1, r3, #16
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	795b      	ldrb	r3, [r3, #5]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f943 	bl	800c778 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	761a      	strb	r2, [r3, #24]
      break;
 800c4f8:	e139      	b.n	800c76e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	795b      	ldrb	r3, [r3, #5]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f004 fcdf 	bl	8010ec4 <USBH_LL_GetURBState>
 800c506:	4603      	mov	r3, r0
 800c508:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d11e      	bne.n	800c54e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7c1b      	ldrb	r3, [r3, #16]
 800c514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c518:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	8adb      	ldrh	r3, [r3, #22]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00a      	beq.n	800c538 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c522:	7b7b      	ldrb	r3, [r7, #13]
 800c524:	2b80      	cmp	r3, #128	; 0x80
 800c526:	d103      	bne.n	800c530 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2203      	movs	r2, #3
 800c52c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c52e:	e115      	b.n	800c75c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2205      	movs	r2, #5
 800c534:	761a      	strb	r2, [r3, #24]
      break;
 800c536:	e111      	b.n	800c75c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c538:	7b7b      	ldrb	r3, [r7, #13]
 800c53a:	2b80      	cmp	r3, #128	; 0x80
 800c53c:	d103      	bne.n	800c546 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2209      	movs	r2, #9
 800c542:	761a      	strb	r2, [r3, #24]
      break;
 800c544:	e10a      	b.n	800c75c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2207      	movs	r2, #7
 800c54a:	761a      	strb	r2, [r3, #24]
      break;
 800c54c:	e106      	b.n	800c75c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	2b04      	cmp	r3, #4
 800c552:	d003      	beq.n	800c55c <USBH_HandleControl+0xcc>
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b02      	cmp	r3, #2
 800c558:	f040 8100 	bne.w	800c75c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	220b      	movs	r2, #11
 800c560:	761a      	strb	r2, [r3, #24]
      break;
 800c562:	e0fb      	b.n	800c75c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6899      	ldr	r1, [r3, #8]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	899a      	ldrh	r2, [r3, #12]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	791b      	ldrb	r3, [r3, #4]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f93a 	bl	800c7f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2204      	movs	r2, #4
 800c586:	761a      	strb	r2, [r3, #24]
      break;
 800c588:	e0f1      	b.n	800c76e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	791b      	ldrb	r3, [r3, #4]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f004 fc97 	bl	8010ec4 <USBH_LL_GetURBState>
 800c596:	4603      	mov	r3, r0
 800c598:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d102      	bne.n	800c5a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2209      	movs	r2, #9
 800c5a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	2b05      	cmp	r3, #5
 800c5aa:	d102      	bne.n	800c5b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c5b0:	e0d6      	b.n	800c760 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	f040 80d3 	bne.w	800c760 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	220b      	movs	r2, #11
 800c5be:	761a      	strb	r2, [r3, #24]
      break;
 800c5c0:	e0ce      	b.n	800c760 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6899      	ldr	r1, [r3, #8]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	899a      	ldrh	r2, [r3, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	795b      	ldrb	r3, [r3, #5]
 800c5ce:	2001      	movs	r0, #1
 800c5d0:	9000      	str	r0, [sp, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f8ea 	bl	800c7ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2206      	movs	r2, #6
 800c5e8:	761a      	strb	r2, [r3, #24]
      break;
 800c5ea:	e0c0      	b.n	800c76e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	795b      	ldrb	r3, [r3, #5]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f004 fc66 	bl	8010ec4 <USBH_LL_GetURBState>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d103      	bne.n	800c60a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2207      	movs	r2, #7
 800c606:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c608:	e0ac      	b.n	800c764 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b05      	cmp	r3, #5
 800c60e:	d105      	bne.n	800c61c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	220c      	movs	r2, #12
 800c614:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c616:	2303      	movs	r3, #3
 800c618:	73fb      	strb	r3, [r7, #15]
      break;
 800c61a:	e0a3      	b.n	800c764 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c61c:	7bbb      	ldrb	r3, [r7, #14]
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d103      	bne.n	800c62a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2205      	movs	r2, #5
 800c626:	761a      	strb	r2, [r3, #24]
      break;
 800c628:	e09c      	b.n	800c764 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	f040 8099 	bne.w	800c764 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	220b      	movs	r2, #11
 800c636:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c638:	2302      	movs	r3, #2
 800c63a:	73fb      	strb	r3, [r7, #15]
      break;
 800c63c:	e092      	b.n	800c764 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	791b      	ldrb	r3, [r3, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	2100      	movs	r1, #0
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f8d5 	bl	800c7f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2208      	movs	r2, #8
 800c65c:	761a      	strb	r2, [r3, #24]

      break;
 800c65e:	e086      	b.n	800c76e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	791b      	ldrb	r3, [r3, #4]
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f004 fc2c 	bl	8010ec4 <USBH_LL_GetURBState>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d105      	bne.n	800c682 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	220d      	movs	r2, #13
 800c67a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c680:	e072      	b.n	800c768 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c682:	7bbb      	ldrb	r3, [r7, #14]
 800c684:	2b04      	cmp	r3, #4
 800c686:	d103      	bne.n	800c690 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	220b      	movs	r2, #11
 800c68c:	761a      	strb	r2, [r3, #24]
      break;
 800c68e:	e06b      	b.n	800c768 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c690:	7bbb      	ldrb	r3, [r7, #14]
 800c692:	2b05      	cmp	r3, #5
 800c694:	d168      	bne.n	800c768 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c696:	2303      	movs	r3, #3
 800c698:	73fb      	strb	r3, [r7, #15]
      break;
 800c69a:	e065      	b.n	800c768 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	795b      	ldrb	r3, [r3, #5]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	9200      	str	r2, [sp, #0]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f87f 	bl	800c7ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	220a      	movs	r2, #10
 800c6be:	761a      	strb	r2, [r3, #24]
      break;
 800c6c0:	e055      	b.n	800c76e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	795b      	ldrb	r3, [r3, #5]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f004 fbfb 	bl	8010ec4 <USBH_LL_GetURBState>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d105      	bne.n	800c6e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	220d      	movs	r2, #13
 800c6e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c6e2:	e043      	b.n	800c76c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d103      	bne.n	800c6f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2209      	movs	r2, #9
 800c6ee:	761a      	strb	r2, [r3, #24]
      break;
 800c6f0:	e03c      	b.n	800c76c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d139      	bne.n	800c76c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	220b      	movs	r2, #11
 800c6fc:	761a      	strb	r2, [r3, #24]
      break;
 800c6fe:	e035      	b.n	800c76c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7e5b      	ldrb	r3, [r3, #25]
 800c704:	3301      	adds	r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	765a      	strb	r2, [r3, #25]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	7e5b      	ldrb	r3, [r3, #25]
 800c710:	2b02      	cmp	r3, #2
 800c712:	d806      	bhi.n	800c722 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c720:	e025      	b.n	800c76e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c728:	2106      	movs	r1, #6
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	795b      	ldrb	r3, [r3, #5]
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f90c 	bl	800c958 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	791b      	ldrb	r3, [r3, #4]
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f906 	bl	800c958 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c752:	2302      	movs	r3, #2
 800c754:	73fb      	strb	r3, [r7, #15]
      break;
 800c756:	e00a      	b.n	800c76e <USBH_HandleControl+0x2de>

    default:
      break;
 800c758:	bf00      	nop
 800c75a:	e008      	b.n	800c76e <USBH_HandleControl+0x2de>
      break;
 800c75c:	bf00      	nop
 800c75e:	e006      	b.n	800c76e <USBH_HandleControl+0x2de>
      break;
 800c760:	bf00      	nop
 800c762:	e004      	b.n	800c76e <USBH_HandleControl+0x2de>
      break;
 800c764:	bf00      	nop
 800c766:	e002      	b.n	800c76e <USBH_HandleControl+0x2de>
      break;
 800c768:	bf00      	nop
 800c76a:	e000      	b.n	800c76e <USBH_HandleControl+0x2de>
      break;
 800c76c:	bf00      	nop
  }

  return status;
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af04      	add	r7, sp, #16
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	4613      	mov	r3, r2
 800c784:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c786:	79f9      	ldrb	r1, [r7, #7]
 800c788:	2300      	movs	r3, #0
 800c78a:	9303      	str	r3, [sp, #12]
 800c78c:	2308      	movs	r3, #8
 800c78e:	9302      	str	r3, [sp, #8]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	2300      	movs	r3, #0
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	2300      	movs	r3, #0
 800c79a:	2200      	movs	r2, #0
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f004 fb60 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	80fb      	strh	r3, [r7, #6]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c7d0:	7979      	ldrb	r1, [r7, #5]
 800c7d2:	7e3b      	ldrb	r3, [r7, #24]
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	88fb      	ldrh	r3, [r7, #6]
 800c7d8:	9302      	str	r3, [sp, #8]
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	9301      	str	r3, [sp, #4]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f004 fb3b 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b088      	sub	sp, #32
 800c7fa:	af04      	add	r7, sp, #16
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	4611      	mov	r1, r2
 800c802:	461a      	mov	r2, r3
 800c804:	460b      	mov	r3, r1
 800c806:	80fb      	strh	r3, [r7, #6]
 800c808:	4613      	mov	r3, r2
 800c80a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c80c:	7979      	ldrb	r1, [r7, #5]
 800c80e:	2300      	movs	r3, #0
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	88fb      	ldrh	r3, [r7, #6]
 800c814:	9302      	str	r3, [sp, #8]
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	2301      	movs	r3, #1
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	2300      	movs	r3, #0
 800c820:	2201      	movs	r2, #1
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f004 fb1d 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c828:	2300      	movs	r3, #0

}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b088      	sub	sp, #32
 800c836:	af04      	add	r7, sp, #16
 800c838:	60f8      	str	r0, [r7, #12]
 800c83a:	60b9      	str	r1, [r7, #8]
 800c83c:	4611      	mov	r1, r2
 800c83e:	461a      	mov	r2, r3
 800c840:	460b      	mov	r3, r1
 800c842:	80fb      	strh	r3, [r7, #6]
 800c844:	4613      	mov	r3, r2
 800c846:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c852:	2300      	movs	r3, #0
 800c854:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c856:	7979      	ldrb	r1, [r7, #5]
 800c858:	7e3b      	ldrb	r3, [r7, #24]
 800c85a:	9303      	str	r3, [sp, #12]
 800c85c:	88fb      	ldrh	r3, [r7, #6]
 800c85e:	9302      	str	r3, [sp, #8]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	2301      	movs	r3, #1
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	2302      	movs	r3, #2
 800c86a:	2200      	movs	r2, #0
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f004 faf8 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af04      	add	r7, sp, #16
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4611      	mov	r1, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	460b      	mov	r3, r1
 800c88c:	80fb      	strh	r3, [r7, #6]
 800c88e:	4613      	mov	r3, r2
 800c890:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c892:	7979      	ldrb	r1, [r7, #5]
 800c894:	2300      	movs	r3, #0
 800c896:	9303      	str	r3, [sp, #12]
 800c898:	88fb      	ldrh	r3, [r7, #6]
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f004 fada 	bl	8010e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af04      	add	r7, sp, #16
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	70fb      	strb	r3, [r7, #3]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	70bb      	strb	r3, [r7, #2]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c8d2:	7878      	ldrb	r0, [r7, #1]
 800c8d4:	78ba      	ldrb	r2, [r7, #2]
 800c8d6:	78f9      	ldrb	r1, [r7, #3]
 800c8d8:	8b3b      	ldrh	r3, [r7, #24]
 800c8da:	9302      	str	r3, [sp, #8]
 800c8dc:	7d3b      	ldrb	r3, [r7, #20]
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	7c3b      	ldrb	r3, [r7, #16]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f004 fa6d 	bl	8010dc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c902:	78fb      	ldrb	r3, [r7, #3]
 800c904:	4619      	mov	r1, r3
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f004 fa8c 	bl	8010e24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f836 	bl	800c994 <USBH_GetFreePipe>
 800c928:	4603      	mov	r3, r0
 800c92a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c92c:	89fb      	ldrh	r3, [r7, #14]
 800c92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c932:	4293      	cmp	r3, r2
 800c934:	d00a      	beq.n	800c94c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c936:	78fa      	ldrb	r2, [r7, #3]
 800c938:	89fb      	ldrh	r3, [r7, #14]
 800c93a:	f003 030f 	and.w	r3, r3, #15
 800c93e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	33e0      	adds	r3, #224	; 0xe0
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c94c:	89fb      	ldrh	r3, [r7, #14]
 800c94e:	b2db      	uxtb	r3, r3
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	2b0a      	cmp	r3, #10
 800c968:	d80d      	bhi.n	800c986 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	33e0      	adds	r3, #224	; 0xe0
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c97c:	6879      	ldr	r1, [r7, #4]
 800c97e:	33e0      	adds	r3, #224	; 0xe0
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	440b      	add	r3, r1
 800c984:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73fb      	strb	r3, [r7, #15]
 800c9a4:	e00f      	b.n	800c9c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	33e0      	adds	r3, #224	; 0xe0
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	e007      	b.n	800c9d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	73fb      	strb	r3, [r7, #15]
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	2b0a      	cmp	r3, #10
 800c9ca:	d9ec      	bls.n	800c9a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c9cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	4a08      	ldr	r2, [pc, #32]	; (800ca0c <disk_status+0x30>)
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	79fa      	ldrb	r2, [r7, #7]
 800c9f4:	4905      	ldr	r1, [pc, #20]	; (800ca0c <disk_status+0x30>)
 800c9f6:	440a      	add	r2, r1
 800c9f8:	7a12      	ldrb	r2, [r2, #8]
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	4798      	blx	r3
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	20003084 	.word	0x20003084

0800ca10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	4a0d      	ldr	r2, [pc, #52]	; (800ca58 <disk_initialize+0x48>)
 800ca22:	5cd3      	ldrb	r3, [r2, r3]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d111      	bne.n	800ca4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <disk_initialize+0x48>)
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	4a09      	ldr	r2, [pc, #36]	; (800ca58 <disk_initialize+0x48>)
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	79fa      	ldrb	r2, [r7, #7]
 800ca3e:	4906      	ldr	r1, [pc, #24]	; (800ca58 <disk_initialize+0x48>)
 800ca40:	440a      	add	r2, r1
 800ca42:	7a12      	ldrb	r2, [r2, #8]
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20003084 	.word	0x20003084

0800ca5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ca5c:	b590      	push	{r4, r7, lr}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	4a0a      	ldr	r2, [pc, #40]	; (800ca98 <disk_read+0x3c>)
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	689c      	ldr	r4, [r3, #8]
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	4a07      	ldr	r2, [pc, #28]	; (800ca98 <disk_read+0x3c>)
 800ca7c:	4413      	add	r3, r2
 800ca7e:	7a18      	ldrb	r0, [r3, #8]
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	47a0      	blx	r4
 800ca88:	4603      	mov	r3, r0
 800ca8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ca8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	371c      	adds	r7, #28
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd90      	pop	{r4, r7, pc}
 800ca96:	bf00      	nop
 800ca98:	20003084 	.word	0x20003084

0800ca9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ca9c:	b590      	push	{r4, r7, lr}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60b9      	str	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	4a0a      	ldr	r2, [pc, #40]	; (800cad8 <disk_write+0x3c>)
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	68dc      	ldr	r4, [r3, #12]
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	4a07      	ldr	r2, [pc, #28]	; (800cad8 <disk_write+0x3c>)
 800cabc:	4413      	add	r3, r2
 800cabe:	7a18      	ldrb	r0, [r3, #8]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	47a0      	blx	r4
 800cac8:	4603      	mov	r3, r0
 800caca:	75fb      	strb	r3, [r7, #23]
  return res;
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd90      	pop	{r4, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20003084 	.word	0x20003084

0800cadc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	603a      	str	r2, [r7, #0]
 800cae6:	71fb      	strb	r3, [r7, #7]
 800cae8:	460b      	mov	r3, r1
 800caea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	4a09      	ldr	r2, [pc, #36]	; (800cb14 <disk_ioctl+0x38>)
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4413      	add	r3, r2
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	79fa      	ldrb	r2, [r7, #7]
 800cafa:	4906      	ldr	r1, [pc, #24]	; (800cb14 <disk_ioctl+0x38>)
 800cafc:	440a      	add	r2, r1
 800cafe:	7a10      	ldrb	r0, [r2, #8]
 800cb00:	79b9      	ldrb	r1, [r7, #6]
 800cb02:	683a      	ldr	r2, [r7, #0]
 800cb04:	4798      	blx	r3
 800cb06:	4603      	mov	r3, r0
 800cb08:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	20003084 	.word	0x20003084

0800cb18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3301      	adds	r3, #1
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cb28:	89fb      	ldrh	r3, [r7, #14]
 800cb2a:	021b      	lsls	r3, r3, #8
 800cb2c:	b21a      	sxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b21b      	sxth	r3, r3
 800cb34:	4313      	orrs	r3, r2
 800cb36:	b21b      	sxth	r3, r3
 800cb38:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cb3a:	89fb      	ldrh	r3, [r7, #14]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3714      	adds	r7, #20
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3303      	adds	r3, #3
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	021b      	lsls	r3, r3, #8
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	3202      	adds	r2, #2
 800cb60:	7812      	ldrb	r2, [r2, #0]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	021b      	lsls	r3, r3, #8
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	3201      	adds	r2, #1
 800cb6e:	7812      	ldrb	r2, [r2, #0]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	021b      	lsls	r3, r3, #8
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	7812      	ldrb	r2, [r2, #0]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]
	return rv;
 800cb80:	68fb      	ldr	r3, [r7, #12]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	460b      	mov	r3, r1
 800cb98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	887a      	ldrh	r2, [r7, #2]
 800cba2:	b2d2      	uxtb	r2, r2
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	887b      	ldrh	r3, [r7, #2]
 800cba8:	0a1b      	lsrs	r3, r3, #8
 800cbaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	607a      	str	r2, [r7, #4]
 800cbb2:	887a      	ldrh	r2, [r7, #2]
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	701a      	strb	r2, [r3, #0]
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	b2d2      	uxtb	r2, r2
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	0a1b      	lsrs	r3, r3, #8
 800cbde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	607a      	str	r2, [r7, #4]
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	0a1b      	lsrs	r3, r3, #8
 800cbf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	b2d2      	uxtb	r2, r2
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	0a1b      	lsrs	r3, r3, #8
 800cc02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	607a      	str	r2, [r7, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	701a      	strb	r2, [r3, #0]
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00d      	beq.n	800cc52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	1c53      	adds	r3, r2, #1
 800cc3a:	613b      	str	r3, [r7, #16]
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	1c59      	adds	r1, r3, #1
 800cc40:	6179      	str	r1, [r7, #20]
 800cc42:	7812      	ldrb	r2, [r2, #0]
 800cc44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	607b      	str	r3, [r7, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1f1      	bne.n	800cc36 <mem_cpy+0x1a>
	}
}
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cc5e:	b480      	push	{r7}
 800cc60:	b087      	sub	sp, #28
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	617a      	str	r2, [r7, #20]
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1f3      	bne.n	800cc6e <mem_set+0x10>
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	371c      	adds	r7, #28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cc94:	b480      	push	{r7}
 800cc96:	b089      	sub	sp, #36	; 0x24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	61fa      	str	r2, [r7, #28]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	61ba      	str	r2, [r7, #24]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	1acb      	subs	r3, r1, r3
 800ccc0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <mem_cmp+0x40>
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d0eb      	beq.n	800ccac <mem_cmp+0x18>

	return r;
 800ccd4:	697b      	ldr	r3, [r7, #20]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3724      	adds	r7, #36	; 0x24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ccec:	e002      	b.n	800ccf4 <chk_chr+0x12>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	607b      	str	r3, [r7, #4]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <chk_chr+0x26>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d1f2      	bne.n	800ccee <chk_chr+0xc>
	return *str;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	781b      	ldrb	r3, [r3, #0]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd22:	2300      	movs	r3, #0
 800cd24:	60bb      	str	r3, [r7, #8]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	e029      	b.n	800cd80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cd2c:	4a27      	ldr	r2, [pc, #156]	; (800cdcc <chk_lock+0xb4>)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	011b      	lsls	r3, r3, #4
 800cd32:	4413      	add	r3, r2
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d01d      	beq.n	800cd76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd3a:	4a24      	ldr	r2, [pc, #144]	; (800cdcc <chk_lock+0xb4>)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	011b      	lsls	r3, r3, #4
 800cd40:	4413      	add	r3, r2
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d116      	bne.n	800cd7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cd4c:	4a1f      	ldr	r2, [pc, #124]	; (800cdcc <chk_lock+0xb4>)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	011b      	lsls	r3, r3, #4
 800cd52:	4413      	add	r3, r2
 800cd54:	3304      	adds	r3, #4
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d10c      	bne.n	800cd7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd60:	4a1a      	ldr	r2, [pc, #104]	; (800cdcc <chk_lock+0xb4>)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	4413      	add	r3, r2
 800cd68:	3308      	adds	r3, #8
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d102      	bne.n	800cd7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd74:	e007      	b.n	800cd86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cd76:	2301      	movs	r3, #1
 800cd78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d9d2      	bls.n	800cd2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d109      	bne.n	800cda0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d102      	bne.n	800cd98 <chk_lock+0x80>
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d101      	bne.n	800cd9c <chk_lock+0x84>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	e010      	b.n	800cdbe <chk_lock+0xa6>
 800cd9c:	2312      	movs	r3, #18
 800cd9e:	e00e      	b.n	800cdbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d108      	bne.n	800cdb8 <chk_lock+0xa0>
 800cda6:	4a09      	ldr	r2, [pc, #36]	; (800cdcc <chk_lock+0xb4>)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	011b      	lsls	r3, r3, #4
 800cdac:	4413      	add	r3, r2
 800cdae:	330c      	adds	r3, #12
 800cdb0:	881b      	ldrh	r3, [r3, #0]
 800cdb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb6:	d101      	bne.n	800cdbc <chk_lock+0xa4>
 800cdb8:	2310      	movs	r3, #16
 800cdba:	e000      	b.n	800cdbe <chk_lock+0xa6>
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	20003064 	.word	0x20003064

0800cdd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	607b      	str	r3, [r7, #4]
 800cdda:	e002      	b.n	800cde2 <enq_lock+0x12>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3301      	adds	r3, #1
 800cde0:	607b      	str	r3, [r7, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d806      	bhi.n	800cdf6 <enq_lock+0x26>
 800cde8:	4a09      	ldr	r2, [pc, #36]	; (800ce10 <enq_lock+0x40>)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	4413      	add	r3, r2
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1f2      	bne.n	800cddc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	bf14      	ite	ne
 800cdfc:	2301      	movne	r3, #1
 800cdfe:	2300      	moveq	r3, #0
 800ce00:	b2db      	uxtb	r3, r3
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	20003064 	.word	0x20003064

0800ce14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e01f      	b.n	800ce64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ce24:	4a41      	ldr	r2, [pc, #260]	; (800cf2c <inc_lock+0x118>)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	011b      	lsls	r3, r3, #4
 800ce2a:	4413      	add	r3, r2
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d113      	bne.n	800ce5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ce36:	4a3d      	ldr	r2, [pc, #244]	; (800cf2c <inc_lock+0x118>)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	4413      	add	r3, r2
 800ce3e:	3304      	adds	r3, #4
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d109      	bne.n	800ce5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ce4a:	4a38      	ldr	r2, [pc, #224]	; (800cf2c <inc_lock+0x118>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	4413      	add	r3, r2
 800ce52:	3308      	adds	r3, #8
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d006      	beq.n	800ce6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3301      	adds	r3, #1
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d9dc      	bls.n	800ce24 <inc_lock+0x10>
 800ce6a:	e000      	b.n	800ce6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ce6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d132      	bne.n	800ceda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	e002      	b.n	800ce80 <inc_lock+0x6c>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d806      	bhi.n	800ce94 <inc_lock+0x80>
 800ce86:	4a29      	ldr	r2, [pc, #164]	; (800cf2c <inc_lock+0x118>)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	011b      	lsls	r3, r3, #4
 800ce8c:	4413      	add	r3, r2
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1f2      	bne.n	800ce7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d101      	bne.n	800ce9e <inc_lock+0x8a>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e040      	b.n	800cf20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	4922      	ldr	r1, [pc, #136]	; (800cf2c <inc_lock+0x118>)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	011b      	lsls	r3, r3, #4
 800cea8:	440b      	add	r3, r1
 800ceaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	491e      	ldr	r1, [pc, #120]	; (800cf2c <inc_lock+0x118>)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3304      	adds	r3, #4
 800ceba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	695a      	ldr	r2, [r3, #20]
 800cec0:	491a      	ldr	r1, [pc, #104]	; (800cf2c <inc_lock+0x118>)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	011b      	lsls	r3, r3, #4
 800cec6:	440b      	add	r3, r1
 800cec8:	3308      	adds	r3, #8
 800ceca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cecc:	4a17      	ldr	r2, [pc, #92]	; (800cf2c <inc_lock+0x118>)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	011b      	lsls	r3, r3, #4
 800ced2:	4413      	add	r3, r2
 800ced4:	330c      	adds	r3, #12
 800ced6:	2200      	movs	r2, #0
 800ced8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d009      	beq.n	800cef4 <inc_lock+0xe0>
 800cee0:	4a12      	ldr	r2, [pc, #72]	; (800cf2c <inc_lock+0x118>)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	4413      	add	r3, r2
 800cee8:	330c      	adds	r3, #12
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <inc_lock+0xe0>
 800cef0:	2300      	movs	r3, #0
 800cef2:	e015      	b.n	800cf20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d108      	bne.n	800cf0c <inc_lock+0xf8>
 800cefa:	4a0c      	ldr	r2, [pc, #48]	; (800cf2c <inc_lock+0x118>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	011b      	lsls	r3, r3, #4
 800cf00:	4413      	add	r3, r2
 800cf02:	330c      	adds	r3, #12
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	e001      	b.n	800cf10 <inc_lock+0xfc>
 800cf0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf10:	4906      	ldr	r1, [pc, #24]	; (800cf2c <inc_lock+0x118>)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	440b      	add	r3, r1
 800cf18:	330c      	adds	r3, #12
 800cf1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	3301      	adds	r3, #1
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	20003064 	.word	0x20003064

0800cf30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	607b      	str	r3, [r7, #4]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d825      	bhi.n	800cf90 <dec_lock+0x60>
		n = Files[i].ctr;
 800cf44:	4a17      	ldr	r2, [pc, #92]	; (800cfa4 <dec_lock+0x74>)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	011b      	lsls	r3, r3, #4
 800cf4a:	4413      	add	r3, r2
 800cf4c:	330c      	adds	r3, #12
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cf52:	89fb      	ldrh	r3, [r7, #14]
 800cf54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf58:	d101      	bne.n	800cf5e <dec_lock+0x2e>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cf5e:	89fb      	ldrh	r3, [r7, #14]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <dec_lock+0x3a>
 800cf64:	89fb      	ldrh	r3, [r7, #14]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cf6a:	4a0e      	ldr	r2, [pc, #56]	; (800cfa4 <dec_lock+0x74>)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	4413      	add	r3, r2
 800cf72:	330c      	adds	r3, #12
 800cf74:	89fa      	ldrh	r2, [r7, #14]
 800cf76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cf78:	89fb      	ldrh	r3, [r7, #14]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d105      	bne.n	800cf8a <dec_lock+0x5a>
 800cf7e:	4a09      	ldr	r2, [pc, #36]	; (800cfa4 <dec_lock+0x74>)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	4413      	add	r3, r2
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	737b      	strb	r3, [r7, #13]
 800cf8e:	e001      	b.n	800cf94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cf90:	2302      	movs	r3, #2
 800cf92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cf94:	7b7b      	ldrb	r3, [r7, #13]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20003064 	.word	0x20003064

0800cfa8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e010      	b.n	800cfd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cfb6:	4a0d      	ldr	r2, [pc, #52]	; (800cfec <clear_lock+0x44>)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	011b      	lsls	r3, r3, #4
 800cfbc:	4413      	add	r3, r2
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d105      	bne.n	800cfd2 <clear_lock+0x2a>
 800cfc6:	4a09      	ldr	r2, [pc, #36]	; (800cfec <clear_lock+0x44>)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	011b      	lsls	r3, r3, #4
 800cfcc:	4413      	add	r3, r2
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d9eb      	bls.n	800cfb6 <clear_lock+0xe>
	}
}
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20003064 	.word	0x20003064

0800cff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	78db      	ldrb	r3, [r3, #3]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d034      	beq.n	800d06e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	7858      	ldrb	r0, [r3, #1]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d014:	2301      	movs	r3, #1
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	f7ff fd40 	bl	800ca9c <disk_write>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d022:	2301      	movs	r3, #1
 800d024:	73fb      	strb	r3, [r7, #15]
 800d026:	e022      	b.n	800d06e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	1ad2      	subs	r2, r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d217      	bcs.n	800d06e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	789b      	ldrb	r3, [r3, #2]
 800d042:	613b      	str	r3, [r7, #16]
 800d044:	e010      	b.n	800d068 <sync_window+0x78>
					wsect += fs->fsize;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	4413      	add	r3, r2
 800d04e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7858      	ldrb	r0, [r3, #1]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d05a:	2301      	movs	r3, #1
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	f7ff fd1d 	bl	800ca9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3b01      	subs	r3, #1
 800d066:	613b      	str	r3, [r7, #16]
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d8eb      	bhi.n	800d046 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3718      	adds	r7, #24
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d01b      	beq.n	800d0c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ffad 	bl	800cff0 <sync_window>
 800d096:	4603      	mov	r3, r0
 800d098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d113      	bne.n	800d0c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	7858      	ldrb	r0, [r3, #1]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	f7ff fcd5 	bl	800ca5c <disk_read>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff ff87 	bl	800cff0 <sync_window>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d158      	bne.n	800d19e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d148      	bne.n	800d186 <sync_fs+0xb2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	791b      	ldrb	r3, [r3, #4]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d144      	bne.n	800d186 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3330      	adds	r3, #48	; 0x30
 800d100:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d104:	2100      	movs	r1, #0
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff fda9 	bl	800cc5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3330      	adds	r3, #48	; 0x30
 800d110:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d114:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fd38 	bl	800cb8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3330      	adds	r3, #48	; 0x30
 800d122:	4921      	ldr	r1, [pc, #132]	; (800d1a8 <sync_fs+0xd4>)
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff fd4d 	bl	800cbc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3330      	adds	r3, #48	; 0x30
 800d12e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d132:	491e      	ldr	r1, [pc, #120]	; (800d1ac <sync_fs+0xd8>)
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fd45 	bl	800cbc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3330      	adds	r3, #48	; 0x30
 800d13e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f7ff fd3b 	bl	800cbc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3330      	adds	r3, #48	; 0x30
 800d152:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	4619      	mov	r1, r3
 800d15c:	4610      	mov	r0, r2
 800d15e:	f7ff fd31 	bl	800cbc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	69db      	ldr	r3, [r3, #28]
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	7858      	ldrb	r0, [r3, #1]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17a:	2301      	movs	r3, #1
 800d17c:	f7ff fc8e 	bl	800ca9c <disk_write>
			fs->fsi_flag = 0;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	785b      	ldrb	r3, [r3, #1]
 800d18a:	2200      	movs	r2, #0
 800d18c:	2100      	movs	r1, #0
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff fca4 	bl	800cadc <disk_ioctl>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <sync_fs+0xca>
 800d19a:	2301      	movs	r3, #1
 800d19c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	41615252 	.word	0x41615252
 800d1ac:	61417272 	.word	0x61417272

0800d1b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	3b02      	subs	r3, #2
 800d1be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	3b02      	subs	r3, #2
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d301      	bcc.n	800d1d0 <clust2sect+0x20>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e008      	b.n	800d1e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	895b      	ldrh	r3, [r3, #10]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	fb03 f202 	mul.w	r2, r3, r2
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e0:	4413      	add	r3, r2
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d904      	bls.n	800d20e <get_fat+0x20>
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d302      	bcc.n	800d214 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d20e:	2301      	movs	r3, #1
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	e08f      	b.n	800d334 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d214:	f04f 33ff 	mov.w	r3, #4294967295
 800d218:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d062      	beq.n	800d2e8 <get_fat+0xfa>
 800d222:	2b03      	cmp	r3, #3
 800d224:	dc7c      	bgt.n	800d320 <get_fat+0x132>
 800d226:	2b01      	cmp	r3, #1
 800d228:	d002      	beq.n	800d230 <get_fat+0x42>
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	d042      	beq.n	800d2b4 <get_fat+0xc6>
 800d22e:	e077      	b.n	800d320 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	085b      	lsrs	r3, r3, #1
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	4413      	add	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6a1a      	ldr	r2, [r3, #32]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	0a5b      	lsrs	r3, r3, #9
 800d246:	4413      	add	r3, r2
 800d248:	4619      	mov	r1, r3
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f7ff ff14 	bl	800d078 <move_window>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d167      	bne.n	800d326 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	60fa      	str	r2, [r7, #12]
 800d25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	4413      	add	r3, r2
 800d264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d268:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	6a1a      	ldr	r2, [r3, #32]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	0a5b      	lsrs	r3, r3, #9
 800d272:	4413      	add	r3, r2
 800d274:	4619      	mov	r1, r3
 800d276:	6938      	ldr	r0, [r7, #16]
 800d278:	f7ff fefe 	bl	800d078 <move_window>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d153      	bne.n	800d32a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4413      	add	r3, r2
 800d28c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d290:	021b      	lsls	r3, r3, #8
 800d292:	461a      	mov	r2, r3
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	4313      	orrs	r3, r2
 800d298:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <get_fat+0xbc>
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	091b      	lsrs	r3, r3, #4
 800d2a8:	e002      	b.n	800d2b0 <get_fat+0xc2>
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2b0:	617b      	str	r3, [r7, #20]
			break;
 800d2b2:	e03f      	b.n	800d334 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	6a1a      	ldr	r2, [r3, #32]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	4413      	add	r3, r2
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6938      	ldr	r0, [r7, #16]
 800d2c2:	f7ff fed9 	bl	800d078 <move_window>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d130      	bne.n	800d32e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d2da:	4413      	add	r3, r2
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fc1b 	bl	800cb18 <ld_word>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	617b      	str	r3, [r7, #20]
			break;
 800d2e6:	e025      	b.n	800d334 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	6a1a      	ldr	r2, [r3, #32]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	09db      	lsrs	r3, r3, #7
 800d2f0:	4413      	add	r3, r2
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6938      	ldr	r0, [r7, #16]
 800d2f6:	f7ff febf 	bl	800d078 <move_window>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d118      	bne.n	800d332 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d30e:	4413      	add	r3, r2
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff fc19 	bl	800cb48 <ld_dword>
 800d316:	4603      	mov	r3, r0
 800d318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d31c:	617b      	str	r3, [r7, #20]
			break;
 800d31e:	e009      	b.n	800d334 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d320:	2301      	movs	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	e006      	b.n	800d334 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d326:	bf00      	nop
 800d328:	e004      	b.n	800d334 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d32a:	bf00      	nop
 800d32c:	e002      	b.n	800d334 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d32e:	bf00      	nop
 800d330:	e000      	b.n	800d334 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d332:	bf00      	nop
		}
	}

	return val;
 800d334:	697b      	ldr	r3, [r7, #20]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d33e:	b590      	push	{r4, r7, lr}
 800d340:	b089      	sub	sp, #36	; 0x24
 800d342:	af00      	add	r7, sp, #0
 800d344:	60f8      	str	r0, [r7, #12]
 800d346:	60b9      	str	r1, [r7, #8]
 800d348:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d34a:	2302      	movs	r3, #2
 800d34c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	2b01      	cmp	r3, #1
 800d352:	f240 80d2 	bls.w	800d4fa <put_fat+0x1bc>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	f080 80cc 	bcs.w	800d4fa <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	2b03      	cmp	r3, #3
 800d368:	f000 8096 	beq.w	800d498 <put_fat+0x15a>
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	f300 80cd 	bgt.w	800d50c <put_fat+0x1ce>
 800d372:	2b01      	cmp	r3, #1
 800d374:	d002      	beq.n	800d37c <put_fat+0x3e>
 800d376:	2b02      	cmp	r3, #2
 800d378:	d06e      	beq.n	800d458 <put_fat+0x11a>
 800d37a:	e0c7      	b.n	800d50c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	61bb      	str	r3, [r7, #24]
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	085b      	lsrs	r3, r3, #1
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	4413      	add	r3, r2
 800d388:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6a1a      	ldr	r2, [r3, #32]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	0a5b      	lsrs	r3, r3, #9
 800d392:	4413      	add	r3, r2
 800d394:	4619      	mov	r1, r3
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff fe6e 	bl	800d078 <move_window>
 800d39c:	4603      	mov	r3, r0
 800d39e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3a0:	7ffb      	ldrb	r3, [r7, #31]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f040 80ab 	bne.w	800d4fe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	1c59      	adds	r1, r3, #1
 800d3b2:	61b9      	str	r1, [r7, #24]
 800d3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b8:	4413      	add	r3, r2
 800d3ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00d      	beq.n	800d3e2 <put_fat+0xa4>
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	f003 030f 	and.w	r3, r3, #15
 800d3d0:	b25a      	sxtb	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	b25b      	sxtb	r3, r3
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	b25b      	sxtb	r3, r3
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	e001      	b.n	800d3e6 <put_fat+0xa8>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6a1a      	ldr	r2, [r3, #32]
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	0a5b      	lsrs	r3, r3, #9
 800d3f8:	4413      	add	r3, r2
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff fe3b 	bl	800d078 <move_window>
 800d402:	4603      	mov	r3, r0
 800d404:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d406:	7ffb      	ldrb	r3, [r7, #31]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d17a      	bne.n	800d502 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d418:	4413      	add	r3, r2
 800d41a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <put_fat+0xf0>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	091b      	lsrs	r3, r3, #4
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	e00e      	b.n	800d44c <put_fat+0x10e>
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	b25b      	sxtb	r3, r3
 800d434:	f023 030f 	bic.w	r3, r3, #15
 800d438:	b25a      	sxtb	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	0a1b      	lsrs	r3, r3, #8
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	f003 030f 	and.w	r3, r3, #15
 800d444:	b25b      	sxtb	r3, r3
 800d446:	4313      	orrs	r3, r2
 800d448:	b25b      	sxtb	r3, r3
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2201      	movs	r2, #1
 800d454:	70da      	strb	r2, [r3, #3]
			break;
 800d456:	e059      	b.n	800d50c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6a1a      	ldr	r2, [r3, #32]
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	0a1b      	lsrs	r3, r3, #8
 800d460:	4413      	add	r3, r2
 800d462:	4619      	mov	r1, r3
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff fe07 	bl	800d078 <move_window>
 800d46a:	4603      	mov	r3, r0
 800d46c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d46e:	7ffb      	ldrb	r3, [r7, #31]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d148      	bne.n	800d506 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d482:	4413      	add	r3, r2
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	b292      	uxth	r2, r2
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff fb7f 	bl	800cb8e <st_word>
			fs->wflag = 1;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2201      	movs	r2, #1
 800d494:	70da      	strb	r2, [r3, #3]
			break;
 800d496:	e039      	b.n	800d50c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6a1a      	ldr	r2, [r3, #32]
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	09db      	lsrs	r3, r3, #7
 800d4a0:	4413      	add	r3, r2
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7ff fde7 	bl	800d078 <move_window>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4ae:	7ffb      	ldrb	r3, [r7, #31]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d12a      	bne.n	800d50a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4c8:	4413      	add	r3, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff fb3c 	bl	800cb48 <ld_dword>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d4d6:	4323      	orrs	r3, r4
 800d4d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d4e8:	4413      	add	r3, r2
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff fb69 	bl	800cbc4 <st_dword>
			fs->wflag = 1;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	70da      	strb	r2, [r3, #3]
			break;
 800d4f8:	e008      	b.n	800d50c <put_fat+0x1ce>
		}
	}
 800d4fa:	bf00      	nop
 800d4fc:	e006      	b.n	800d50c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d4fe:	bf00      	nop
 800d500:	e004      	b.n	800d50c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d502:	bf00      	nop
 800d504:	e002      	b.n	800d50c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d506:	bf00      	nop
 800d508:	e000      	b.n	800d50c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d50a:	bf00      	nop
	return res;
 800d50c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3724      	adds	r7, #36	; 0x24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd90      	pop	{r4, r7, pc}

0800d516 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b088      	sub	sp, #32
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d904      	bls.n	800d53c <remove_chain+0x26>
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d301      	bcc.n	800d540 <remove_chain+0x2a>
 800d53c:	2302      	movs	r3, #2
 800d53e:	e04b      	b.n	800d5d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00c      	beq.n	800d560 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d546:	f04f 32ff 	mov.w	r2, #4294967295
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	69b8      	ldr	r0, [r7, #24]
 800d54e:	f7ff fef6 	bl	800d33e <put_fat>
 800d552:	4603      	mov	r3, r0
 800d554:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d556:	7ffb      	ldrb	r3, [r7, #31]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <remove_chain+0x4a>
 800d55c:	7ffb      	ldrb	r3, [r7, #31]
 800d55e:	e03b      	b.n	800d5d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f7ff fe43 	bl	800d1ee <get_fat>
 800d568:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d031      	beq.n	800d5d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d101      	bne.n	800d57a <remove_chain+0x64>
 800d576:	2302      	movs	r3, #2
 800d578:	e02e      	b.n	800d5d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d580:	d101      	bne.n	800d586 <remove_chain+0x70>
 800d582:	2301      	movs	r3, #1
 800d584:	e028      	b.n	800d5d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d586:	2200      	movs	r2, #0
 800d588:	68b9      	ldr	r1, [r7, #8]
 800d58a:	69b8      	ldr	r0, [r7, #24]
 800d58c:	f7ff fed7 	bl	800d33e <put_fat>
 800d590:	4603      	mov	r3, r0
 800d592:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d594:	7ffb      	ldrb	r3, [r7, #31]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <remove_chain+0x88>
 800d59a:	7ffb      	ldrb	r3, [r7, #31]
 800d59c:	e01c      	b.n	800d5d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	691a      	ldr	r2, [r3, #16]
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	3b02      	subs	r3, #2
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d20b      	bcs.n	800d5c4 <remove_chain+0xae>
			fs->free_clst++;
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	791b      	ldrb	r3, [r3, #4]
 800d5ba:	f043 0301 	orr.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d3c6      	bcc.n	800d560 <remove_chain+0x4a>
 800d5d2:	e000      	b.n	800d5d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10d      	bne.n	800d612 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d004      	beq.n	800d60c <create_chain+0x2c>
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	69ba      	ldr	r2, [r7, #24]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d31b      	bcc.n	800d644 <create_chain+0x64>
 800d60c:	2301      	movs	r3, #1
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	e018      	b.n	800d644 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff fdea 	bl	800d1ee <get_fat>
 800d61a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d801      	bhi.n	800d626 <create_chain+0x46>
 800d622:	2301      	movs	r3, #1
 800d624:	e070      	b.n	800d708 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62c:	d101      	bne.n	800d632 <create_chain+0x52>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	e06a      	b.n	800d708 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d201      	bcs.n	800d640 <create_chain+0x60>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	e063      	b.n	800d708 <create_chain+0x128>
		scl = clst;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	3301      	adds	r3, #1
 800d64c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	69fa      	ldr	r2, [r7, #28]
 800d654:	429a      	cmp	r2, r3
 800d656:	d307      	bcc.n	800d668 <create_chain+0x88>
				ncl = 2;
 800d658:	2302      	movs	r3, #2
 800d65a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	429a      	cmp	r2, r3
 800d662:	d901      	bls.n	800d668 <create_chain+0x88>
 800d664:	2300      	movs	r3, #0
 800d666:	e04f      	b.n	800d708 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d668:	69f9      	ldr	r1, [r7, #28]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7ff fdbf 	bl	800d1ee <get_fat>
 800d670:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00e      	beq.n	800d696 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d003      	beq.n	800d686 <create_chain+0xa6>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d684:	d101      	bne.n	800d68a <create_chain+0xaa>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	e03e      	b.n	800d708 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d1da      	bne.n	800d648 <create_chain+0x68>
 800d692:	2300      	movs	r3, #0
 800d694:	e038      	b.n	800d708 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d696:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	69f9      	ldr	r1, [r7, #28]
 800d69e:	6938      	ldr	r0, [r7, #16]
 800d6a0:	f7ff fe4d 	bl	800d33e <put_fat>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d109      	bne.n	800d6c2 <create_chain+0xe2>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d006      	beq.n	800d6c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d6b4:	69fa      	ldr	r2, [r7, #28]
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6938      	ldr	r0, [r7, #16]
 800d6ba:	f7ff fe40 	bl	800d33e <put_fat>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d116      	bne.n	800d6f6 <create_chain+0x116>
		fs->last_clst = ncl;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	69fa      	ldr	r2, [r7, #28]
 800d6cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	691a      	ldr	r2, [r3, #16]
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	3b02      	subs	r3, #2
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d804      	bhi.n	800d6e6 <create_chain+0x106>
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	1e5a      	subs	r2, r3, #1
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	791b      	ldrb	r3, [r3, #4]
 800d6ea:	f043 0301 	orr.w	r3, r3, #1
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	711a      	strb	r2, [r3, #4]
 800d6f4:	e007      	b.n	800d706 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d102      	bne.n	800d702 <create_chain+0x122>
 800d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d700:	e000      	b.n	800d704 <create_chain+0x124>
 800d702:	2301      	movs	r3, #1
 800d704:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d706:	69fb      	ldr	r3, [r7, #28]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3720      	adds	r7, #32
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d710:	b480      	push	{r7}
 800d712:	b087      	sub	sp, #28
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	3304      	adds	r3, #4
 800d726:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	0a5b      	lsrs	r3, r3, #9
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	8952      	ldrh	r2, [r2, #10]
 800d730:	fbb3 f3f2 	udiv	r3, r3, r2
 800d734:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	1d1a      	adds	r2, r3, #4
 800d73a:	613a      	str	r2, [r7, #16]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <clmt_clust+0x3a>
 800d746:	2300      	movs	r3, #0
 800d748:	e010      	b.n	800d76c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d307      	bcc.n	800d762 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	617b      	str	r3, [r7, #20]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	3304      	adds	r3, #4
 800d75e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d760:	e7e9      	b.n	800d736 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d762:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	4413      	add	r3, r2
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	371c      	adds	r7, #28
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d78e:	d204      	bcs.n	800d79a <dir_sdi+0x22>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	f003 031f 	and.w	r3, r3, #31
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d79a:	2302      	movs	r3, #2
 800d79c:	e063      	b.n	800d866 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d106      	bne.n	800d7be <dir_sdi+0x46>
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d902      	bls.n	800d7be <dir_sdi+0x46>
		clst = fs->dirbase;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10c      	bne.n	800d7de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	095b      	lsrs	r3, r3, #5
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	8912      	ldrh	r2, [r2, #8]
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d301      	bcc.n	800d7d4 <dir_sdi+0x5c>
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	e048      	b.n	800d866 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	61da      	str	r2, [r3, #28]
 800d7dc:	e029      	b.n	800d832 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	895b      	ldrh	r3, [r3, #10]
 800d7e2:	025b      	lsls	r3, r3, #9
 800d7e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d7e6:	e019      	b.n	800d81c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6979      	ldr	r1, [r7, #20]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7ff fcfe 	bl	800d1ee <get_fat>
 800d7f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d101      	bne.n	800d800 <dir_sdi+0x88>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e032      	b.n	800d866 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d904      	bls.n	800d810 <dir_sdi+0x98>
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d301      	bcc.n	800d814 <dir_sdi+0x9c>
 800d810:	2302      	movs	r3, #2
 800d812:	e028      	b.n	800d866 <dir_sdi+0xee>
			ofs -= csz;
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	429a      	cmp	r2, r3
 800d822:	d2e1      	bcs.n	800d7e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d824:	6979      	ldr	r1, [r7, #20]
 800d826:	6938      	ldr	r0, [r7, #16]
 800d828:	f7ff fcc2 	bl	800d1b0 <clust2sect>
 800d82c:	4602      	mov	r2, r0
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <dir_sdi+0xcc>
 800d840:	2302      	movs	r3, #2
 800d842:	e010      	b.n	800d866 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	69da      	ldr	r2, [r3, #28]
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	0a5b      	lsrs	r3, r3, #9
 800d84c:	441a      	add	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85e:	441a      	add	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b086      	sub	sp, #24
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	3320      	adds	r3, #32
 800d884:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <dir_next+0x28>
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d894:	d301      	bcc.n	800d89a <dir_next+0x2c>
 800d896:	2304      	movs	r3, #4
 800d898:	e0aa      	b.n	800d9f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f040 8098 	bne.w	800d9d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	1c5a      	adds	r2, r3, #1
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10b      	bne.n	800d8d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	095b      	lsrs	r3, r3, #5
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	8912      	ldrh	r2, [r2, #8]
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	f0c0 8088 	bcc.w	800d9d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	61da      	str	r2, [r3, #28]
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	e08f      	b.n	800d9f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	0a5b      	lsrs	r3, r3, #9
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	8952      	ldrh	r2, [r2, #10]
 800d8d8:	3a01      	subs	r2, #1
 800d8da:	4013      	ands	r3, r2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d17a      	bne.n	800d9d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	f7ff fc80 	bl	800d1ee <get_fat>
 800d8ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d801      	bhi.n	800d8fa <dir_next+0x8c>
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	e07a      	b.n	800d9f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d900:	d101      	bne.n	800d906 <dir_next+0x98>
 800d902:	2301      	movs	r3, #1
 800d904:	e074      	b.n	800d9f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d358      	bcc.n	800d9c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	61da      	str	r2, [r3, #28]
 800d91c:	2304      	movs	r3, #4
 800d91e:	e067      	b.n	800d9f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7ff fe59 	bl	800d5e0 <create_chain>
 800d92e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <dir_next+0xcc>
 800d936:	2307      	movs	r3, #7
 800d938:	e05a      	b.n	800d9f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d101      	bne.n	800d944 <dir_next+0xd6>
 800d940:	2302      	movs	r3, #2
 800d942:	e055      	b.n	800d9f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94a:	d101      	bne.n	800d950 <dir_next+0xe2>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e04f      	b.n	800d9f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff fb4d 	bl	800cff0 <sync_window>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <dir_next+0xf2>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e047      	b.n	800d9f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3330      	adds	r3, #48	; 0x30
 800d964:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d968:	2100      	movs	r1, #0
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff f977 	bl	800cc5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d970:	2300      	movs	r3, #0
 800d972:	613b      	str	r3, [r7, #16]
 800d974:	6979      	ldr	r1, [r7, #20]
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff fc1a 	bl	800d1b0 <clust2sect>
 800d97c:	4602      	mov	r2, r0
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	62da      	str	r2, [r3, #44]	; 0x2c
 800d982:	e012      	b.n	800d9aa <dir_next+0x13c>
						fs->wflag = 1;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2201      	movs	r2, #1
 800d988:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff fb30 	bl	800cff0 <sync_window>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <dir_next+0x12c>
 800d996:	2301      	movs	r3, #1
 800d998:	e02a      	b.n	800d9f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	3301      	adds	r3, #1
 800d99e:	613b      	str	r3, [r7, #16]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	895b      	ldrh	r3, [r3, #10]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d3e6      	bcc.n	800d984 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	1ad2      	subs	r2, r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d9c8:	6979      	ldr	r1, [r7, #20]
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f7ff fbf0 	bl	800d1b0 <clust2sect>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e8:	441a      	add	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800da08:	2100      	movs	r1, #0
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff feb4 	bl	800d778 <dir_sdi>
 800da10:	4603      	mov	r3, r0
 800da12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d12b      	bne.n	800da72 <dir_alloc+0x7a>
		n = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	4619      	mov	r1, r3
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f7ff fb27 	bl	800d078 <move_window>
 800da2a:	4603      	mov	r3, r0
 800da2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d11d      	bne.n	800da70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a1b      	ldr	r3, [r3, #32]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2be5      	cmp	r3, #229	; 0xe5
 800da3c:	d004      	beq.n	800da48 <dir_alloc+0x50>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d107      	bne.n	800da58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3301      	adds	r3, #1
 800da4c:	613b      	str	r3, [r7, #16]
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	429a      	cmp	r2, r3
 800da54:	d102      	bne.n	800da5c <dir_alloc+0x64>
 800da56:	e00c      	b.n	800da72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800da58:	2300      	movs	r3, #0
 800da5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800da5c:	2101      	movs	r1, #1
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ff05 	bl	800d86e <dir_next>
 800da64:	4603      	mov	r3, r0
 800da66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800da68:	7dfb      	ldrb	r3, [r7, #23]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0d7      	beq.n	800da1e <dir_alloc+0x26>
 800da6e:	e000      	b.n	800da72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800da70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	2b04      	cmp	r3, #4
 800da76:	d101      	bne.n	800da7c <dir_alloc+0x84>
 800da78:	2307      	movs	r3, #7
 800da7a:	75fb      	strb	r3, [r7, #23]
	return res;
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b084      	sub	sp, #16
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	331a      	adds	r3, #26
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff f83f 	bl	800cb18 <ld_word>
 800da9a:	4603      	mov	r3, r0
 800da9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d109      	bne.n	800daba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	3314      	adds	r3, #20
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff f834 	bl	800cb18 <ld_word>
 800dab0:	4603      	mov	r3, r0
 800dab2:	041b      	lsls	r3, r3, #16
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800daba:	68fb      	ldr	r3, [r7, #12]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	331a      	adds	r3, #26
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	b292      	uxth	r2, r2
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f857 	bl	800cb8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d109      	bne.n	800dafc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f103 0214 	add.w	r2, r3, #20
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	0c1b      	lsrs	r3, r3, #16
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	4619      	mov	r1, r3
 800daf6:	4610      	mov	r0, r2
 800daf8:	f7ff f849 	bl	800cb8e <st_word>
	}
}
 800dafc:	bf00      	nop
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db12:	2100      	movs	r1, #0
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7ff fe2f 	bl	800d778 <dir_sdi>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <dir_find+0x24>
 800db24:	7dfb      	ldrb	r3, [r7, #23]
 800db26:	e03e      	b.n	800dba6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	69db      	ldr	r3, [r3, #28]
 800db2c:	4619      	mov	r1, r3
 800db2e:	6938      	ldr	r0, [r7, #16]
 800db30:	f7ff faa2 	bl	800d078 <move_window>
 800db34:	4603      	mov	r3, r0
 800db36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db38:	7dfb      	ldrb	r3, [r7, #23]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d12f      	bne.n	800db9e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db46:	7bfb      	ldrb	r3, [r7, #15]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <dir_find+0x4e>
 800db4c:	2304      	movs	r3, #4
 800db4e:	75fb      	strb	r3, [r7, #23]
 800db50:	e028      	b.n	800dba4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	330b      	adds	r3, #11
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	330b      	adds	r3, #11
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	f003 0308 	and.w	r3, r3, #8
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10a      	bne.n	800db8a <dir_find+0x86>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a18      	ldr	r0, [r3, #32]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3324      	adds	r3, #36	; 0x24
 800db7c:	220b      	movs	r2, #11
 800db7e:	4619      	mov	r1, r3
 800db80:	f7ff f888 	bl	800cc94 <mem_cmp>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00b      	beq.n	800dba2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db8a:	2100      	movs	r1, #0
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff fe6e 	bl	800d86e <dir_next>
 800db92:	4603      	mov	r3, r0
 800db94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d0c5      	beq.n	800db28 <dir_find+0x24>
 800db9c:	e002      	b.n	800dba4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800db9e:	bf00      	nop
 800dba0:	e000      	b.n	800dba4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dba2:	bf00      	nop

	return res;
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3718      	adds	r7, #24
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ff1a 	bl	800d9f8 <dir_alloc>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dbc8:	7bfb      	ldrb	r3, [r7, #15]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d11c      	bne.n	800dc08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	69db      	ldr	r3, [r3, #28]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	68b8      	ldr	r0, [r7, #8]
 800dbd6:	f7ff fa4f 	bl	800d078 <move_window>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d111      	bne.n	800dc08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	2100      	movs	r1, #0
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7ff f836 	bl	800cc5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a18      	ldr	r0, [r3, #32]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	3324      	adds	r3, #36	; 0x24
 800dbfa:	220b      	movs	r2, #11
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	f7ff f80d 	bl	800cc1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2201      	movs	r2, #1
 800dc06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	69db      	ldr	r3, [r3, #28]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d04e      	beq.n	800dcc8 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	613b      	str	r3, [r7, #16]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800dc32:	e021      	b.n	800dc78 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a1a      	ldr	r2, [r3, #32]
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	1c59      	adds	r1, r3, #1
 800dc3c:	6179      	str	r1, [r7, #20]
 800dc3e:	4413      	add	r3, r2
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	2b20      	cmp	r3, #32
 800dc48:	d100      	bne.n	800dc4c <get_fileinfo+0x3a>
 800dc4a:	e015      	b.n	800dc78 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	2b05      	cmp	r3, #5
 800dc50:	d101      	bne.n	800dc56 <get_fileinfo+0x44>
 800dc52:	23e5      	movs	r3, #229	; 0xe5
 800dc54:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b09      	cmp	r3, #9
 800dc5a:	d106      	bne.n	800dc6a <get_fileinfo+0x58>
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	613a      	str	r2, [r7, #16]
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	4413      	add	r3, r2
 800dc66:	222e      	movs	r2, #46	; 0x2e
 800dc68:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	613a      	str	r2, [r7, #16]
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	4413      	add	r3, r2
 800dc74:	7bfa      	ldrb	r2, [r7, #15]
 800dc76:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2b0a      	cmp	r3, #10
 800dc7c:	d9da      	bls.n	800dc34 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	4413      	add	r3, r2
 800dc84:	3309      	adds	r3, #9
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	7ada      	ldrb	r2, [r3, #11]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	331c      	adds	r3, #28
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe ff54 	bl	800cb48 <ld_dword>
 800dca0:	4602      	mov	r2, r0
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	3316      	adds	r3, #22
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fe ff4b 	bl	800cb48 <ld_dword>
 800dcb2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	80da      	strh	r2, [r3, #6]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	809a      	strh	r2, [r3, #4]
 800dcc6:	e000      	b.n	800dcca <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dcc8:	bf00      	nop
}
 800dcca:	3718      	adds	r7, #24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	60fb      	str	r3, [r7, #12]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3324      	adds	r3, #36	; 0x24
 800dce4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dce6:	220b      	movs	r2, #11
 800dce8:	2120      	movs	r1, #32
 800dcea:	68b8      	ldr	r0, [r7, #8]
 800dcec:	f7fe ffb7 	bl	800cc5e <mem_set>
	si = i = 0; ni = 8;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	613b      	str	r3, [r7, #16]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	2308      	movs	r3, #8
 800dcfa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	1c5a      	adds	r2, r3, #1
 800dd00:	61fa      	str	r2, [r7, #28]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4413      	add	r3, r2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd0a:	7efb      	ldrb	r3, [r7, #27]
 800dd0c:	2b20      	cmp	r3, #32
 800dd0e:	d94e      	bls.n	800ddae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dd10:	7efb      	ldrb	r3, [r7, #27]
 800dd12:	2b2f      	cmp	r3, #47	; 0x2f
 800dd14:	d006      	beq.n	800dd24 <create_name+0x54>
 800dd16:	7efb      	ldrb	r3, [r7, #27]
 800dd18:	2b5c      	cmp	r3, #92	; 0x5c
 800dd1a:	d110      	bne.n	800dd3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd1c:	e002      	b.n	800dd24 <create_name+0x54>
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	3301      	adds	r3, #1
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	4413      	add	r3, r2
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	2b2f      	cmp	r3, #47	; 0x2f
 800dd2e:	d0f6      	beq.n	800dd1e <create_name+0x4e>
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	4413      	add	r3, r2
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	2b5c      	cmp	r3, #92	; 0x5c
 800dd3a:	d0f0      	beq.n	800dd1e <create_name+0x4e>
			break;
 800dd3c:	e038      	b.n	800ddb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dd3e:	7efb      	ldrb	r3, [r7, #27]
 800dd40:	2b2e      	cmp	r3, #46	; 0x2e
 800dd42:	d003      	beq.n	800dd4c <create_name+0x7c>
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d30c      	bcc.n	800dd66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2b0b      	cmp	r3, #11
 800dd50:	d002      	beq.n	800dd58 <create_name+0x88>
 800dd52:	7efb      	ldrb	r3, [r7, #27]
 800dd54:	2b2e      	cmp	r3, #46	; 0x2e
 800dd56:	d001      	beq.n	800dd5c <create_name+0x8c>
 800dd58:	2306      	movs	r3, #6
 800dd5a:	e044      	b.n	800dde6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dd5c:	2308      	movs	r3, #8
 800dd5e:	613b      	str	r3, [r7, #16]
 800dd60:	230b      	movs	r3, #11
 800dd62:	617b      	str	r3, [r7, #20]
			continue;
 800dd64:	e022      	b.n	800ddac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dd66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	da04      	bge.n	800dd78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd6e:	7efb      	ldrb	r3, [r7, #27]
 800dd70:	3b80      	subs	r3, #128	; 0x80
 800dd72:	4a1f      	ldr	r2, [pc, #124]	; (800ddf0 <create_name+0x120>)
 800dd74:	5cd3      	ldrb	r3, [r2, r3]
 800dd76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd78:	7efb      	ldrb	r3, [r7, #27]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	481d      	ldr	r0, [pc, #116]	; (800ddf4 <create_name+0x124>)
 800dd7e:	f7fe ffb0 	bl	800cce2 <chk_chr>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <create_name+0xbc>
 800dd88:	2306      	movs	r3, #6
 800dd8a:	e02c      	b.n	800dde6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd8c:	7efb      	ldrb	r3, [r7, #27]
 800dd8e:	2b60      	cmp	r3, #96	; 0x60
 800dd90:	d905      	bls.n	800dd9e <create_name+0xce>
 800dd92:	7efb      	ldrb	r3, [r7, #27]
 800dd94:	2b7a      	cmp	r3, #122	; 0x7a
 800dd96:	d802      	bhi.n	800dd9e <create_name+0xce>
 800dd98:	7efb      	ldrb	r3, [r7, #27]
 800dd9a:	3b20      	subs	r3, #32
 800dd9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	613a      	str	r2, [r7, #16]
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	4413      	add	r3, r2
 800dda8:	7efa      	ldrb	r2, [r7, #27]
 800ddaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ddac:	e7a6      	b.n	800dcfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ddae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	441a      	add	r2, r3
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d101      	bne.n	800ddc4 <create_name+0xf4>
 800ddc0:	2306      	movs	r3, #6
 800ddc2:	e010      	b.n	800dde6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2be5      	cmp	r3, #229	; 0xe5
 800ddca:	d102      	bne.n	800ddd2 <create_name+0x102>
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2205      	movs	r2, #5
 800ddd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ddd2:	7efb      	ldrb	r3, [r7, #27]
 800ddd4:	2b20      	cmp	r3, #32
 800ddd6:	d801      	bhi.n	800dddc <create_name+0x10c>
 800ddd8:	2204      	movs	r2, #4
 800ddda:	e000      	b.n	800ddde <create_name+0x10e>
 800dddc:	2200      	movs	r2, #0
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	330b      	adds	r3, #11
 800dde2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dde4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3720      	adds	r7, #32
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	08014fa4 	.word	0x08014fa4
 800ddf4:	08013f68 	.word	0x08013f68

0800ddf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de0c:	e002      	b.n	800de14 <follow_path+0x1c>
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	3301      	adds	r3, #1
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b2f      	cmp	r3, #47	; 0x2f
 800de1a:	d0f8      	beq.n	800de0e <follow_path+0x16>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b5c      	cmp	r3, #92	; 0x5c
 800de22:	d0f4      	beq.n	800de0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2200      	movs	r2, #0
 800de28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b1f      	cmp	r3, #31
 800de30:	d80a      	bhi.n	800de48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2280      	movs	r2, #128	; 0x80
 800de36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de3a:	2100      	movs	r1, #0
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff fc9b 	bl	800d778 <dir_sdi>
 800de42:	4603      	mov	r3, r0
 800de44:	75fb      	strb	r3, [r7, #23]
 800de46:	e043      	b.n	800ded0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de48:	463b      	mov	r3, r7
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff ff3f 	bl	800dcd0 <create_name>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d134      	bne.n	800dec6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff fe51 	bl	800db04 <dir_find>
 800de62:	4603      	mov	r3, r0
 800de64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00a      	beq.n	800de8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de74:	7dfb      	ldrb	r3, [r7, #23]
 800de76:	2b04      	cmp	r3, #4
 800de78:	d127      	bne.n	800deca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	f003 0304 	and.w	r3, r3, #4
 800de80:	2b00      	cmp	r3, #0
 800de82:	d122      	bne.n	800deca <follow_path+0xd2>
 800de84:	2305      	movs	r3, #5
 800de86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de88:	e01f      	b.n	800deca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de8a:	7afb      	ldrb	r3, [r7, #11]
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	2b00      	cmp	r3, #0
 800de92:	d11c      	bne.n	800dece <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	799b      	ldrb	r3, [r3, #6]
 800de98:	f003 0310 	and.w	r3, r3, #16
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d102      	bne.n	800dea6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dea0:	2305      	movs	r3, #5
 800dea2:	75fb      	strb	r3, [r7, #23]
 800dea4:	e014      	b.n	800ded0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb4:	4413      	add	r3, r2
 800deb6:	4619      	mov	r1, r3
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7ff fde4 	bl	800da86 <ld_clust>
 800debe:	4602      	mov	r2, r0
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dec4:	e7c0      	b.n	800de48 <follow_path+0x50>
			if (res != FR_OK) break;
 800dec6:	bf00      	nop
 800dec8:	e002      	b.n	800ded0 <follow_path+0xd8>
				break;
 800deca:	bf00      	nop
 800decc:	e000      	b.n	800ded0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dece:	bf00      	nop
			}
		}
	}

	return res;
 800ded0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800deda:	b480      	push	{r7}
 800dedc:	b087      	sub	sp, #28
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dee2:	f04f 33ff 	mov.w	r3, #4294967295
 800dee6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d031      	beq.n	800df54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	617b      	str	r3, [r7, #20]
 800def6:	e002      	b.n	800defe <get_ldnumber+0x24>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	3301      	adds	r3, #1
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b20      	cmp	r3, #32
 800df04:	d903      	bls.n	800df0e <get_ldnumber+0x34>
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	2b3a      	cmp	r3, #58	; 0x3a
 800df0c:	d1f4      	bne.n	800def8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b3a      	cmp	r3, #58	; 0x3a
 800df14:	d11c      	bne.n	800df50 <get_ldnumber+0x76>
			tp = *path;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	1c5a      	adds	r2, r3, #1
 800df20:	60fa      	str	r2, [r7, #12]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	3b30      	subs	r3, #48	; 0x30
 800df26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2b09      	cmp	r3, #9
 800df2c:	d80e      	bhi.n	800df4c <get_ldnumber+0x72>
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	429a      	cmp	r2, r3
 800df34:	d10a      	bne.n	800df4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d107      	bne.n	800df4c <get_ldnumber+0x72>
					vol = (int)i;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	3301      	adds	r3, #1
 800df44:	617b      	str	r3, [r7, #20]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	e002      	b.n	800df56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df50:	2300      	movs	r3, #0
 800df52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df54:	693b      	ldr	r3, [r7, #16]
}
 800df56:	4618      	mov	r0, r3
 800df58:	371c      	adds	r7, #28
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
	...

0800df64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	70da      	strb	r2, [r3, #3]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f04f 32ff 	mov.w	r2, #4294967295
 800df7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df7c:	6839      	ldr	r1, [r7, #0]
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff f87a 	bl	800d078 <move_window>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <check_fs+0x2a>
 800df8a:	2304      	movs	r3, #4
 800df8c:	e038      	b.n	800e000 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3330      	adds	r3, #48	; 0x30
 800df92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fdbe 	bl	800cb18 <ld_word>
 800df9c:	4603      	mov	r3, r0
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d001      	beq.n	800dfac <check_fs+0x48>
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e029      	b.n	800e000 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfb2:	2be9      	cmp	r3, #233	; 0xe9
 800dfb4:	d009      	beq.n	800dfca <check_fs+0x66>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfbc:	2beb      	cmp	r3, #235	; 0xeb
 800dfbe:	d11e      	bne.n	800dffe <check_fs+0x9a>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dfc6:	2b90      	cmp	r3, #144	; 0x90
 800dfc8:	d119      	bne.n	800dffe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3330      	adds	r3, #48	; 0x30
 800dfce:	3336      	adds	r3, #54	; 0x36
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fdb9 	bl	800cb48 <ld_dword>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dfdc:	4a0a      	ldr	r2, [pc, #40]	; (800e008 <check_fs+0xa4>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d101      	bne.n	800dfe6 <check_fs+0x82>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e00c      	b.n	800e000 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3330      	adds	r3, #48	; 0x30
 800dfea:	3352      	adds	r3, #82	; 0x52
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fdab 	bl	800cb48 <ld_dword>
 800dff2:	4603      	mov	r3, r0
 800dff4:	4a05      	ldr	r2, [pc, #20]	; (800e00c <check_fs+0xa8>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d101      	bne.n	800dffe <check_fs+0x9a>
 800dffa:	2300      	movs	r3, #0
 800dffc:	e000      	b.n	800e000 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dffe:	2302      	movs	r3, #2
}
 800e000:	4618      	mov	r0, r3
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	00544146 	.word	0x00544146
 800e00c:	33544146 	.word	0x33544146

0800e010 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b096      	sub	sp, #88	; 0x58
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	4613      	mov	r3, r2
 800e01c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7ff ff58 	bl	800deda <get_ldnumber>
 800e02a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da01      	bge.n	800e036 <find_volume+0x26>
 800e032:	230b      	movs	r3, #11
 800e034:	e22e      	b.n	800e494 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e036:	4aa8      	ldr	r2, [pc, #672]	; (800e2d8 <find_volume+0x2c8>)
 800e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e03e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <find_volume+0x3a>
 800e046:	230c      	movs	r3, #12
 800e048:	e224      	b.n	800e494 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	f023 0301 	bic.w	r3, r3, #1
 800e056:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d01a      	beq.n	800e096 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e062:	785b      	ldrb	r3, [r3, #1]
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe fcb9 	bl	800c9dc <disk_status>
 800e06a:	4603      	mov	r3, r0
 800e06c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10c      	bne.n	800e096 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e07c:	79fb      	ldrb	r3, [r7, #7]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d007      	beq.n	800e092 <find_volume+0x82>
 800e082:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e086:	f003 0304 	and.w	r3, r3, #4
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e08e:	230a      	movs	r3, #10
 800e090:	e200      	b.n	800e494 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800e092:	2300      	movs	r3, #0
 800e094:	e1fe      	b.n	800e494 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	2200      	movs	r2, #0
 800e09a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	785b      	ldrb	r3, [r3, #1]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fcb1 	bl	800ca10 <disk_initialize>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e1e7      	b.n	800e494 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0c4:	79fb      	ldrb	r3, [r7, #7]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <find_volume+0xca>
 800e0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ce:	f003 0304 	and.w	r3, r3, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e0d6:	230a      	movs	r3, #10
 800e0d8:	e1dc      	b.n	800e494 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e0de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0e2:	f7ff ff3f 	bl	800df64 <check_fs>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d14b      	bne.n	800e18c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e0f8:	e01f      	b.n	800e13a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e102:	011b      	lsls	r3, r3, #4
 800e104:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e108:	4413      	add	r3, r2
 800e10a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	3304      	adds	r3, #4
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d006      	beq.n	800e124 <find_volume+0x114>
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	3308      	adds	r3, #8
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe fd14 	bl	800cb48 <ld_dword>
 800e120:	4602      	mov	r2, r0
 800e122:	e000      	b.n	800e126 <find_volume+0x116>
 800e124:	2200      	movs	r2, #0
 800e126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e12e:	440b      	add	r3, r1
 800e130:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e136:	3301      	adds	r3, #1
 800e138:	643b      	str	r3, [r7, #64]	; 0x40
 800e13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d9dc      	bls.n	800e0fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e140:	2300      	movs	r3, #0
 800e142:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <find_volume+0x140>
 800e14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e14c:	3b01      	subs	r3, #1
 800e14e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e158:	4413      	add	r3, r2
 800e15a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e15e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e162:	2b00      	cmp	r3, #0
 800e164:	d005      	beq.n	800e172 <find_volume+0x162>
 800e166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e16a:	f7ff fefb 	bl	800df64 <check_fs>
 800e16e:	4603      	mov	r3, r0
 800e170:	e000      	b.n	800e174 <find_volume+0x164>
 800e172:	2303      	movs	r3, #3
 800e174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d905      	bls.n	800e18c <find_volume+0x17c>
 800e180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e182:	3301      	adds	r3, #1
 800e184:	643b      	str	r3, [r7, #64]	; 0x40
 800e186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d9e1      	bls.n	800e150 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e18c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e190:	2b04      	cmp	r3, #4
 800e192:	d101      	bne.n	800e198 <find_volume+0x188>
 800e194:	2301      	movs	r3, #1
 800e196:	e17d      	b.n	800e494 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d901      	bls.n	800e1a4 <find_volume+0x194>
 800e1a0:	230d      	movs	r3, #13
 800e1a2:	e177      	b.n	800e494 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	3330      	adds	r3, #48	; 0x30
 800e1a8:	330b      	adds	r3, #11
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fe fcb4 	bl	800cb18 <ld_word>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1b6:	d001      	beq.n	800e1bc <find_volume+0x1ac>
 800e1b8:	230d      	movs	r3, #13
 800e1ba:	e16b      	b.n	800e494 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	3330      	adds	r3, #48	; 0x30
 800e1c0:	3316      	adds	r3, #22
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe fca8 	bl	800cb18 <ld_word>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <find_volume+0x1d0>
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	3330      	adds	r3, #48	; 0x30
 800e1d6:	3324      	adds	r3, #36	; 0x24
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fcb5 	bl	800cb48 <ld_dword>
 800e1de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	789b      	ldrb	r3, [r3, #2]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d005      	beq.n	800e204 <find_volume+0x1f4>
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	789b      	ldrb	r3, [r3, #2]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d001      	beq.n	800e204 <find_volume+0x1f4>
 800e200:	230d      	movs	r3, #13
 800e202:	e147      	b.n	800e494 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e206:	789b      	ldrb	r3, [r3, #2]
 800e208:	461a      	mov	r2, r3
 800e20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e20c:	fb02 f303 	mul.w	r3, r2, r3
 800e210:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e218:	b29a      	uxth	r2, r3
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e220:	895b      	ldrh	r3, [r3, #10]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <find_volume+0x228>
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	895b      	ldrh	r3, [r3, #10]
 800e230:	3b01      	subs	r3, #1
 800e232:	4013      	ands	r3, r2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <find_volume+0x22c>
 800e238:	230d      	movs	r3, #13
 800e23a:	e12b      	b.n	800e494 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	3330      	adds	r3, #48	; 0x30
 800e240:	3311      	adds	r3, #17
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fc68 	bl	800cb18 <ld_word>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	891b      	ldrh	r3, [r3, #8]
 800e254:	f003 030f 	and.w	r3, r3, #15
 800e258:	b29b      	uxth	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <find_volume+0x252>
 800e25e:	230d      	movs	r3, #13
 800e260:	e118      	b.n	800e494 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e264:	3330      	adds	r3, #48	; 0x30
 800e266:	3313      	adds	r3, #19
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fc55 	bl	800cb18 <ld_word>
 800e26e:	4603      	mov	r3, r0
 800e270:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e274:	2b00      	cmp	r3, #0
 800e276:	d106      	bne.n	800e286 <find_volume+0x276>
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	3330      	adds	r3, #48	; 0x30
 800e27c:	3320      	adds	r3, #32
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fe fc62 	bl	800cb48 <ld_dword>
 800e284:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	3330      	adds	r3, #48	; 0x30
 800e28a:	330e      	adds	r3, #14
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fc43 	bl	800cb18 <ld_word>
 800e292:	4603      	mov	r3, r0
 800e294:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e296:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <find_volume+0x290>
 800e29c:	230d      	movs	r3, #13
 800e29e:	e0f9      	b.n	800e494 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e2a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a4:	4413      	add	r3, r2
 800e2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2a8:	8912      	ldrh	r2, [r2, #8]
 800e2aa:	0912      	lsrs	r2, r2, #4
 800e2ac:	b292      	uxth	r2, r2
 800e2ae:	4413      	add	r3, r2
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e2b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d201      	bcs.n	800e2be <find_volume+0x2ae>
 800e2ba:	230d      	movs	r3, #13
 800e2bc:	e0ea      	b.n	800e494 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2c6:	8952      	ldrh	r2, [r2, #10]
 800e2c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d103      	bne.n	800e2dc <find_volume+0x2cc>
 800e2d4:	230d      	movs	r3, #13
 800e2d6:	e0dd      	b.n	800e494 <find_volume+0x484>
 800e2d8:	2000305c 	.word	0x2000305c
		fmt = FS_FAT32;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d802      	bhi.n	800e2f2 <find_volume+0x2e2>
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d802      	bhi.n	800e302 <find_volume+0x2f2>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	1c9a      	adds	r2, r3, #2
 800e306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e308:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e30e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e314:	441a      	add	r2, r3
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e31a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	441a      	add	r2, r3
 800e320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e322:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d11e      	bne.n	800e36a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32e:	3330      	adds	r3, #48	; 0x30
 800e330:	332a      	adds	r3, #42	; 0x2a
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fbf0 	bl	800cb18 <ld_word>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <find_volume+0x332>
 800e33e:	230d      	movs	r3, #13
 800e340:	e0a8      	b.n	800e494 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e344:	891b      	ldrh	r3, [r3, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <find_volume+0x33e>
 800e34a:	230d      	movs	r3, #13
 800e34c:	e0a2      	b.n	800e494 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	3330      	adds	r3, #48	; 0x30
 800e352:	332c      	adds	r3, #44	; 0x2c
 800e354:	4618      	mov	r0, r3
 800e356:	f7fe fbf7 	bl	800cb48 <ld_dword>
 800e35a:	4602      	mov	r2, r0
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	695b      	ldr	r3, [r3, #20]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	647b      	str	r3, [r7, #68]	; 0x44
 800e368:	e01f      	b.n	800e3aa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	891b      	ldrh	r3, [r3, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <find_volume+0x366>
 800e372:	230d      	movs	r3, #13
 800e374:	e08e      	b.n	800e494 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	6a1a      	ldr	r2, [r3, #32]
 800e37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e37c:	441a      	add	r2, r3
 800e37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e380:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e386:	2b02      	cmp	r3, #2
 800e388:	d103      	bne.n	800e392 <find_volume+0x382>
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	695b      	ldr	r3, [r3, #20]
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	e00a      	b.n	800e3a8 <find_volume+0x398>
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	695a      	ldr	r2, [r3, #20]
 800e396:	4613      	mov	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	4413      	add	r3, r2
 800e39c:	085a      	lsrs	r2, r3, #1
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e3a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	699a      	ldr	r2, [r3, #24]
 800e3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e3b4:	0a5b      	lsrs	r3, r3, #9
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d201      	bcs.n	800e3be <find_volume+0x3ae>
 800e3ba:	230d      	movs	r3, #13
 800e3bc:	e06a      	b.n	800e494 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c4:	611a      	str	r2, [r3, #16]
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	691a      	ldr	r2, [r3, #16]
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d0:	2280      	movs	r2, #128	; 0x80
 800e3d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d149      	bne.n	800e470 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	3330      	adds	r3, #48	; 0x30
 800e3e0:	3330      	adds	r3, #48	; 0x30
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fe fb98 	bl	800cb18 <ld_word>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d140      	bne.n	800e470 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3f6:	f7fe fe3f 	bl	800d078 <move_window>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d137      	bne.n	800e470 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	2200      	movs	r2, #0
 800e404:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	3330      	adds	r3, #48	; 0x30
 800e40a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe fb82 	bl	800cb18 <ld_word>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d127      	bne.n	800e470 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	3330      	adds	r3, #48	; 0x30
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe fb8f 	bl	800cb48 <ld_dword>
 800e42a:	4603      	mov	r3, r0
 800e42c:	4a1b      	ldr	r2, [pc, #108]	; (800e49c <find_volume+0x48c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d11e      	bne.n	800e470 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	3330      	adds	r3, #48	; 0x30
 800e436:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fe fb84 	bl	800cb48 <ld_dword>
 800e440:	4603      	mov	r3, r0
 800e442:	4a17      	ldr	r2, [pc, #92]	; (800e4a0 <find_volume+0x490>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d113      	bne.n	800e470 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	3330      	adds	r3, #48	; 0x30
 800e44c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e450:	4618      	mov	r0, r3
 800e452:	f7fe fb79 	bl	800cb48 <ld_dword>
 800e456:	4602      	mov	r2, r0
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	3330      	adds	r3, #48	; 0x30
 800e460:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fb6f 	bl	800cb48 <ld_dword>
 800e46a:	4602      	mov	r2, r0
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e476:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e478:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <find_volume+0x494>)
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	3301      	adds	r3, #1
 800e47e:	b29a      	uxth	r2, r3
 800e480:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <find_volume+0x494>)
 800e482:	801a      	strh	r2, [r3, #0]
 800e484:	4b07      	ldr	r3, [pc, #28]	; (800e4a4 <find_volume+0x494>)
 800e486:	881a      	ldrh	r2, [r3, #0]
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e48c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e48e:	f7fe fd8b 	bl	800cfa8 <clear_lock>
#endif
	return FR_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3758      	adds	r7, #88	; 0x58
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	41615252 	.word	0x41615252
 800e4a0:	61417272 	.word	0x61417272
 800e4a4:	20003060 	.word	0x20003060

0800e4a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e4b2:	2309      	movs	r3, #9
 800e4b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d01c      	beq.n	800e4f6 <validate+0x4e>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d018      	beq.n	800e4f6 <validate+0x4e>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d013      	beq.n	800e4f6 <validate+0x4e>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	889a      	ldrh	r2, [r3, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	88db      	ldrh	r3, [r3, #6]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d10c      	bne.n	800e4f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	785b      	ldrb	r3, [r3, #1]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fa7a 	bl	800c9dc <disk_status>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <validate+0x4e>
			res = FR_OK;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <validate+0x5a>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	e000      	b.n	800e504 <validate+0x5c>
 800e502:	2300      	movs	r3, #0
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	6013      	str	r3, [r2, #0]
	return res;
 800e508:	7bfb      	ldrb	r3, [r7, #15]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
	...

0800e514 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b088      	sub	sp, #32
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	4613      	mov	r3, r2
 800e520:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff fcd5 	bl	800deda <get_ldnumber>
 800e530:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	2b00      	cmp	r3, #0
 800e536:	da01      	bge.n	800e53c <f_mount+0x28>
 800e538:	230b      	movs	r3, #11
 800e53a:	e02b      	b.n	800e594 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e53c:	4a17      	ldr	r2, [pc, #92]	; (800e59c <f_mount+0x88>)
 800e53e:	69fb      	ldr	r3, [r7, #28]
 800e540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e544:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e54c:	69b8      	ldr	r0, [r7, #24]
 800e54e:	f7fe fd2b 	bl	800cfa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	2200      	movs	r2, #0
 800e556:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	490d      	ldr	r1, [pc, #52]	; (800e59c <f_mount+0x88>)
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <f_mount+0x66>
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d001      	beq.n	800e57e <f_mount+0x6a>
 800e57a:	2300      	movs	r3, #0
 800e57c:	e00a      	b.n	800e594 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e57e:	f107 010c 	add.w	r1, r7, #12
 800e582:	f107 0308 	add.w	r3, r7, #8
 800e586:	2200      	movs	r2, #0
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fd41 	bl	800e010 <find_volume>
 800e58e:	4603      	mov	r3, r0
 800e590:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e592:	7dfb      	ldrb	r3, [r7, #23]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3720      	adds	r7, #32
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	2000305c 	.word	0x2000305c

0800e5a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b098      	sub	sp, #96	; 0x60
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <f_open+0x18>
 800e5b4:	2309      	movs	r3, #9
 800e5b6:	e1ad      	b.n	800e914 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e5b8:	79fb      	ldrb	r3, [r7, #7]
 800e5ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e5c0:	79fa      	ldrb	r2, [r7, #7]
 800e5c2:	f107 0110 	add.w	r1, r7, #16
 800e5c6:	f107 0308 	add.w	r3, r7, #8
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fd20 	bl	800e010 <find_volume>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f040 8191 	bne.w	800e902 <f_open+0x362>
		dj.obj.fs = fs;
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	f107 0314 	add.w	r3, r7, #20
 800e5ea:	4611      	mov	r1, r2
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7ff fc03 	bl	800ddf8 <follow_path>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d11a      	bne.n	800e636 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e604:	b25b      	sxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	da03      	bge.n	800e612 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e60a:	2306      	movs	r3, #6
 800e60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e610:	e011      	b.n	800e636 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	f023 0301 	bic.w	r3, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	bf14      	ite	ne
 800e61c:	2301      	movne	r3, #1
 800e61e:	2300      	moveq	r3, #0
 800e620:	b2db      	uxtb	r3, r3
 800e622:	461a      	mov	r2, r3
 800e624:	f107 0314 	add.w	r3, r7, #20
 800e628:	4611      	mov	r1, r2
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fb74 	bl	800cd18 <chk_lock>
 800e630:	4603      	mov	r3, r0
 800e632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	f003 031c 	and.w	r3, r3, #28
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d07f      	beq.n	800e740 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e644:	2b00      	cmp	r3, #0
 800e646:	d017      	beq.n	800e678 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	d10e      	bne.n	800e66e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e650:	f7fe fbbe 	bl	800cdd0 <enq_lock>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d006      	beq.n	800e668 <f_open+0xc8>
 800e65a:	f107 0314 	add.w	r3, r7, #20
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff faa5 	bl	800dbae <dir_register>
 800e664:	4603      	mov	r3, r0
 800e666:	e000      	b.n	800e66a <f_open+0xca>
 800e668:	2312      	movs	r3, #18
 800e66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	f043 0308 	orr.w	r3, r3, #8
 800e674:	71fb      	strb	r3, [r7, #7]
 800e676:	e010      	b.n	800e69a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e678:	7ebb      	ldrb	r3, [r7, #26]
 800e67a:	f003 0311 	and.w	r3, r3, #17
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d003      	beq.n	800e68a <f_open+0xea>
					res = FR_DENIED;
 800e682:	2307      	movs	r3, #7
 800e684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e688:	e007      	b.n	800e69a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	f003 0304 	and.w	r3, r3, #4
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <f_open+0xfa>
 800e694:	2308      	movs	r3, #8
 800e696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e69a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d168      	bne.n	800e774 <f_open+0x1d4>
 800e6a2:	79fb      	ldrb	r3, [r7, #7]
 800e6a4:	f003 0308 	and.w	r3, r3, #8
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d063      	beq.n	800e774 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e6ac:	f7f8 fc88 	bl	8006fc0 <get_fattime>
 800e6b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b4:	330e      	adds	r3, #14
 800e6b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fa83 	bl	800cbc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c0:	3316      	adds	r3, #22
 800e6c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fe fa7d 	bl	800cbc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6cc:	330b      	adds	r3, #11
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff f9d4 	bl	800da86 <ld_clust>
 800e6de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff f9ec 	bl	800dac4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ee:	331c      	adds	r3, #28
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fa66 	bl	800cbc4 <st_dword>
					fs->wflag = 1;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d037      	beq.n	800e774 <f_open+0x1d4>
						dw = fs->winsect;
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e70a:	f107 0314 	add.w	r3, r7, #20
 800e70e:	2200      	movs	r2, #0
 800e710:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe feff 	bl	800d516 <remove_chain>
 800e718:	4603      	mov	r3, r0
 800e71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e722:	2b00      	cmp	r3, #0
 800e724:	d126      	bne.n	800e774 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fca4 	bl	800d078 <move_window>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e73a:	3a01      	subs	r2, #1
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	e019      	b.n	800e774 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e744:	2b00      	cmp	r3, #0
 800e746:	d115      	bne.n	800e774 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e748:	7ebb      	ldrb	r3, [r7, #26]
 800e74a:	f003 0310 	and.w	r3, r3, #16
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d003      	beq.n	800e75a <f_open+0x1ba>
					res = FR_NO_FILE;
 800e752:	2304      	movs	r3, #4
 800e754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e758:	e00c      	b.n	800e774 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	f003 0302 	and.w	r3, r3, #2
 800e760:	2b00      	cmp	r3, #0
 800e762:	d007      	beq.n	800e774 <f_open+0x1d4>
 800e764:	7ebb      	ldrb	r3, [r7, #26]
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d002      	beq.n	800e774 <f_open+0x1d4>
						res = FR_DENIED;
 800e76e:	2307      	movs	r3, #7
 800e770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d128      	bne.n	800e7ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	f003 0308 	and.w	r3, r3, #8
 800e782:	2b00      	cmp	r3, #0
 800e784:	d003      	beq.n	800e78e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e786:	79fb      	ldrb	r3, [r7, #7]
 800e788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	f023 0301 	bic.w	r3, r3, #1
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	bf14      	ite	ne
 800e7a6:	2301      	movne	r3, #1
 800e7a8:	2300      	moveq	r3, #0
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f107 0314 	add.w	r3, r7, #20
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fe fb2d 	bl	800ce14 <inc_lock>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <f_open+0x22e>
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f040 8095 	bne.w	800e902 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7dc:	4611      	mov	r1, r2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff f951 	bl	800da86 <ld_clust>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ec:	331c      	adds	r3, #28
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe f9aa 	bl	800cb48 <ld_dword>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	88da      	ldrh	r2, [r3, #6]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	79fa      	ldrb	r2, [r7, #7]
 800e812:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2200      	movs	r2, #0
 800e81e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2200      	movs	r2, #0
 800e824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	3330      	adds	r3, #48	; 0x30
 800e82a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e82e:	2100      	movs	r1, #0
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe fa14 	bl	800cc5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e836:	79fb      	ldrb	r3, [r7, #7]
 800e838:	f003 0320 	and.w	r3, r3, #32
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d060      	beq.n	800e902 <f_open+0x362>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d05c      	beq.n	800e902 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	68da      	ldr	r2, [r3, #12]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	895b      	ldrh	r3, [r3, #10]
 800e854:	025b      	lsls	r3, r3, #9
 800e856:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	657b      	str	r3, [r7, #84]	; 0x54
 800e864:	e016      	b.n	800e894 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe fcbf 	bl	800d1ee <get_fat>
 800e870:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e874:	2b01      	cmp	r3, #1
 800e876:	d802      	bhi.n	800e87e <f_open+0x2de>
 800e878:	2302      	movs	r3, #2
 800e87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e87e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e884:	d102      	bne.n	800e88c <f_open+0x2ec>
 800e886:	2301      	movs	r3, #1
 800e888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e88c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e88e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	657b      	str	r3, [r7, #84]	; 0x54
 800e894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d103      	bne.n	800e8a4 <f_open+0x304>
 800e89c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d8e0      	bhi.n	800e866 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e8aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d127      	bne.n	800e902 <f_open+0x362>
 800e8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d022      	beq.n	800e902 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fc75 	bl	800d1b0 <clust2sect>
 800e8c6:	6478      	str	r0, [r7, #68]	; 0x44
 800e8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d103      	bne.n	800e8d6 <f_open+0x336>
						res = FR_INT_ERR;
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e8d4:	e015      	b.n	800e902 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8d8:	0a5a      	lsrs	r2, r3, #9
 800e8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	7858      	ldrb	r0, [r3, #1]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6a1a      	ldr	r2, [r3, #32]
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f7fe f8b3 	bl	800ca5c <disk_read>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <f_open+0x362>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e906:	2b00      	cmp	r3, #0
 800e908:	d002      	beq.n	800e910 <f_open+0x370>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e914:	4618      	mov	r0, r3
 800e916:	3760      	adds	r7, #96	; 0x60
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08c      	sub	sp, #48	; 0x30
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f107 0210 	add.w	r2, r7, #16
 800e93a:	4611      	mov	r1, r2
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff fdb3 	bl	800e4a8 <validate>
 800e942:	4603      	mov	r3, r0
 800e944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d107      	bne.n	800e960 <f_write+0x44>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	7d5b      	ldrb	r3, [r3, #21]
 800e954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <f_write+0x4a>
 800e960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e964:	e14b      	b.n	800ebfe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	7d1b      	ldrb	r3, [r3, #20]
 800e96a:	f003 0302 	and.w	r3, r3, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d101      	bne.n	800e976 <f_write+0x5a>
 800e972:	2307      	movs	r3, #7
 800e974:	e143      	b.n	800ebfe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	699a      	ldr	r2, [r3, #24]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	441a      	add	r2, r3
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	429a      	cmp	r2, r3
 800e984:	f080 812d 	bcs.w	800ebe2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	43db      	mvns	r3, r3
 800e98e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e990:	e127      	b.n	800ebe2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f040 80e3 	bne.w	800eb66 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	0a5b      	lsrs	r3, r3, #9
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	8952      	ldrh	r2, [r2, #10]
 800e9aa:	3a01      	subs	r2, #1
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d143      	bne.n	800ea3e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10c      	bne.n	800e9d8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d11a      	bne.n	800ea00 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fe fe06 	bl	800d5e0 <create_chain>
 800e9d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e9d6:	e013      	b.n	800ea00 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d007      	beq.n	800e9f0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7fe fe92 	bl	800d710 <clmt_clust>
 800e9ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800e9ee:	e007      	b.n	800ea00 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	69db      	ldr	r3, [r3, #28]
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f7fe fdf1 	bl	800d5e0 <create_chain>
 800e9fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f000 80f2 	beq.w	800ebec <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d104      	bne.n	800ea18 <f_write+0xfc>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2202      	movs	r2, #2
 800ea12:	755a      	strb	r2, [r3, #21]
 800ea14:	2302      	movs	r3, #2
 800ea16:	e0f2      	b.n	800ebfe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1e:	d104      	bne.n	800ea2a <f_write+0x10e>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2201      	movs	r2, #1
 800ea24:	755a      	strb	r2, [r3, #21]
 800ea26:	2301      	movs	r3, #1
 800ea28:	e0e9      	b.n	800ebfe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea2e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d102      	bne.n	800ea3e <f_write+0x122>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea3c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	7d1b      	ldrb	r3, [r3, #20]
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	da18      	bge.n	800ea7a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	7858      	ldrb	r0, [r3, #1]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a1a      	ldr	r2, [r3, #32]
 800ea56:	2301      	movs	r3, #1
 800ea58:	f7fe f820 	bl	800ca9c <disk_write>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d004      	beq.n	800ea6c <f_write+0x150>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2201      	movs	r2, #1
 800ea66:	755a      	strb	r2, [r3, #21]
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e0c8      	b.n	800ebfe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	7d1b      	ldrb	r3, [r3, #20]
 800ea70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	69db      	ldr	r3, [r3, #28]
 800ea80:	4619      	mov	r1, r3
 800ea82:	4610      	mov	r0, r2
 800ea84:	f7fe fb94 	bl	800d1b0 <clust2sect>
 800ea88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <f_write+0x17e>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2202      	movs	r2, #2
 800ea94:	755a      	strb	r2, [r3, #21]
 800ea96:	2302      	movs	r3, #2
 800ea98:	e0b1      	b.n	800ebfe <f_write+0x2e2>
			sect += csect;
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	0a5b      	lsrs	r3, r3, #9
 800eaa6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800eaa8:	6a3b      	ldr	r3, [r7, #32]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d03c      	beq.n	800eb28 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eaae:	69ba      	ldr	r2, [r7, #24]
 800eab0:	6a3b      	ldr	r3, [r7, #32]
 800eab2:	4413      	add	r3, r2
 800eab4:	693a      	ldr	r2, [r7, #16]
 800eab6:	8952      	ldrh	r2, [r2, #10]
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d905      	bls.n	800eac8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	461a      	mov	r2, r3
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	69f9      	ldr	r1, [r7, #28]
 800ead2:	f7fd ffe3 	bl	800ca9c <disk_write>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d004      	beq.n	800eae6 <f_write+0x1ca>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	755a      	strb	r2, [r3, #21]
 800eae2:	2301      	movs	r3, #1
 800eae4:	e08b      	b.n	800ebfe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6a1a      	ldr	r2, [r3, #32]
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	6a3a      	ldr	r2, [r7, #32]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d915      	bls.n	800eb20 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6a1a      	ldr	r2, [r3, #32]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	025b      	lsls	r3, r3, #9
 800eb04:	69fa      	ldr	r2, [r7, #28]
 800eb06:	4413      	add	r3, r2
 800eb08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	f7fe f885 	bl	800cc1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	7d1b      	ldrb	r3, [r3, #20]
 800eb16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eb20:	6a3b      	ldr	r3, [r7, #32]
 800eb22:	025b      	lsls	r3, r3, #9
 800eb24:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eb26:	e03f      	b.n	800eba8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6a1b      	ldr	r3, [r3, #32]
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d016      	beq.n	800eb60 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	699a      	ldr	r2, [r3, #24]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d210      	bcs.n	800eb60 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	7858      	ldrb	r0, [r3, #1]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb48:	2301      	movs	r3, #1
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	f7fd ff86 	bl	800ca5c <disk_read>
 800eb50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d004      	beq.n	800eb60 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	755a      	strb	r2, [r3, #21]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e04e      	b.n	800ebfe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb6e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eb72:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d901      	bls.n	800eb80 <f_write+0x264>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb8e:	4413      	add	r3, r2
 800eb90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb92:	69f9      	ldr	r1, [r7, #28]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe f841 	bl	800cc1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	7d1b      	ldrb	r3, [r3, #20]
 800eb9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eba8:	69fa      	ldr	r2, [r7, #28]
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	4413      	add	r3, r2
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	699a      	ldr	r2, [r3, #24]
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	441a      	add	r2, r3
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	619a      	str	r2, [r3, #24]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	68da      	ldr	r2, [r3, #12]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	bf38      	it	cc
 800ebc8:	461a      	movcc	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	60da      	str	r2, [r3, #12]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	441a      	add	r2, r3
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f47f aed4 	bne.w	800e992 <f_write+0x76>
 800ebea:	e000      	b.n	800ebee <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ebec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	7d1b      	ldrb	r3, [r3, #20]
 800ebf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3730      	adds	r7, #48	; 0x30
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b086      	sub	sp, #24
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f107 0208 	add.w	r2, r7, #8
 800ec14:	4611      	mov	r1, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff fc46 	bl	800e4a8 <validate>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d168      	bne.n	800ecf8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d062      	beq.n	800ecf8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	7d1b      	ldrb	r3, [r3, #20]
 800ec36:	b25b      	sxtb	r3, r3
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	da15      	bge.n	800ec68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	7858      	ldrb	r0, [r3, #1]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a1a      	ldr	r2, [r3, #32]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	f7fd ff26 	bl	800ca9c <disk_write>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <f_sync+0x54>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e04f      	b.n	800ecfa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7d1b      	ldrb	r3, [r3, #20]
 800ec5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ec68:	f7f8 f9aa 	bl	8006fc0 <get_fattime>
 800ec6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec74:	4619      	mov	r1, r3
 800ec76:	4610      	mov	r0, r2
 800ec78:	f7fe f9fe 	bl	800d078 <move_window>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d138      	bne.n	800ecf8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	330b      	adds	r3, #11
 800ec90:	781a      	ldrb	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	330b      	adds	r3, #11
 800ec96:	f042 0220 	orr.w	r2, r2, #32
 800ec9a:	b2d2      	uxtb	r2, r2
 800ec9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6818      	ldr	r0, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	461a      	mov	r2, r3
 800eca8:	68f9      	ldr	r1, [r7, #12]
 800ecaa:	f7fe ff0b 	bl	800dac4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f103 021c 	add.w	r2, r3, #28
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f7fd ff82 	bl	800cbc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	3316      	adds	r3, #22
 800ecc4:	6939      	ldr	r1, [r7, #16]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fd ff7c 	bl	800cbc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	3312      	adds	r3, #18
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fd ff5b 	bl	800cb8e <st_word>
					fs->wflag = 1;
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fe f9f7 	bl	800d0d4 <sync_fs>
 800ece6:	4603      	mov	r3, r0
 800ece8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	7d1b      	ldrb	r3, [r3, #20]
 800ecee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7ff ff7b 	bl	800ec06 <f_sync>
 800ed10:	4603      	mov	r3, r0
 800ed12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d118      	bne.n	800ed4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f107 0208 	add.w	r2, r7, #8
 800ed20:	4611      	mov	r1, r2
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff fbc0 	bl	800e4a8 <validate>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10c      	bne.n	800ed4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fe f8fa 	bl	800cf30 <dec_lock>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d102      	bne.n	800ed4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ed4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b090      	sub	sp, #64	; 0x40
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f107 0208 	add.w	r2, r7, #8
 800ed66:	4611      	mov	r1, r2
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff fb9d 	bl	800e4a8 <validate>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ed74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d103      	bne.n	800ed84 <f_lseek+0x2e>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	7d5b      	ldrb	r3, [r3, #21]
 800ed80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ed84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <f_lseek+0x3c>
 800ed8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ed90:	e1e6      	b.n	800f160 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f000 80d1 	beq.w	800ef3e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d15a      	bne.n	800ee5a <f_lseek+0x104>
			tbl = fp->cltbl;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	1d1a      	adds	r2, r3, #4
 800edae:	627a      	str	r2, [r7, #36]	; 0x24
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	2302      	movs	r3, #2
 800edb6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d03a      	beq.n	800ee3a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800edc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc6:	613b      	str	r3, [r7, #16]
 800edc8:	2300      	movs	r3, #0
 800edca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	3302      	adds	r3, #2
 800edd0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	3301      	adds	r3, #1
 800edda:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe fa04 	bl	800d1ee <get_fat>
 800ede6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	2b01      	cmp	r3, #1
 800edec:	d804      	bhi.n	800edf8 <f_lseek+0xa2>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2202      	movs	r2, #2
 800edf2:	755a      	strb	r2, [r3, #21]
 800edf4:	2302      	movs	r3, #2
 800edf6:	e1b3      	b.n	800f160 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfe:	d104      	bne.n	800ee0a <f_lseek+0xb4>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	755a      	strb	r2, [r3, #21]
 800ee06:	2301      	movs	r3, #1
 800ee08:	e1aa      	b.n	800f160 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d0de      	beq.n	800edd2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ee14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d809      	bhi.n	800ee30 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	627a      	str	r2, [r7, #36]	; 0x24
 800ee22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee28:	1d1a      	adds	r2, r3, #4
 800ee2a:	627a      	str	r2, [r7, #36]	; 0x24
 800ee2c:	693a      	ldr	r2, [r7, #16]
 800ee2e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d3c4      	bcc.n	800edc4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee40:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ee42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d803      	bhi.n	800ee52 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	e184      	b.n	800f15c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ee52:	2311      	movs	r3, #17
 800ee54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ee58:	e180      	b.n	800f15c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d902      	bls.n	800ee6a <f_lseek+0x114>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f000 8172 	beq.w	800f15c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fe fc46 	bl	800d710 <clmt_clust>
 800ee84:	4602      	mov	r2, r0
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	69db      	ldr	r3, [r3, #28]
 800ee90:	4619      	mov	r1, r3
 800ee92:	4610      	mov	r0, r2
 800ee94:	f7fe f98c 	bl	800d1b0 <clust2sect>
 800ee98:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d104      	bne.n	800eeaa <f_lseek+0x154>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	755a      	strb	r2, [r3, #21]
 800eea6:	2302      	movs	r3, #2
 800eea8:	e15a      	b.n	800f160 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	0a5b      	lsrs	r3, r3, #9
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	8952      	ldrh	r2, [r2, #10]
 800eeb4:	3a01      	subs	r2, #1
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	69ba      	ldr	r2, [r7, #24]
 800eeba:	4413      	add	r3, r2
 800eebc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8148 	beq.w	800f15c <f_lseek+0x406>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a1b      	ldr	r3, [r3, #32]
 800eed0:	69ba      	ldr	r2, [r7, #24]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	f000 8142 	beq.w	800f15c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	7d1b      	ldrb	r3, [r3, #20]
 800eedc:	b25b      	sxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	da18      	bge.n	800ef14 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	7858      	ldrb	r0, [r3, #1]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a1a      	ldr	r2, [r3, #32]
 800eef0:	2301      	movs	r3, #1
 800eef2:	f7fd fdd3 	bl	800ca9c <disk_write>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d004      	beq.n	800ef06 <f_lseek+0x1b0>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	755a      	strb	r2, [r3, #21]
 800ef02:	2301      	movs	r3, #1
 800ef04:	e12c      	b.n	800f160 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	7d1b      	ldrb	r3, [r3, #20]
 800ef0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	7858      	ldrb	r0, [r3, #1]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef1e:	2301      	movs	r3, #1
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	f7fd fd9b 	bl	800ca5c <disk_read>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <f_lseek+0x1e0>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	755a      	strb	r2, [r3, #21]
 800ef32:	2301      	movs	r3, #1
 800ef34:	e114      	b.n	800f160 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	621a      	str	r2, [r3, #32]
 800ef3c:	e10e      	b.n	800f15c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d908      	bls.n	800ef5a <f_lseek+0x204>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7d1b      	ldrb	r3, [r3, #20]
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	699b      	ldr	r3, [r3, #24]
 800ef5e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	637b      	str	r3, [r7, #52]	; 0x34
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef68:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 80a7 	beq.w	800f0c0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	895b      	ldrh	r3, [r3, #10]
 800ef76:	025b      	lsls	r3, r3, #9
 800ef78:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d01b      	beq.n	800efb8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	1e5a      	subs	r2, r3, #1
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	1e59      	subs	r1, r3, #1
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d30f      	bcc.n	800efb8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	1e5a      	subs	r2, r3, #1
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	425b      	negs	r3, r3
 800efa0:	401a      	ands	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	683a      	ldr	r2, [r7, #0]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800efb6:	e022      	b.n	800effe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d119      	bne.n	800eff8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2100      	movs	r1, #0
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe fb09 	bl	800d5e0 <create_chain>
 800efce:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d104      	bne.n	800efe0 <f_lseek+0x28a>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2202      	movs	r2, #2
 800efda:	755a      	strb	r2, [r3, #21]
 800efdc:	2302      	movs	r3, #2
 800efde:	e0bf      	b.n	800f160 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe6:	d104      	bne.n	800eff2 <f_lseek+0x29c>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	755a      	strb	r2, [r3, #21]
 800efee:	2301      	movs	r3, #1
 800eff0:	e0b6      	b.n	800f160 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eff6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800effc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800effe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f000:	2b00      	cmp	r3, #0
 800f002:	d05d      	beq.n	800f0c0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f004:	e03a      	b.n	800f07c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	603b      	str	r3, [r7, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	699a      	ldr	r2, [r3, #24]
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	441a      	add	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	7d1b      	ldrb	r3, [r3, #20]
 800f01e:	f003 0302 	and.w	r3, r3, #2
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00b      	beq.n	800f03e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fe fad8 	bl	800d5e0 <create_chain>
 800f030:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	2b00      	cmp	r3, #0
 800f036:	d108      	bne.n	800f04a <f_lseek+0x2f4>
							ofs = 0; break;
 800f038:	2300      	movs	r3, #0
 800f03a:	603b      	str	r3, [r7, #0]
 800f03c:	e022      	b.n	800f084 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe f8d3 	bl	800d1ee <get_fat>
 800f048:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f050:	d104      	bne.n	800f05c <f_lseek+0x306>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	755a      	strb	r2, [r3, #21]
 800f058:	2301      	movs	r3, #1
 800f05a:	e081      	b.n	800f160 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d904      	bls.n	800f06c <f_lseek+0x316>
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f068:	429a      	cmp	r2, r3
 800f06a:	d304      	bcc.n	800f076 <f_lseek+0x320>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2202      	movs	r2, #2
 800f070:	755a      	strb	r2, [r3, #21]
 800f072:	2302      	movs	r3, #2
 800f074:	e074      	b.n	800f160 <f_lseek+0x40a>
					fp->clust = clst;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f07a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	429a      	cmp	r2, r3
 800f082:	d8c0      	bhi.n	800f006 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	441a      	add	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f096:	2b00      	cmp	r3, #0
 800f098:	d012      	beq.n	800f0c0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe f886 	bl	800d1b0 <clust2sect>
 800f0a4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d104      	bne.n	800f0b6 <f_lseek+0x360>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	755a      	strb	r2, [r3, #21]
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	e054      	b.n	800f160 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	0a5b      	lsrs	r3, r3, #9
 800f0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0bc:	4413      	add	r3, r2
 800f0be:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	699a      	ldr	r2, [r3, #24]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d90a      	bls.n	800f0e2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	699a      	ldr	r2, [r3, #24]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
 800f0d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0dc:	b2da      	uxtb	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d036      	beq.n	800f15c <f_lseek+0x406>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d031      	beq.n	800f15c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	b25b      	sxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	da18      	bge.n	800f134 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	7858      	ldrb	r0, [r3, #1]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a1a      	ldr	r2, [r3, #32]
 800f110:	2301      	movs	r3, #1
 800f112:	f7fd fcc3 	bl	800ca9c <disk_write>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d004      	beq.n	800f126 <f_lseek+0x3d0>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	755a      	strb	r2, [r3, #21]
 800f122:	2301      	movs	r3, #1
 800f124:	e01c      	b.n	800f160 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7d1b      	ldrb	r3, [r3, #20]
 800f12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f12e:	b2da      	uxtb	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	7858      	ldrb	r0, [r3, #1]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f13e:	2301      	movs	r3, #1
 800f140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f142:	f7fd fc8b 	bl	800ca5c <disk_read>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d004      	beq.n	800f156 <f_lseek+0x400>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	755a      	strb	r2, [r3, #21]
 800f152:	2301      	movs	r3, #1
 800f154:	e004      	b.n	800f160 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f15a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f15c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f160:	4618      	mov	r0, r3
 800f162:	3740      	adds	r7, #64	; 0x40
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b090      	sub	sp, #64	; 0x40
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f172:	f107 010c 	add.w	r1, r7, #12
 800f176:	1d3b      	adds	r3, r7, #4
 800f178:	2200      	movs	r2, #0
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fe ff48 	bl	800e010 <find_volume>
 800f180:	4603      	mov	r3, r0
 800f182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d11f      	bne.n	800f1ce <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	f107 030c 	add.w	r3, r7, #12
 800f194:	4611      	mov	r1, r2
 800f196:	4618      	mov	r0, r3
 800f198:	f7fe fe2e 	bl	800ddf8 <follow_path>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f1a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d111      	bne.n	800f1ce <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f1aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f1ae:	b25b      	sxtb	r3, r3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	da03      	bge.n	800f1bc <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f1b4:	2306      	movs	r3, #6
 800f1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f1ba:	e008      	b.n	800f1ce <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d005      	beq.n	800f1ce <f_stat+0x66>
 800f1c2:	f107 030c 	add.w	r3, r7, #12
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fe fd22 	bl	800dc12 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f1ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3740      	adds	r7, #64	; 0x40
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1f2:	4b1f      	ldr	r3, [pc, #124]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f1f4:	7a5b      	ldrb	r3, [r3, #9]
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d131      	bne.n	800f260 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f1fc:	4b1c      	ldr	r3, [pc, #112]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f1fe:	7a5b      	ldrb	r3, [r3, #9]
 800f200:	b2db      	uxtb	r3, r3
 800f202:	461a      	mov	r2, r3
 800f204:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f206:	2100      	movs	r1, #0
 800f208:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f20a:	4b19      	ldr	r3, [pc, #100]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f20c:	7a5b      	ldrb	r3, [r3, #9]
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	4a17      	ldr	r2, [pc, #92]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f21a:	4b15      	ldr	r3, [pc, #84]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f21c:	7a5b      	ldrb	r3, [r3, #9]
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	461a      	mov	r2, r3
 800f222:	4b13      	ldr	r3, [pc, #76]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f224:	4413      	add	r3, r2
 800f226:	79fa      	ldrb	r2, [r7, #7]
 800f228:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f22a:	4b11      	ldr	r3, [pc, #68]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f22c:	7a5b      	ldrb	r3, [r3, #9]
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	1c5a      	adds	r2, r3, #1
 800f232:	b2d1      	uxtb	r1, r2
 800f234:	4a0e      	ldr	r2, [pc, #56]	; (800f270 <FATFS_LinkDriverEx+0x94>)
 800f236:	7251      	strb	r1, [r2, #9]
 800f238:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f23a:	7dbb      	ldrb	r3, [r7, #22]
 800f23c:	3330      	adds	r3, #48	; 0x30
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	3301      	adds	r3, #1
 800f248:	223a      	movs	r2, #58	; 0x3a
 800f24a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	3302      	adds	r3, #2
 800f250:	222f      	movs	r2, #47	; 0x2f
 800f252:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	3303      	adds	r3, #3
 800f258:	2200      	movs	r2, #0
 800f25a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f260:	7dfb      	ldrb	r3, [r7, #23]
}
 800f262:	4618      	mov	r0, r3
 800f264:	371c      	adds	r7, #28
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	20003084 	.word	0x20003084

0800f274 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f27e:	2200      	movs	r2, #0
 800f280:	6839      	ldr	r1, [r7, #0]
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7ff ffaa 	bl	800f1dc <FATFS_LinkDriverEx>
 800f288:	4603      	mov	r3, r0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3708      	adds	r7, #8
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
	...

0800f294 <buffer_lcd_lock>:

uint8_t buffer_lcd_state = 0;


static uint8_t buffer_lcd_lock(uint8_t value)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	71fb      	strb	r3, [r7, #7]
	if(buffer_lcd_state != 0)
 800f29e:	4b08      	ldr	r3, [pc, #32]	; (800f2c0 <buffer_lcd_lock+0x2c>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <buffer_lcd_lock+0x16>
	{
		return 1;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	e003      	b.n	800f2b2 <buffer_lcd_lock+0x1e>
	}

	buffer_lcd_state = value;
 800f2aa:	4a05      	ldr	r2, [pc, #20]	; (800f2c0 <buffer_lcd_lock+0x2c>)
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	7013      	strb	r3, [r2, #0]
	return 0;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	370c      	adds	r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	20003c52 	.word	0x20003c52

0800f2c4 <buffer_lcd_unlock>:

static uint8_t buffer_lcd_unlock(void)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	af00      	add	r7, sp, #0
	buffer_lcd_state = 0;
 800f2c8:	4b04      	ldr	r3, [pc, #16]	; (800f2dc <buffer_lcd_unlock+0x18>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	701a      	strb	r2, [r3, #0]
	return 0;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	20003c52 	.word	0x20003c52

0800f2e0 <buffer_lcd_get_count>:

size_t buffer_lcd_get_count(void)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
	size_t count = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	607b      	str	r3, [r7, #4]
	size_t offset = (buffer_lcd_overflow_data == 1) ? (BUFFER_LCD_COUNT) : (0);
 800f2ea:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <buffer_lcd_get_count+0x48>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d101      	bne.n	800f2f6 <buffer_lcd_get_count+0x16>
 800f2f2:	2364      	movs	r3, #100	; 0x64
 800f2f4:	e000      	b.n	800f2f8 <buffer_lcd_get_count+0x18>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	603b      	str	r3, [r7, #0]

	if((buffer_lcd_w_index + offset) >= buffer_lcd_r_index)
 800f2fa:	4b0c      	ldr	r3, [pc, #48]	; (800f32c <buffer_lcd_get_count+0x4c>)
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	441a      	add	r2, r3
 800f302:	4b0b      	ldr	r3, [pc, #44]	; (800f330 <buffer_lcd_get_count+0x50>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	429a      	cmp	r2, r3
 800f308:	d307      	bcc.n	800f31a <buffer_lcd_get_count+0x3a>
	{
		count = buffer_lcd_w_index + offset - buffer_lcd_r_index;
 800f30a:	4b08      	ldr	r3, [pc, #32]	; (800f32c <buffer_lcd_get_count+0x4c>)
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	441a      	add	r2, r3
 800f312:	4b07      	ldr	r3, [pc, #28]	; (800f330 <buffer_lcd_get_count+0x50>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	607b      	str	r3, [r7, #4]
	}

	return count;
 800f31a:	687b      	ldr	r3, [r7, #4]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	20003c50 	.word	0x20003c50
 800f32c:	20003c48 	.word	0x20003c48
 800f330:	20003c4c 	.word	0x20003c4c

0800f334 <buffer_lcd_set_value>:

uint8_t buffer_lcd_set_value(uint32_t *value, size_t length)	// length = adc values count??
{
 800f334:	b590      	push	{r4, r7, lr}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
	if(buffer_lcd_lock(1))
 800f33e:	2001      	movs	r0, #1
 800f340:	f7ff ffa8 	bl	800f294 <buffer_lcd_lock>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <buffer_lcd_set_value+0x1a>
	{
		return 1;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e067      	b.n	800f41e <buffer_lcd_set_value+0xea>
	}

	// increase the 'read index' to overwrite old data
	if((buffer_lcd_overflow_data == 1) && (buffer_lcd_w_index == buffer_lcd_r_index))
 800f34e:	4b36      	ldr	r3, [pc, #216]	; (800f428 <buffer_lcd_set_value+0xf4>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	2b01      	cmp	r3, #1
 800f354:	d111      	bne.n	800f37a <buffer_lcd_set_value+0x46>
 800f356:	4b35      	ldr	r3, [pc, #212]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	4b35      	ldr	r3, [pc, #212]	; (800f430 <buffer_lcd_set_value+0xfc>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d10b      	bne.n	800f37a <buffer_lcd_set_value+0x46>
	{
		buffer_lcd_r_index++;
 800f362:	4b33      	ldr	r3, [pc, #204]	; (800f430 <buffer_lcd_set_value+0xfc>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3301      	adds	r3, #1
 800f368:	4a31      	ldr	r2, [pc, #196]	; (800f430 <buffer_lcd_set_value+0xfc>)
 800f36a:	6013      	str	r3, [r2, #0]

		if(buffer_lcd_r_index == BUFFER_LCD_COUNT)
 800f36c:	4b30      	ldr	r3, [pc, #192]	; (800f430 <buffer_lcd_set_value+0xfc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b64      	cmp	r3, #100	; 0x64
 800f372:	d102      	bne.n	800f37a <buffer_lcd_set_value+0x46>
		{
			buffer_lcd_r_index = 0;
 800f374:	4b2e      	ldr	r3, [pc, #184]	; (800f430 <buffer_lcd_set_value+0xfc>)
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]
		}
	}

	memcpy(buffer_lcd[buffer_lcd_w_index].buffer, value, length * sizeof(buffer_lcd[0].buffer[0]));
 800f37a:	4b2c      	ldr	r3, [pc, #176]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	4613      	mov	r3, r2
 800f380:	011b      	lsls	r3, r3, #4
 800f382:	1a9b      	subs	r3, r3, r2
 800f384:	005b      	lsls	r3, r3, #1
 800f386:	4a2b      	ldr	r2, [pc, #172]	; (800f434 <buffer_lcd_set_value+0x100>)
 800f388:	1898      	adds	r0, r3, r2
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	461a      	mov	r2, r3
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	f001 feaf 	bl	80110f4 <memcpy>
	buffer_lcd[buffer_lcd_w_index].sec = clock_get_sec();
 800f396:	4b25      	ldr	r3, [pc, #148]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f398:	681c      	ldr	r4, [r3, #0]
 800f39a:	f000 fcab 	bl	800fcf4 <clock_get_sec>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4a24      	ldr	r2, [pc, #144]	; (800f434 <buffer_lcd_set_value+0x100>)
 800f3a4:	4623      	mov	r3, r4
 800f3a6:	011b      	lsls	r3, r3, #4
 800f3a8:	1b1b      	subs	r3, r3, r4
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	331a      	adds	r3, #26
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	701a      	strb	r2, [r3, #0]
	buffer_lcd[buffer_lcd_w_index].min = clock_get_min();
 800f3b4:	4b1d      	ldr	r3, [pc, #116]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f3b6:	681c      	ldr	r4, [r3, #0]
 800f3b8:	f000 fca8 	bl	800fd0c <clock_get_min>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4a1c      	ldr	r2, [pc, #112]	; (800f434 <buffer_lcd_set_value+0x100>)
 800f3c2:	4623      	mov	r3, r4
 800f3c4:	011b      	lsls	r3, r3, #4
 800f3c6:	1b1b      	subs	r3, r3, r4
 800f3c8:	005b      	lsls	r3, r3, #1
 800f3ca:	4413      	add	r3, r2
 800f3cc:	331b      	adds	r3, #27
 800f3ce:	460a      	mov	r2, r1
 800f3d0:	701a      	strb	r2, [r3, #0]
	buffer_lcd[buffer_lcd_w_index].hour = clock_get_hour();
 800f3d2:	4b16      	ldr	r3, [pc, #88]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f3d4:	681c      	ldr	r4, [r3, #0]
 800f3d6:	f000 fca5 	bl	800fd24 <clock_get_hour>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4a15      	ldr	r2, [pc, #84]	; (800f434 <buffer_lcd_set_value+0x100>)
 800f3e0:	4623      	mov	r3, r4
 800f3e2:	011b      	lsls	r3, r3, #4
 800f3e4:	1b1b      	subs	r3, r3, r4
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	4413      	add	r3, r2
 800f3ea:	331c      	adds	r3, #28
 800f3ec:	460a      	mov	r2, r1
 800f3ee:	701a      	strb	r2, [r3, #0]

	buffer_lcd_w_index++;
 800f3f0:	4b0e      	ldr	r3, [pc, #56]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	4a0d      	ldr	r2, [pc, #52]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f3f8:	6013      	str	r3, [r2, #0]
	debug_inc_lcd_buffer();
 800f3fa:	f000 fd5d 	bl	800feb8 <debug_inc_lcd_buffer>

	if(buffer_lcd_w_index == BUFFER_LCD_COUNT)
 800f3fe:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b64      	cmp	r3, #100	; 0x64
 800f404:	d108      	bne.n	800f418 <buffer_lcd_set_value+0xe4>
	{
		buffer_lcd_w_index = 0;
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <buffer_lcd_set_value+0xf8>)
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]
		buffer_lcd_overflow_data = 1;
 800f40c:	4b06      	ldr	r3, [pc, #24]	; (800f428 <buffer_lcd_set_value+0xf4>)
 800f40e:	2201      	movs	r2, #1
 800f410:	701a      	strb	r2, [r3, #0]
		buffer_lcd_overflow_time = 1;
 800f412:	4b09      	ldr	r3, [pc, #36]	; (800f438 <buffer_lcd_set_value+0x104>)
 800f414:	2201      	movs	r2, #1
 800f416:	701a      	strb	r2, [r3, #0]
	}

	buffer_lcd_unlock();
 800f418:	f7ff ff54 	bl	800f2c4 <buffer_lcd_unlock>
	return 0;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	bd90      	pop	{r4, r7, pc}
 800f426:	bf00      	nop
 800f428:	20003c50 	.word	0x20003c50
 800f42c:	20003c48 	.word	0x20003c48
 800f430:	20003c4c 	.word	0x20003c4c
 800f434:	20003090 	.word	0x20003090
 800f438:	20003c51 	.word	0x20003c51

0800f43c <buffer_lcd_get_values>:

uint8_t buffer_lcd_get_values(buffer_info_t* buffer, size_t count)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
	if(buffer_lcd_lock(2))
 800f446:	2002      	movs	r0, #2
 800f448:	f7ff ff24 	bl	800f294 <buffer_lcd_lock>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <buffer_lcd_get_values+0x1a>
	{
		return 1;
 800f452:	2301      	movs	r3, #1
 800f454:	e05e      	b.n	800f514 <buffer_lcd_get_values+0xd8>
	}

	if(buffer_lcd_get_count() >= count)
 800f456:	f7ff ff43 	bl	800f2e0 <buffer_lcd_get_count>
 800f45a:	4602      	mov	r2, r0
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	4293      	cmp	r3, r2
 800f460:	d855      	bhi.n	800f50e <buffer_lcd_get_values+0xd2>
	{
		size_t length = (buffer_lcd_overflow_data == 1) ? (BUFFER_LCD_COUNT) : (0);
 800f462:	4b2e      	ldr	r3, [pc, #184]	; (800f51c <buffer_lcd_get_values+0xe0>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <buffer_lcd_get_values+0x32>
 800f46a:	2364      	movs	r3, #100	; 0x64
 800f46c:	e000      	b.n	800f470 <buffer_lcd_get_values+0x34>
 800f46e:	2300      	movs	r3, #0
 800f470:	60bb      	str	r3, [r7, #8]
		buffer_lcd_r_index = buffer_lcd_w_index + length - count;
 800f472:	4b2b      	ldr	r3, [pc, #172]	; (800f520 <buffer_lcd_get_values+0xe4>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	441a      	add	r2, r3
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	4a29      	ldr	r2, [pc, #164]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f480:	6013      	str	r3, [r2, #0]

		size_t offset = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	60fb      	str	r3, [r7, #12]

		if(buffer_lcd_r_index > buffer_lcd_w_index)
 800f486:	4b27      	ldr	r3, [pc, #156]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	4b25      	ldr	r3, [pc, #148]	; (800f520 <buffer_lcd_get_values+0xe4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d91f      	bls.n	800f4d2 <buffer_lcd_get_values+0x96>
		{
			offset = BUFFER_LCD_COUNT - buffer_lcd_r_index;
 800f492:	4b24      	ldr	r3, [pc, #144]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800f49a:	60fb      	str	r3, [r7, #12]
			memcpy(buffer, &buffer_lcd[buffer_lcd_r_index], offset * sizeof(buffer_lcd[0]));
 800f49c:	4b21      	ldr	r3, [pc, #132]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	011b      	lsls	r3, r3, #4
 800f4a4:	1a9b      	subs	r3, r3, r2
 800f4a6:	005b      	lsls	r3, r3, #1
 800f4a8:	4a1f      	ldr	r2, [pc, #124]	; (800f528 <buffer_lcd_get_values+0xec>)
 800f4aa:	1899      	adds	r1, r3, r2
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	011b      	lsls	r3, r3, #4
 800f4b2:	1a9b      	subs	r3, r3, r2
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f001 fe1b 	bl	80110f4 <memcpy>
			count -= offset;
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	603b      	str	r3, [r7, #0]

			buffer_lcd_r_index = 0;
 800f4c6:	4b17      	ldr	r3, [pc, #92]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
			buffer_lcd_overflow_data = 0;
 800f4cc:	4b13      	ldr	r3, [pc, #76]	; (800f51c <buffer_lcd_get_values+0xe0>)
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
		}

		memcpy(buffer + offset, &buffer_lcd[buffer_lcd_r_index], count * sizeof(buffer_lcd[0]));
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	1a9b      	subs	r3, r3, r2
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	461a      	mov	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	1898      	adds	r0, r3, r2
 800f4e2:	4b10      	ldr	r3, [pc, #64]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	011b      	lsls	r3, r3, #4
 800f4ea:	1a9b      	subs	r3, r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4a0e      	ldr	r2, [pc, #56]	; (800f528 <buffer_lcd_get_values+0xec>)
 800f4f0:	1899      	adds	r1, r3, r2
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	1a9b      	subs	r3, r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	f001 fdf9 	bl	80110f4 <memcpy>
		buffer_lcd_r_index += count;
 800f502:	4b08      	ldr	r3, [pc, #32]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	4413      	add	r3, r2
 800f50a:	4a06      	ldr	r2, [pc, #24]	; (800f524 <buffer_lcd_get_values+0xe8>)
 800f50c:	6013      	str	r3, [r2, #0]
	}

	buffer_lcd_unlock();
 800f50e:	f7ff fed9 	bl	800f2c4 <buffer_lcd_unlock>
	return 0;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20003c50 	.word	0x20003c50
 800f520:	20003c48 	.word	0x20003c48
 800f524:	20003c4c 	.word	0x20003c4c
 800f528:	20003090 	.word	0x20003090

0800f52c <buffer_lcd_get_last_values>:

uint8_t buffer_lcd_get_last_values(buffer_info_t* buffer)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
	uint32_t _index = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	60fb      	str	r3, [r7, #12]

	if(buffer_lcd_w_index == 0)
 800f538:	4b11      	ldr	r3, [pc, #68]	; (800f580 <buffer_lcd_get_last_values+0x54>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d109      	bne.n	800f554 <buffer_lcd_get_last_values+0x28>
	{
		if(buffer_lcd_overflow_time == 1)
 800f540:	4b10      	ldr	r3, [pc, #64]	; (800f584 <buffer_lcd_get_last_values+0x58>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d102      	bne.n	800f54e <buffer_lcd_get_last_values+0x22>
		{
			_index = BUFFER_LCD_COUNT - 1;
 800f548:	2363      	movs	r3, #99	; 0x63
 800f54a:	60fb      	str	r3, [r7, #12]
 800f54c:	e006      	b.n	800f55c <buffer_lcd_get_last_values+0x30>
		}
		else
		{
			_index = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	60fb      	str	r3, [r7, #12]
 800f552:	e003      	b.n	800f55c <buffer_lcd_get_last_values+0x30>
		}
	}
	else
	{
		_index = buffer_lcd_w_index - 1;
 800f554:	4b0a      	ldr	r3, [pc, #40]	; (800f580 <buffer_lcd_get_last_values+0x54>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3b01      	subs	r3, #1
 800f55a:	60fb      	str	r3, [r7, #12]
	}

	memcpy(buffer, &buffer_lcd[_index], sizeof(buffer_lcd[0]));
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	4613      	mov	r3, r2
 800f560:	011b      	lsls	r3, r3, #4
 800f562:	1a9b      	subs	r3, r3, r2
 800f564:	005b      	lsls	r3, r3, #1
 800f566:	4a08      	ldr	r2, [pc, #32]	; (800f588 <buffer_lcd_get_last_values+0x5c>)
 800f568:	4413      	add	r3, r2
 800f56a:	221e      	movs	r2, #30
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f001 fdc0 	bl	80110f4 <memcpy>
	return 0;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20003c48 	.word	0x20003c48
 800f584:	20003c51 	.word	0x20003c51
 800f588:	20003090 	.word	0x20003090

0800f58c <buffer_lcd_stop>:

void buffer_lcd_stop(void)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
	buffer_lcd_w_index = 0;
 800f590:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <buffer_lcd_stop+0x24>)
 800f592:	2200      	movs	r2, #0
 800f594:	601a      	str	r2, [r3, #0]
	buffer_lcd_r_index = 0;
 800f596:	4b07      	ldr	r3, [pc, #28]	; (800f5b4 <buffer_lcd_stop+0x28>)
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
	buffer_lcd_overflow_data = 0;
 800f59c:	4b06      	ldr	r3, [pc, #24]	; (800f5b8 <buffer_lcd_stop+0x2c>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	701a      	strb	r2, [r3, #0]
	buffer_lcd_overflow_time = 0;
 800f5a2:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <buffer_lcd_stop+0x30>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	701a      	strb	r2, [r3, #0]

	buffer_lcd_unlock();
 800f5a8:	f7ff fe8c 	bl	800f2c4 <buffer_lcd_unlock>
}
 800f5ac:	bf00      	nop
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	20003c48 	.word	0x20003c48
 800f5b4:	20003c4c 	.word	0x20003c4c
 800f5b8:	20003c50 	.word	0x20003c50
 800f5bc:	20003c51 	.word	0x20003c51

0800f5c0 <buffer_usb_lock>:

uint8_t buffer_usb_state = 0;


static uint8_t buffer_usb_lock(uint8_t value)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	71fb      	strb	r3, [r7, #7]
	if(buffer_usb_state != 0)
 800f5ca:	4b08      	ldr	r3, [pc, #32]	; (800f5ec <buffer_usb_lock+0x2c>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <buffer_usb_lock+0x16>
	{
		return 1;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e003      	b.n	800f5de <buffer_usb_lock+0x1e>
	}

	buffer_usb_state = value;
 800f5d6:	4a05      	ldr	r2, [pc, #20]	; (800f5ec <buffer_usb_lock+0x2c>)
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	7013      	strb	r3, [r2, #0]
	return 0;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	370c      	adds	r7, #12
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	20003eb5 	.word	0x20003eb5

0800f5f0 <buffer_usb_unlock>:

static uint8_t buffer_usb_unlock(void)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	af00      	add	r7, sp, #0
	buffer_usb_state = 0;
 800f5f4:	4b04      	ldr	r3, [pc, #16]	; (800f608 <buffer_usb_unlock+0x18>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	701a      	strb	r2, [r3, #0]
	return 0;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	20003eb5 	.word	0x20003eb5

0800f60c <buffer_usb_get_count>:

size_t buffer_usb_get_count(void)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
	size_t count = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	607b      	str	r3, [r7, #4]
	size_t offset = (buffer_usb_overflow_data == 1) ? (BUFFER_USB_COUNT) : (0);
 800f616:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <buffer_usb_get_count+0x48>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d101      	bne.n	800f622 <buffer_usb_get_count+0x16>
 800f61e:	2314      	movs	r3, #20
 800f620:	e000      	b.n	800f624 <buffer_usb_get_count+0x18>
 800f622:	2300      	movs	r3, #0
 800f624:	603b      	str	r3, [r7, #0]

	if((buffer_usb_w_index + offset) >= buffer_usb_r_index)
 800f626:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <buffer_usb_get_count+0x4c>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	441a      	add	r2, r3
 800f62e:	4b0b      	ldr	r3, [pc, #44]	; (800f65c <buffer_usb_get_count+0x50>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d307      	bcc.n	800f646 <buffer_usb_get_count+0x3a>
	{
		count = buffer_usb_w_index + offset - buffer_usb_r_index;
 800f636:	4b08      	ldr	r3, [pc, #32]	; (800f658 <buffer_usb_get_count+0x4c>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	441a      	add	r2, r3
 800f63e:	4b07      	ldr	r3, [pc, #28]	; (800f65c <buffer_usb_get_count+0x50>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	607b      	str	r3, [r7, #4]
	}

	return count;
 800f646:	687b      	ldr	r3, [r7, #4]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	20003eb4 	.word	0x20003eb4
 800f658:	20003eac 	.word	0x20003eac
 800f65c:	20003eb0 	.word	0x20003eb0

0800f660 <buffer_usb_set_value>:

uint8_t buffer_usb_set_value(uint32_t *value, size_t length)	// length = adc values count??
{
 800f660:	b590      	push	{r4, r7, lr}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
	if(buffer_usb_lock(1))
 800f66a:	2001      	movs	r0, #1
 800f66c:	f7ff ffa8 	bl	800f5c0 <buffer_usb_lock>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <buffer_usb_set_value+0x1a>
	{
		return 1;
 800f676:	2301      	movs	r3, #1
 800f678:	e05f      	b.n	800f73a <buffer_usb_set_value+0xda>
	}

	// increase the 'read index' to overwrite old data todo not allowed
	if((buffer_usb_overflow_data == 1) && (buffer_usb_w_index == buffer_usb_r_index))
 800f67a:	4b32      	ldr	r3, [pc, #200]	; (800f744 <buffer_usb_set_value+0xe4>)
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d107      	bne.n	800f692 <buffer_usb_set_value+0x32>
 800f682:	4b31      	ldr	r3, [pc, #196]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	4b31      	ldr	r3, [pc, #196]	; (800f74c <buffer_usb_set_value+0xec>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d101      	bne.n	800f692 <buffer_usb_set_value+0x32>
	{
		return 2;
 800f68e:	2302      	movs	r3, #2
 800f690:	e053      	b.n	800f73a <buffer_usb_set_value+0xda>
	}

	memcpy(buffer_usb[buffer_usb_w_index].buffer, value, length * sizeof(buffer_usb[0].buffer[0]));
 800f692:	4b2d      	ldr	r3, [pc, #180]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	4613      	mov	r3, r2
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	1a9b      	subs	r3, r3, r2
 800f69c:	005b      	lsls	r3, r3, #1
 800f69e:	4a2c      	ldr	r2, [pc, #176]	; (800f750 <buffer_usb_set_value+0xf0>)
 800f6a0:	1898      	adds	r0, r3, r2
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	6879      	ldr	r1, [r7, #4]
 800f6aa:	f001 fd23 	bl	80110f4 <memcpy>
	buffer_usb[buffer_usb_w_index].sec = clock_get_sec();
 800f6ae:	4b26      	ldr	r3, [pc, #152]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f6b0:	681c      	ldr	r4, [r3, #0]
 800f6b2:	f000 fb1f 	bl	800fcf4 <clock_get_sec>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4a25      	ldr	r2, [pc, #148]	; (800f750 <buffer_usb_set_value+0xf0>)
 800f6bc:	4623      	mov	r3, r4
 800f6be:	011b      	lsls	r3, r3, #4
 800f6c0:	1b1b      	subs	r3, r3, r4
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	4413      	add	r3, r2
 800f6c6:	331a      	adds	r3, #26
 800f6c8:	460a      	mov	r2, r1
 800f6ca:	701a      	strb	r2, [r3, #0]
	buffer_usb[buffer_usb_w_index].min = clock_get_min();
 800f6cc:	4b1e      	ldr	r3, [pc, #120]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f6ce:	681c      	ldr	r4, [r3, #0]
 800f6d0:	f000 fb1c 	bl	800fd0c <clock_get_min>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4a1d      	ldr	r2, [pc, #116]	; (800f750 <buffer_usb_set_value+0xf0>)
 800f6da:	4623      	mov	r3, r4
 800f6dc:	011b      	lsls	r3, r3, #4
 800f6de:	1b1b      	subs	r3, r3, r4
 800f6e0:	005b      	lsls	r3, r3, #1
 800f6e2:	4413      	add	r3, r2
 800f6e4:	331b      	adds	r3, #27
 800f6e6:	460a      	mov	r2, r1
 800f6e8:	701a      	strb	r2, [r3, #0]
	buffer_usb[buffer_usb_w_index].hour = clock_get_hour();
 800f6ea:	4b17      	ldr	r3, [pc, #92]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f6ec:	681c      	ldr	r4, [r3, #0]
 800f6ee:	f000 fb19 	bl	800fd24 <clock_get_hour>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4a16      	ldr	r2, [pc, #88]	; (800f750 <buffer_usb_set_value+0xf0>)
 800f6f8:	4623      	mov	r3, r4
 800f6fa:	011b      	lsls	r3, r3, #4
 800f6fc:	1b1b      	subs	r3, r3, r4
 800f6fe:	005b      	lsls	r3, r3, #1
 800f700:	4413      	add	r3, r2
 800f702:	331c      	adds	r3, #28
 800f704:	460a      	mov	r2, r1
 800f706:	701a      	strb	r2, [r3, #0]

	buffer_usb_w_index++;
 800f708:	4b0f      	ldr	r3, [pc, #60]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	3301      	adds	r3, #1
 800f70e:	4a0e      	ldr	r2, [pc, #56]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f710:	6013      	str	r3, [r2, #0]
	debug_inc_usb_buffer_count();
 800f712:	f000 fb61 	bl	800fdd8 <debug_inc_usb_buffer_count>
	debug_set_usb_buffer_w_index(buffer_usb_w_index);
 800f716:	4b0c      	ldr	r3, [pc, #48]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 fb76 	bl	800fe0c <debug_set_usb_buffer_w_index>

	if(buffer_usb_w_index == BUFFER_USB_COUNT)
 800f720:	4b09      	ldr	r3, [pc, #36]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b14      	cmp	r3, #20
 800f726:	d105      	bne.n	800f734 <buffer_usb_set_value+0xd4>
	{
		buffer_usb_w_index = 0;
 800f728:	4b07      	ldr	r3, [pc, #28]	; (800f748 <buffer_usb_set_value+0xe8>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	601a      	str	r2, [r3, #0]
		buffer_usb_overflow_data = 1;
 800f72e:	4b05      	ldr	r3, [pc, #20]	; (800f744 <buffer_usb_set_value+0xe4>)
 800f730:	2201      	movs	r2, #1
 800f732:	701a      	strb	r2, [r3, #0]
	}

	buffer_usb_unlock();
 800f734:	f7ff ff5c 	bl	800f5f0 <buffer_usb_unlock>
	return 0;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd90      	pop	{r4, r7, pc}
 800f742:	bf00      	nop
 800f744:	20003eb4 	.word	0x20003eb4
 800f748:	20003eac 	.word	0x20003eac
 800f74c:	20003eb0 	.word	0x20003eb0
 800f750:	20003c54 	.word	0x20003c54

0800f754 <buffer_usb_get_values>:

size_t buffer_usb_get_values(buffer_info_t* buffer, size_t count)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	if(buffer_usb_lock(2))
 800f75e:	2002      	movs	r0, #2
 800f760:	f7ff ff2e 	bl	800f5c0 <buffer_usb_lock>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d001      	beq.n	800f76e <buffer_usb_get_values+0x1a>
	{
		return 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	e066      	b.n	800f83c <buffer_usb_get_values+0xe8>
	}

	if(count > buffer_usb_get_count())
 800f76e:	f7ff ff4d 	bl	800f60c <buffer_usb_get_count>
 800f772:	4602      	mov	r2, r0
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	4293      	cmp	r3, r2
 800f778:	d902      	bls.n	800f780 <buffer_usb_get_values+0x2c>
		count = buffer_usb_get_count();
 800f77a:	f7ff ff47 	bl	800f60c <buffer_usb_get_count>
 800f77e:	6038      	str	r0, [r7, #0]

	if(count > 0)
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d057      	beq.n	800f836 <buffer_usb_get_values+0xe2>
	{
		size_t offset = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	60fb      	str	r3, [r7, #12]
		size_t offset_count = count;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	60bb      	str	r3, [r7, #8]

		if(buffer_usb_overflow_data)
 800f78e:	4b2d      	ldr	r3, [pc, #180]	; (800f844 <buffer_usb_get_values+0xf0>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d025      	beq.n	800f7e2 <buffer_usb_get_values+0x8e>
		{
			if(buffer_usb_r_index > buffer_usb_w_index)
 800f796:	4b2c      	ldr	r3, [pc, #176]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4b2c      	ldr	r3, [pc, #176]	; (800f84c <buffer_usb_get_values+0xf8>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d91f      	bls.n	800f7e2 <buffer_usb_get_values+0x8e>
			{
				offset = BUFFER_USB_COUNT - buffer_usb_r_index;
 800f7a2:	4b29      	ldr	r3, [pc, #164]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f1c3 0314 	rsb	r3, r3, #20
 800f7aa:	60fb      	str	r3, [r7, #12]
				memcpy(buffer, &buffer_usb[buffer_usb_r_index], offset * sizeof(buffer_usb[0]));
 800f7ac:	4b26      	ldr	r3, [pc, #152]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	011b      	lsls	r3, r3, #4
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	005b      	lsls	r3, r3, #1
 800f7b8:	4a25      	ldr	r2, [pc, #148]	; (800f850 <buffer_usb_get_values+0xfc>)
 800f7ba:	1899      	adds	r1, r3, r2
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	4613      	mov	r3, r2
 800f7c0:	011b      	lsls	r3, r3, #4
 800f7c2:	1a9b      	subs	r3, r3, r2
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 fc93 	bl	80110f4 <memcpy>
				offset_count -= offset;
 800f7ce:	68ba      	ldr	r2, [r7, #8]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	60bb      	str	r3, [r7, #8]

				buffer_usb_r_index = 0;
 800f7d6:	4b1c      	ldr	r3, [pc, #112]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	601a      	str	r2, [r3, #0]
				buffer_usb_overflow_data = 0;
 800f7dc:	4b19      	ldr	r3, [pc, #100]	; (800f844 <buffer_usb_get_values+0xf0>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	701a      	strb	r2, [r3, #0]
			{
				// TODO miss error
			}
		}

		if(!buffer_usb_overflow_data && offset_count)
 800f7e2:	4b18      	ldr	r3, [pc, #96]	; (800f844 <buffer_usb_get_values+0xf0>)
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d120      	bne.n	800f82c <buffer_usb_get_values+0xd8>
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d01d      	beq.n	800f82c <buffer_usb_get_values+0xd8>
		{
			memcpy(buffer + offset, &buffer_usb[buffer_usb_r_index], offset_count * sizeof(buffer_usb[0]));
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	1a9b      	subs	r3, r3, r2
 800f7f8:	005b      	lsls	r3, r3, #1
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	1898      	adds	r0, r3, r2
 800f800:	4b11      	ldr	r3, [pc, #68]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	4613      	mov	r3, r2
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	1a9b      	subs	r3, r3, r2
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	4a10      	ldr	r2, [pc, #64]	; (800f850 <buffer_usb_get_values+0xfc>)
 800f80e:	1899      	adds	r1, r3, r2
 800f810:	68ba      	ldr	r2, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	011b      	lsls	r3, r3, #4
 800f816:	1a9b      	subs	r3, r3, r2
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	461a      	mov	r2, r3
 800f81c:	f001 fc6a 	bl	80110f4 <memcpy>
			buffer_usb_r_index += offset_count;
 800f820:	4b09      	ldr	r3, [pc, #36]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	4413      	add	r3, r2
 800f828:	4a07      	ldr	r2, [pc, #28]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f82a:	6013      	str	r3, [r2, #0]
		}

		debug_set_usb_buffer_r_index(buffer_usb_r_index);
 800f82c:	4b06      	ldr	r3, [pc, #24]	; (800f848 <buffer_usb_get_values+0xf4>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4618      	mov	r0, r3
 800f832:	f000 fb07 	bl	800fe44 <debug_set_usb_buffer_r_index>
	}

	buffer_usb_unlock();
 800f836:	f7ff fedb 	bl	800f5f0 <buffer_usb_unlock>
	return count;
 800f83a:	683b      	ldr	r3, [r7, #0]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20003eb4 	.word	0x20003eb4
 800f848:	20003eb0 	.word	0x20003eb0
 800f84c:	20003eac 	.word	0x20003eac
 800f850:	20003c54 	.word	0x20003c54

0800f854 <buffer_usb_reset_counter>:

void buffer_usb_reset_counter(void)
{
 800f854:	b480      	push	{r7}
 800f856:	af00      	add	r7, sp, #0
	buffer_usb_w_index = 0;
 800f858:	4b06      	ldr	r3, [pc, #24]	; (800f874 <buffer_usb_reset_counter+0x20>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	601a      	str	r2, [r3, #0]
	buffer_usb_r_index = 0;
 800f85e:	4b06      	ldr	r3, [pc, #24]	; (800f878 <buffer_usb_reset_counter+0x24>)
 800f860:	2200      	movs	r2, #0
 800f862:	601a      	str	r2, [r3, #0]

	buffer_usb_overflow_data = 0;
 800f864:	4b05      	ldr	r3, [pc, #20]	; (800f87c <buffer_usb_reset_counter+0x28>)
 800f866:	2200      	movs	r2, #0
 800f868:	701a      	strb	r2, [r3, #0]
}
 800f86a:	bf00      	nop
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	20003eac 	.word	0x20003eac
 800f878:	20003eb0 	.word	0x20003eb0
 800f87c:	20003eb4 	.word	0x20003eb4

0800f880 <HAL_GPIO_EXTI_Callback>:

uint8_t pressed_button = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	4603      	mov	r3, r0
 800f888:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800f88a:	88fb      	ldrh	r3, [r7, #6]
 800f88c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f890:	d045      	beq.n	800f91e <HAL_GPIO_EXTI_Callback+0x9e>
 800f892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f896:	dc62      	bgt.n	800f95e <HAL_GPIO_EXTI_Callback+0xde>
 800f898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f89c:	d01f      	beq.n	800f8de <HAL_GPIO_EXTI_Callback+0x5e>
 800f89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8a2:	dc5c      	bgt.n	800f95e <HAL_GPIO_EXTI_Callback+0xde>
 800f8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8a8:	d009      	beq.n	800f8be <HAL_GPIO_EXTI_Callback+0x3e>
 800f8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ae:	dc56      	bgt.n	800f95e <HAL_GPIO_EXTI_Callback+0xde>
 800f8b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8b4:	d023      	beq.n	800f8fe <HAL_GPIO_EXTI_Callback+0x7e>
 800f8b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8ba:	d040      	beq.n	800f93e <HAL_GPIO_EXTI_Callback+0xbe>
			{
				pressed_button |= BUTTON_OK_MASK;
			}
			break;
		default:
			break;
 800f8bc:	e04f      	b.n	800f95e <HAL_GPIO_EXTI_Callback+0xde>
			if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin) != GPIO_PIN_SET)
 800f8be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f8c2:	482e      	ldr	r0, [pc, #184]	; (800f97c <HAL_GPIO_EXTI_Callback+0xfc>)
 800f8c4:	f7f3 fd36 	bl	8003334 <HAL_GPIO_ReadPin>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d049      	beq.n	800f962 <HAL_GPIO_EXTI_Callback+0xe2>
				pressed_button |= BUTTON_UP_MASK;
 800f8ce:	4b2c      	ldr	r3, [pc, #176]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	4b29      	ldr	r3, [pc, #164]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f8da:	701a      	strb	r2, [r3, #0]
			break;
 800f8dc:	e041      	b.n	800f962 <HAL_GPIO_EXTI_Callback+0xe2>
			if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) != GPIO_PIN_SET)
 800f8de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f8e2:	4826      	ldr	r0, [pc, #152]	; (800f97c <HAL_GPIO_EXTI_Callback+0xfc>)
 800f8e4:	f7f3 fd26 	bl	8003334 <HAL_GPIO_ReadPin>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d03b      	beq.n	800f966 <HAL_GPIO_EXTI_Callback+0xe6>
				pressed_button |= BUTTON_DOWN_MASK;
 800f8ee:	4b24      	ldr	r3, [pc, #144]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f043 0302 	orr.w	r3, r3, #2
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	4b21      	ldr	r3, [pc, #132]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f8fa:	701a      	strb	r2, [r3, #0]
			break;
 800f8fc:	e033      	b.n	800f966 <HAL_GPIO_EXTI_Callback+0xe6>
			if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) != GPIO_PIN_SET)
 800f8fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f902:	481e      	ldr	r0, [pc, #120]	; (800f97c <HAL_GPIO_EXTI_Callback+0xfc>)
 800f904:	f7f3 fd16 	bl	8003334 <HAL_GPIO_ReadPin>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d02d      	beq.n	800f96a <HAL_GPIO_EXTI_Callback+0xea>
				pressed_button |= BUTTON_LEFT_MASK;
 800f90e:	4b1c      	ldr	r3, [pc, #112]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	f043 0304 	orr.w	r3, r3, #4
 800f916:	b2da      	uxtb	r2, r3
 800f918:	4b19      	ldr	r3, [pc, #100]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f91a:	701a      	strb	r2, [r3, #0]
			break;
 800f91c:	e025      	b.n	800f96a <HAL_GPIO_EXTI_Callback+0xea>
			if(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) != GPIO_PIN_SET)
 800f91e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f922:	4816      	ldr	r0, [pc, #88]	; (800f97c <HAL_GPIO_EXTI_Callback+0xfc>)
 800f924:	f7f3 fd06 	bl	8003334 <HAL_GPIO_ReadPin>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d01f      	beq.n	800f96e <HAL_GPIO_EXTI_Callback+0xee>
				pressed_button |= BUTTON_RIGHT_MASK;
 800f92e:	4b14      	ldr	r3, [pc, #80]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	f043 0308 	orr.w	r3, r3, #8
 800f936:	b2da      	uxtb	r2, r3
 800f938:	4b11      	ldr	r3, [pc, #68]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f93a:	701a      	strb	r2, [r3, #0]
			break;
 800f93c:	e017      	b.n	800f96e <HAL_GPIO_EXTI_Callback+0xee>
			if(HAL_GPIO_ReadPin(PUSH_GPIO_Port, PUSH_Pin) != GPIO_PIN_SET)
 800f93e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f942:	480e      	ldr	r0, [pc, #56]	; (800f97c <HAL_GPIO_EXTI_Callback+0xfc>)
 800f944:	f7f3 fcf6 	bl	8003334 <HAL_GPIO_ReadPin>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d011      	beq.n	800f972 <HAL_GPIO_EXTI_Callback+0xf2>
				pressed_button |= BUTTON_OK_MASK;
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	f043 0310 	orr.w	r3, r3, #16
 800f956:	b2da      	uxtb	r2, r3
 800f958:	4b09      	ldr	r3, [pc, #36]	; (800f980 <HAL_GPIO_EXTI_Callback+0x100>)
 800f95a:	701a      	strb	r2, [r3, #0]
			break;
 800f95c:	e009      	b.n	800f972 <HAL_GPIO_EXTI_Callback+0xf2>
			break;
 800f95e:	bf00      	nop
 800f960:	e008      	b.n	800f974 <HAL_GPIO_EXTI_Callback+0xf4>
			break;
 800f962:	bf00      	nop
 800f964:	e006      	b.n	800f974 <HAL_GPIO_EXTI_Callback+0xf4>
			break;
 800f966:	bf00      	nop
 800f968:	e004      	b.n	800f974 <HAL_GPIO_EXTI_Callback+0xf4>
			break;
 800f96a:	bf00      	nop
 800f96c:	e002      	b.n	800f974 <HAL_GPIO_EXTI_Callback+0xf4>
			break;
 800f96e:	bf00      	nop
 800f970:	e000      	b.n	800f974 <HAL_GPIO_EXTI_Callback+0xf4>
			break;
 800f972:	bf00      	nop

	}
}
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	40020400 	.word	0x40020400
 800f980:	20003eb6 	.word	0x20003eb6

0800f984 <button_get_pressed_any>:

uint8_t button_get_pressed_any(void)
{
 800f984:	b480      	push	{r7}
 800f986:	af00      	add	r7, sp, #0
	return pressed_button;
 800f988:	4b03      	ldr	r3, [pc, #12]	; (800f998 <button_get_pressed_any+0x14>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	20003eb6 	.word	0x20003eb6

0800f99c <button_get_pressed_up>:

uint8_t button_get_pressed_up(void)
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
	if((pressed_button & BUTTON_UP_MASK) == BUTTON_UP_MASK)
 800f9a0:	4b0a      	ldr	r3, [pc, #40]	; (800f9cc <button_get_pressed_up+0x30>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	f003 0301 	and.w	r3, r3, #1
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d008      	beq.n	800f9be <button_get_pressed_up+0x22>
	{
		pressed_button &= ~BUTTON_UP_MASK;
 800f9ac:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <button_get_pressed_up+0x30>)
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	f023 0301 	bic.w	r3, r3, #1
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <button_get_pressed_up+0x30>)
 800f9b8:	701a      	strb	r2, [r3, #0]
		return 1;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e000      	b.n	800f9c0 <button_get_pressed_up+0x24>
	}

	return 0;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	20003eb6 	.word	0x20003eb6

0800f9d0 <button_get_pressed_down>:

uint8_t button_get_pressed_down(void)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	af00      	add	r7, sp, #0
	if((pressed_button & BUTTON_DOWN_MASK) == BUTTON_DOWN_MASK)
 800f9d4:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <button_get_pressed_down+0x30>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f003 0302 	and.w	r3, r3, #2
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d008      	beq.n	800f9f2 <button_get_pressed_down+0x22>
	{
		pressed_button &= ~BUTTON_DOWN_MASK;
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <button_get_pressed_down+0x30>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f023 0302 	bic.w	r3, r3, #2
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <button_get_pressed_down+0x30>)
 800f9ec:	701a      	strb	r2, [r3, #0]
		return 1;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e000      	b.n	800f9f4 <button_get_pressed_down+0x24>
	}

	return 0;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	20003eb6 	.word	0x20003eb6

0800fa04 <button_get_pressed_left>:

uint8_t button_get_pressed_left(void)
{
 800fa04:	b480      	push	{r7}
 800fa06:	af00      	add	r7, sp, #0
	if((pressed_button & BUTTON_LEFT_MASK) == BUTTON_LEFT_MASK)
 800fa08:	4b0a      	ldr	r3, [pc, #40]	; (800fa34 <button_get_pressed_left+0x30>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	f003 0304 	and.w	r3, r3, #4
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d008      	beq.n	800fa26 <button_get_pressed_left+0x22>
	{
		pressed_button &= ~BUTTON_LEFT_MASK;
 800fa14:	4b07      	ldr	r3, [pc, #28]	; (800fa34 <button_get_pressed_left+0x30>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f023 0304 	bic.w	r3, r3, #4
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	4b05      	ldr	r3, [pc, #20]	; (800fa34 <button_get_pressed_left+0x30>)
 800fa20:	701a      	strb	r2, [r3, #0]
		return 1;
 800fa22:	2301      	movs	r3, #1
 800fa24:	e000      	b.n	800fa28 <button_get_pressed_left+0x24>
	}

	return 0;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	20003eb6 	.word	0x20003eb6

0800fa38 <button_get_pressed_right>:

uint8_t button_get_pressed_right(void)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	af00      	add	r7, sp, #0
	if((pressed_button & BUTTON_RIGHT_MASK) == BUTTON_RIGHT_MASK)
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <button_get_pressed_right+0x30>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f003 0308 	and.w	r3, r3, #8
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d008      	beq.n	800fa5a <button_get_pressed_right+0x22>
	{
		pressed_button &= ~BUTTON_RIGHT_MASK;
 800fa48:	4b07      	ldr	r3, [pc, #28]	; (800fa68 <button_get_pressed_right+0x30>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	f023 0308 	bic.w	r3, r3, #8
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <button_get_pressed_right+0x30>)
 800fa54:	701a      	strb	r2, [r3, #0]
		return 1;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <button_get_pressed_right+0x24>
	}

	return 0;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	20003eb6 	.word	0x20003eb6

0800fa6c <button_get_pressed_ok>:

uint8_t button_get_pressed_ok(void)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	af00      	add	r7, sp, #0
	if((pressed_button & BUTTON_OK_MASK) == BUTTON_OK_MASK)
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <button_get_pressed_ok+0x30>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	f003 0310 	and.w	r3, r3, #16
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d008      	beq.n	800fa8e <button_get_pressed_ok+0x22>
	{
		pressed_button &= ~BUTTON_OK_MASK;
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <button_get_pressed_ok+0x30>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f023 0310 	bic.w	r3, r3, #16
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <button_get_pressed_ok+0x30>)
 800fa88:	701a      	strb	r2, [r3, #0]
		return 1;
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e000      	b.n	800fa90 <button_get_pressed_ok+0x24>
	}

	return 0;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	20003eb6 	.word	0x20003eb6

0800faa0 <calc_temp>:

#include <stdint.h>


float calc_temp(uint16_t voltage)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	80fb      	strh	r3, [r7, #6]
	float value = ((float)150 * voltage / 4095) + 20;
 800faaa:	88fb      	ldrh	r3, [r7, #6]
 800faac:	ee07 3a90 	vmov	s15, r3
 800fab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fab4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800fae4 <calc_temp+0x44>
 800fab8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fabc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800fae8 <calc_temp+0x48>
 800fac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fac4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800fac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800facc:	edc7 7a03 	vstr	s15, [r7, #12]
	return value;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	ee07 3a90 	vmov	s15, r3
}
 800fad6:	eeb0 0a67 	vmov.f32	s0, s15
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	43160000 	.word	0x43160000
 800fae8:	457ff000 	.word	0x457ff000
 800faec:	00000000 	.word	0x00000000

0800faf0 <calc_room_temp>:

float calc_room_temp(uint16_t voltage)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	80fb      	strh	r3, [r7, #6]
	float value = ((float)3300 * voltage / 4095 - 509) / 6.45;
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	ee07 3a90 	vmov	s15, r3
 800fb00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb04:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800fb58 <calc_room_temp+0x68>
 800fb08:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fb0c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800fb5c <calc_room_temp+0x6c>
 800fb10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fb14:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800fb60 <calc_room_temp+0x70>
 800fb18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb1c:	ee17 0a90 	vmov	r0, s15
 800fb20:	f7f0 fd12 	bl	8000548 <__aeabi_f2d>
 800fb24:	a30a      	add	r3, pc, #40	; (adr r3, 800fb50 <calc_room_temp+0x60>)
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	f7f0 fe8f 	bl	800084c <__aeabi_ddiv>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4610      	mov	r0, r2
 800fb34:	4619      	mov	r1, r3
 800fb36:	f7f1 f857 	bl	8000be8 <__aeabi_d2f>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	60fb      	str	r3, [r7, #12]
	return value;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	ee07 3a90 	vmov	s15, r3
}
 800fb44:	eeb0 0a67 	vmov.f32	s0, s15
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	cccccccd 	.word	0xcccccccd
 800fb54:	4019cccc 	.word	0x4019cccc
 800fb58:	454e4000 	.word	0x454e4000
 800fb5c:	457ff000 	.word	0x457ff000
 800fb60:	43fe8000 	.word	0x43fe8000

0800fb64 <clock_inc>:

uint8_t clock_status = CLOCK_STATUS_NONE;


void clock_inc()
{
 800fb64:	b480      	push	{r7}
 800fb66:	af00      	add	r7, sp, #0
	msec++;
 800fb68:	4b1a      	ldr	r3, [pc, #104]	; (800fbd4 <clock_inc+0x70>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	4b18      	ldr	r3, [pc, #96]	; (800fbd4 <clock_inc+0x70>)
 800fb72:	701a      	strb	r2, [r3, #0]

	if(msec >= 10)
 800fb74:	4b17      	ldr	r3, [pc, #92]	; (800fbd4 <clock_inc+0x70>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b09      	cmp	r3, #9
 800fb7a:	d922      	bls.n	800fbc2 <clock_inc+0x5e>
	{
		sec++;
 800fb7c:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <clock_inc+0x74>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	3301      	adds	r3, #1
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	4b14      	ldr	r3, [pc, #80]	; (800fbd8 <clock_inc+0x74>)
 800fb86:	701a      	strb	r2, [r3, #0]
		msec = 0;
 800fb88:	4b12      	ldr	r3, [pc, #72]	; (800fbd4 <clock_inc+0x70>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	701a      	strb	r2, [r3, #0]

		if(sec >= 60)
 800fb8e:	4b12      	ldr	r3, [pc, #72]	; (800fbd8 <clock_inc+0x74>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	2b3b      	cmp	r3, #59	; 0x3b
 800fb94:	d915      	bls.n	800fbc2 <clock_inc+0x5e>
		{
			min++;
 800fb96:	4b11      	ldr	r3, [pc, #68]	; (800fbdc <clock_inc+0x78>)
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	b2da      	uxtb	r2, r3
 800fb9e:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <clock_inc+0x78>)
 800fba0:	701a      	strb	r2, [r3, #0]
			sec = 0;
 800fba2:	4b0d      	ldr	r3, [pc, #52]	; (800fbd8 <clock_inc+0x74>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	701a      	strb	r2, [r3, #0]

			if(min >= 60)
 800fba8:	4b0c      	ldr	r3, [pc, #48]	; (800fbdc <clock_inc+0x78>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b3b      	cmp	r3, #59	; 0x3b
 800fbae:	d908      	bls.n	800fbc2 <clock_inc+0x5e>
			{
				hour++;
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <clock_inc+0x7c>)
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	4b09      	ldr	r3, [pc, #36]	; (800fbe0 <clock_inc+0x7c>)
 800fbba:	701a      	strb	r2, [r3, #0]
				min = 0;
 800fbbc:	4b07      	ldr	r3, [pc, #28]	; (800fbdc <clock_inc+0x78>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	clock_status = CLOCK_STATUS_CHANGED;
 800fbc2:	4b08      	ldr	r3, [pc, #32]	; (800fbe4 <clock_inc+0x80>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	701a      	strb	r2, [r3, #0]
}
 800fbc8:	bf00      	nop
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	20003eb7 	.word	0x20003eb7
 800fbd8:	20003eb8 	.word	0x20003eb8
 800fbdc:	20003eb9 	.word	0x20003eb9
 800fbe0:	20003eba 	.word	0x20003eba
 800fbe4:	20003ebb 	.word	0x20003ebb

0800fbe8 <clock_set_msec>:

void clock_set_msec(uint8_t value)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	71fb      	strb	r3, [r7, #7]
	if(msec < 10)
 800fbf2:	4b08      	ldr	r3, [pc, #32]	; (800fc14 <clock_set_msec+0x2c>)
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	2b09      	cmp	r3, #9
 800fbf8:	d802      	bhi.n	800fc00 <clock_set_msec+0x18>
		msec = value;
 800fbfa:	4a06      	ldr	r2, [pc, #24]	; (800fc14 <clock_set_msec+0x2c>)
 800fbfc:	79fb      	ldrb	r3, [r7, #7]
 800fbfe:	7013      	strb	r3, [r2, #0]

	clock_status = CLOCK_STATUS_CHANGED;
 800fc00:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <clock_set_msec+0x30>)
 800fc02:	2201      	movs	r2, #1
 800fc04:	701a      	strb	r2, [r3, #0]
}
 800fc06:	bf00      	nop
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	20003eb7 	.word	0x20003eb7
 800fc18:	20003ebb 	.word	0x20003ebb

0800fc1c <clock_set_sec>:

void clock_set_sec(uint8_t value)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	4603      	mov	r3, r0
 800fc24:	71fb      	strb	r3, [r7, #7]
	if(sec < 60)
 800fc26:	4b08      	ldr	r3, [pc, #32]	; (800fc48 <clock_set_sec+0x2c>)
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b3b      	cmp	r3, #59	; 0x3b
 800fc2c:	d802      	bhi.n	800fc34 <clock_set_sec+0x18>
		sec = value;
 800fc2e:	4a06      	ldr	r2, [pc, #24]	; (800fc48 <clock_set_sec+0x2c>)
 800fc30:	79fb      	ldrb	r3, [r7, #7]
 800fc32:	7013      	strb	r3, [r2, #0]

	clock_status = CLOCK_STATUS_CHANGED;
 800fc34:	4b05      	ldr	r3, [pc, #20]	; (800fc4c <clock_set_sec+0x30>)
 800fc36:	2201      	movs	r2, #1
 800fc38:	701a      	strb	r2, [r3, #0]
}
 800fc3a:	bf00      	nop
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	20003eb8 	.word	0x20003eb8
 800fc4c:	20003ebb 	.word	0x20003ebb

0800fc50 <clock_set_min>:

void clock_set_min(uint8_t value)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	71fb      	strb	r3, [r7, #7]
	if(min < 60)
 800fc5a:	4b08      	ldr	r3, [pc, #32]	; (800fc7c <clock_set_min+0x2c>)
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	2b3b      	cmp	r3, #59	; 0x3b
 800fc60:	d802      	bhi.n	800fc68 <clock_set_min+0x18>
		min = value;
 800fc62:	4a06      	ldr	r2, [pc, #24]	; (800fc7c <clock_set_min+0x2c>)
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	7013      	strb	r3, [r2, #0]

	clock_status = CLOCK_STATUS_CHANGED;
 800fc68:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <clock_set_min+0x30>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	701a      	strb	r2, [r3, #0]
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	20003eb9 	.word	0x20003eb9
 800fc80:	20003ebb 	.word	0x20003ebb

0800fc84 <clock_set_hour>:

void clock_set_hour(uint8_t value)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	71fb      	strb	r3, [r7, #7]
	// if(hour < 24)		// TODO how much hours should be allow to save.
	hour = value;
 800fc8e:	4a06      	ldr	r2, [pc, #24]	; (800fca8 <clock_set_hour+0x24>)
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	7013      	strb	r3, [r2, #0]

	clock_status = CLOCK_STATUS_CHANGED;
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <clock_set_hour+0x28>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	701a      	strb	r2, [r3, #0]
}
 800fc9a:	bf00      	nop
 800fc9c:	370c      	adds	r7, #12
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	20003eba 	.word	0x20003eba
 800fcac:	20003ebb 	.word	0x20003ebb

0800fcb0 <clock_reset>:

void clock_reset(void)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	af00      	add	r7, sp, #0
	clock_set_msec(0);
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f7ff ff97 	bl	800fbe8 <clock_set_msec>
	clock_set_sec(0);
 800fcba:	2000      	movs	r0, #0
 800fcbc:	f7ff ffae 	bl	800fc1c <clock_set_sec>
	clock_set_min(0);
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	f7ff ffc5 	bl	800fc50 <clock_set_min>
	clock_set_hour(0);
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f7ff ffdc 	bl	800fc84 <clock_set_hour>

	clock_status = CLOCK_STATUS_CHANGED;
 800fccc:	4b02      	ldr	r3, [pc, #8]	; (800fcd8 <clock_reset+0x28>)
 800fcce:	2201      	movs	r2, #1
 800fcd0:	701a      	strb	r2, [r3, #0]
}
 800fcd2:	bf00      	nop
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20003ebb 	.word	0x20003ebb

0800fcdc <clock_get_msec>:

uint8_t clock_get_msec(void)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	af00      	add	r7, sp, #0
	return msec;
 800fce0:	4b03      	ldr	r3, [pc, #12]	; (800fcf0 <clock_get_msec+0x14>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	20003eb7 	.word	0x20003eb7

0800fcf4 <clock_get_sec>:

uint8_t clock_get_sec(void)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0
	return sec;
 800fcf8:	4b03      	ldr	r3, [pc, #12]	; (800fd08 <clock_get_sec+0x14>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	20003eb8 	.word	0x20003eb8

0800fd0c <clock_get_min>:

uint8_t clock_get_min(void)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	af00      	add	r7, sp, #0
	return min;
 800fd10:	4b03      	ldr	r3, [pc, #12]	; (800fd20 <clock_get_min+0x14>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	20003eb9 	.word	0x20003eb9

0800fd24 <clock_get_hour>:

uint8_t clock_get_hour(void)
{
 800fd24:	b480      	push	{r7}
 800fd26:	af00      	add	r7, sp, #0
	return hour;
 800fd28:	4b03      	ldr	r3, [pc, #12]	; (800fd38 <clock_get_hour+0x14>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	20003eba 	.word	0x20003eba

0800fd3c <clock_set_status>:

void clock_set_status(void)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	af00      	add	r7, sp, #0
	clock_status = CLOCK_STATUS_CHANGED;
 800fd40:	4b03      	ldr	r3, [pc, #12]	; (800fd50 <clock_set_status+0x14>)
 800fd42:	2201      	movs	r2, #1
 800fd44:	701a      	strb	r2, [r3, #0]
}
 800fd46:	bf00      	nop
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	20003ebb 	.word	0x20003ebb

0800fd54 <clock_get_status>:

uint8_t clock_get_status(void)
{
 800fd54:	b480      	push	{r7}
 800fd56:	af00      	add	r7, sp, #0
	if(clock_status == CLOCK_STATUS_CHANGED)
 800fd58:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <clock_get_status+0x1c>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d101      	bne.n	800fd64 <clock_get_status+0x10>
	{
		return 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	e000      	b.n	800fd66 <clock_get_status+0x12>
	}

	return 1;
 800fd64:	2301      	movs	r3, #1
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr
 800fd70:	20003ebb 	.word	0x20003ebb

0800fd74 <clock_reset_status>:

void clock_reset_status(void)
{
 800fd74:	b480      	push	{r7}
 800fd76:	af00      	add	r7, sp, #0
	clock_status = CLOCK_STATUS_NONE;
 800fd78:	4b03      	ldr	r3, [pc, #12]	; (800fd88 <clock_reset_status+0x14>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	701a      	strb	r2, [r3, #0]
}
 800fd7e:	bf00      	nop
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	20003ebb 	.word	0x20003ebb

0800fd8c <debug_reset_counter>:
size_t debug_lcd_buffer_count = 0;
size_t debug_max_usb_bytecount = 0;


void debug_reset_counter(void)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	af00      	add	r7, sp, #0
	debug_usb_buffer_count = 0;
 800fd90:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <debug_reset_counter+0x34>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
	debug_usb_buffer_w_index = 0;
 800fd96:	4b0b      	ldr	r3, [pc, #44]	; (800fdc4 <debug_reset_counter+0x38>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	601a      	str	r2, [r3, #0]
	debug_usb_buffer_r_index = 0;
 800fd9c:	4b0a      	ldr	r3, [pc, #40]	; (800fdc8 <debug_reset_counter+0x3c>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	601a      	str	r2, [r3, #0]
	debug_usb_access_count = 0;
 800fda2:	4b0a      	ldr	r3, [pc, #40]	; (800fdcc <debug_reset_counter+0x40>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	601a      	str	r2, [r3, #0]
	debug_lcd_buffer_count = 0;
 800fda8:	4b09      	ldr	r3, [pc, #36]	; (800fdd0 <debug_reset_counter+0x44>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	601a      	str	r2, [r3, #0]
	debug_max_usb_bytecount = 0;
 800fdae:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <debug_reset_counter+0x48>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
}
 800fdb4:	bf00      	nop
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	20003ebc 	.word	0x20003ebc
 800fdc4:	20003ec0 	.word	0x20003ec0
 800fdc8:	20003ec4 	.word	0x20003ec4
 800fdcc:	20003ec8 	.word	0x20003ec8
 800fdd0:	20003ecc 	.word	0x20003ecc
 800fdd4:	20003ed0 	.word	0x20003ed0

0800fdd8 <debug_inc_usb_buffer_count>:

void debug_inc_usb_buffer_count(void)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	af00      	add	r7, sp, #0
	debug_usb_buffer_count++;
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <debug_inc_usb_buffer_count+0x18>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	3301      	adds	r3, #1
 800fde2:	4a03      	ldr	r2, [pc, #12]	; (800fdf0 <debug_inc_usb_buffer_count+0x18>)
 800fde4:	6013      	str	r3, [r2, #0]
}
 800fde6:	bf00      	nop
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	20003ebc 	.word	0x20003ebc

0800fdf4 <debug_get_usb_buffer_count>:

size_t debug_get_usb_buffer_count(void)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	af00      	add	r7, sp, #0
	return debug_usb_buffer_count;
 800fdf8:	4b03      	ldr	r3, [pc, #12]	; (800fe08 <debug_get_usb_buffer_count+0x14>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	20003ebc 	.word	0x20003ebc

0800fe0c <debug_set_usb_buffer_w_index>:

void debug_set_usb_buffer_w_index(size_t w_index)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
	debug_usb_buffer_w_index = w_index;
 800fe14:	4a04      	ldr	r2, [pc, #16]	; (800fe28 <debug_set_usb_buffer_w_index+0x1c>)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6013      	str	r3, [r2, #0]
}
 800fe1a:	bf00      	nop
 800fe1c:	370c      	adds	r7, #12
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	20003ec0 	.word	0x20003ec0

0800fe2c <debug_get_usb_buffer_w_index>:

size_t debug_get_usb_buffer_w_index(void)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
	return debug_usb_buffer_w_index;
 800fe30:	4b03      	ldr	r3, [pc, #12]	; (800fe40 <debug_get_usb_buffer_w_index+0x14>)
 800fe32:	681b      	ldr	r3, [r3, #0]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20003ec0 	.word	0x20003ec0

0800fe44 <debug_set_usb_buffer_r_index>:

void debug_set_usb_buffer_r_index(size_t r_index)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
	debug_usb_buffer_r_index = r_index;
 800fe4c:	4a04      	ldr	r2, [pc, #16]	; (800fe60 <debug_set_usb_buffer_r_index+0x1c>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6013      	str	r3, [r2, #0]
}
 800fe52:	bf00      	nop
 800fe54:	370c      	adds	r7, #12
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	20003ec4 	.word	0x20003ec4

0800fe64 <debug_get_usb_buffer_r_index>:

size_t debug_get_usb_buffer_r_index(void)
{
 800fe64:	b480      	push	{r7}
 800fe66:	af00      	add	r7, sp, #0
	return debug_usb_buffer_r_index;
 800fe68:	4b03      	ldr	r3, [pc, #12]	; (800fe78 <debug_get_usb_buffer_r_index+0x14>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	20003ec4 	.word	0x20003ec4

0800fe7c <debug_inc_usb_access>:

void debug_inc_usb_access(size_t count)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
	debug_usb_access_count += count;
 800fe84:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <debug_inc_usb_access+0x20>)
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	4a03      	ldr	r2, [pc, #12]	; (800fe9c <debug_inc_usb_access+0x20>)
 800fe8e:	6013      	str	r3, [r2, #0]
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	20003ec8 	.word	0x20003ec8

0800fea0 <debug_get_usb_access>:

size_t debug_get_usb_access(void)
{
 800fea0:	b480      	push	{r7}
 800fea2:	af00      	add	r7, sp, #0
	return debug_usb_access_count;
 800fea4:	4b03      	ldr	r3, [pc, #12]	; (800feb4 <debug_get_usb_access+0x14>)
 800fea6:	681b      	ldr	r3, [r3, #0]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	20003ec8 	.word	0x20003ec8

0800feb8 <debug_inc_lcd_buffer>:

void debug_inc_lcd_buffer(void)
{
 800feb8:	b480      	push	{r7}
 800feba:	af00      	add	r7, sp, #0
	debug_lcd_buffer_count++;
 800febc:	4b04      	ldr	r3, [pc, #16]	; (800fed0 <debug_inc_lcd_buffer+0x18>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	3301      	adds	r3, #1
 800fec2:	4a03      	ldr	r2, [pc, #12]	; (800fed0 <debug_inc_lcd_buffer+0x18>)
 800fec4:	6013      	str	r3, [r2, #0]
}
 800fec6:	bf00      	nop
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	20003ecc 	.word	0x20003ecc

0800fed4 <debug_get_lcd_buffer>:

size_t debug_get_lcd_buffer(void)
{
 800fed4:	b480      	push	{r7}
 800fed6:	af00      	add	r7, sp, #0
	return debug_lcd_buffer_count;
 800fed8:	4b03      	ldr	r3, [pc, #12]	; (800fee8 <debug_get_lcd_buffer+0x14>)
 800feda:	681b      	ldr	r3, [r3, #0]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	20003ecc 	.word	0x20003ecc

0800feec <debug_set_usb_max_bytecount>:

void debug_set_usb_max_bytecount(size_t count)
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	if(count > debug_max_usb_bytecount)
 800fef4:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <debug_set_usb_max_bytecount+0x24>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d902      	bls.n	800ff04 <debug_set_usb_max_bytecount+0x18>
	{
		debug_max_usb_bytecount = count;
 800fefe:	4a04      	ldr	r2, [pc, #16]	; (800ff10 <debug_set_usb_max_bytecount+0x24>)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6013      	str	r3, [r2, #0]
	}
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr
 800ff10:	20003ed0 	.word	0x20003ed0

0800ff14 <debug_get_usb_max_bytecount>:

size_t debug_get_usb_max_bytecount(void)
{
 800ff14:	b480      	push	{r7}
 800ff16:	af00      	add	r7, sp, #0
	return debug_max_usb_bytecount;
 800ff18:	4b03      	ldr	r3, [pc, #12]	; (800ff28 <debug_get_usb_max_bytecount+0x14>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	20003ed0 	.word	0x20003ed0

0800ff2c <measure_mode_status_set_changed>:


// MEASURE MODE STATUS
// -------------------
void measure_mode_status_set_changed(void)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	af00      	add	r7, sp, #0
	measure_mode_status = MEASURE_MODE_STATUS_CHANGED;
 800ff30:	4b03      	ldr	r3, [pc, #12]	; (800ff40 <measure_mode_status_set_changed+0x14>)
 800ff32:	2201      	movs	r2, #1
 800ff34:	701a      	strb	r2, [r3, #0]
}
 800ff36:	bf00      	nop
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	20003ed5 	.word	0x20003ed5

0800ff44 <measure_mode_status_get_changed>:

uint8_t measure_mode_status_get_changed(void)
{
 800ff44:	b480      	push	{r7}
 800ff46:	af00      	add	r7, sp, #0
	if(measure_mode_status == MEASURE_MODE_STATUS_CHANGED)
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <measure_mode_status_get_changed+0x1c>)
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d101      	bne.n	800ff54 <measure_mode_status_get_changed+0x10>
	{
		return 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e000      	b.n	800ff56 <measure_mode_status_get_changed+0x12>
	}

	return 1;
 800ff54:	2301      	movs	r3, #1
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	20003ed5 	.word	0x20003ed5

0800ff64 <measure_mode_status_update>:

void measure_mode_status_update(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
	if(measure_mode_status == MEASURE_MODE_STATUS_CHANGED)
 800ff68:	4b05      	ldr	r3, [pc, #20]	; (800ff80 <measure_mode_status_update+0x1c>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d102      	bne.n	800ff76 <measure_mode_status_update+0x12>
	{
		measure_mode_status = MEASURE_MODE_STATUS_NONE;
 800ff70:	4b03      	ldr	r3, [pc, #12]	; (800ff80 <measure_mode_status_update+0x1c>)
 800ff72:	2200      	movs	r2, #0
 800ff74:	701a      	strb	r2, [r3, #0]
	}
}
 800ff76:	bf00      	nop
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	20003ed5 	.word	0x20003ed5

0800ff84 <measure_set_mode_start>:

// MEASURE MODE
// ------------
void measure_set_mode_start(void)
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
	if((measure_mode == MEASURE_MODE_STOP) || (measure_mode == MEASURE_MODE_PAUSE))
 800ff88:	4b09      	ldr	r3, [pc, #36]	; (800ffb0 <measure_set_mode_start+0x2c>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d003      	beq.n	800ff98 <measure_set_mode_start+0x14>
 800ff90:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <measure_set_mode_start+0x2c>)
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d105      	bne.n	800ffa4 <measure_set_mode_start+0x20>
	{
		measure_mode = MEASURE_MODE_START;
 800ff98:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <measure_set_mode_start+0x2c>)
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	701a      	strb	r2, [r3, #0]
		measure_mode_status = MEASURE_MODE_STATUS_CHANGED;
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <measure_set_mode_start+0x30>)
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	701a      	strb	r2, [r3, #0]
	}
}
 800ffa4:	bf00      	nop
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	20003ed4 	.word	0x20003ed4
 800ffb4:	20003ed5 	.word	0x20003ed5

0800ffb8 <measure_get_mode_start>:

uint8_t measure_get_mode_start(void)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	af00      	add	r7, sp, #0
	if(measure_mode == MEASURE_MODE_START)
 800ffbc:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <measure_get_mode_start+0x1c>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d101      	bne.n	800ffc8 <measure_get_mode_start+0x10>
	{
		return 0;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e000      	b.n	800ffca <measure_get_mode_start+0x12>
	}

	return 1;
 800ffc8:	2301      	movs	r3, #1
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	20003ed4 	.word	0x20003ed4

0800ffd8 <measure_set_mode_pause>:

void measure_set_mode_pause(void)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
	if(measure_mode == MEASURE_MODE_START)
 800ffdc:	4b07      	ldr	r3, [pc, #28]	; (800fffc <measure_set_mode_pause+0x24>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d105      	bne.n	800fff0 <measure_set_mode_pause+0x18>
	{
		measure_mode = MEASURE_MODE_PAUSE;
 800ffe4:	4b05      	ldr	r3, [pc, #20]	; (800fffc <measure_set_mode_pause+0x24>)
 800ffe6:	2202      	movs	r2, #2
 800ffe8:	701a      	strb	r2, [r3, #0]
		measure_mode_status = MEASURE_MODE_STATUS_CHANGED;
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <measure_set_mode_pause+0x28>)
 800ffec:	2201      	movs	r2, #1
 800ffee:	701a      	strb	r2, [r3, #0]
	}
}
 800fff0:	bf00      	nop
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	20003ed4 	.word	0x20003ed4
 8010000:	20003ed5 	.word	0x20003ed5

08010004 <measure_get_mode_pause>:

uint8_t measure_get_mode_pause(void)
{
 8010004:	b480      	push	{r7}
 8010006:	af00      	add	r7, sp, #0
	if(measure_mode == MEASURE_MODE_PAUSE)
 8010008:	4b05      	ldr	r3, [pc, #20]	; (8010020 <measure_get_mode_pause+0x1c>)
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	2b02      	cmp	r3, #2
 801000e:	d101      	bne.n	8010014 <measure_get_mode_pause+0x10>
	{
		return 0;
 8010010:	2300      	movs	r3, #0
 8010012:	e000      	b.n	8010016 <measure_get_mode_pause+0x12>
	}

	return 1;
 8010014:	2301      	movs	r3, #1
}
 8010016:	4618      	mov	r0, r3
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	20003ed4 	.word	0x20003ed4

08010024 <measure_set_mode_stop>:

void measure_set_mode_stop(void)
{
 8010024:	b480      	push	{r7}
 8010026:	af00      	add	r7, sp, #0
	measure_mode = MEASURE_MODE_STOP;
 8010028:	4b05      	ldr	r3, [pc, #20]	; (8010040 <measure_set_mode_stop+0x1c>)
 801002a:	2200      	movs	r2, #0
 801002c:	701a      	strb	r2, [r3, #0]
	measure_mode_status = MEASURE_MODE_STATUS_CHANGED;
 801002e:	4b05      	ldr	r3, [pc, #20]	; (8010044 <measure_set_mode_stop+0x20>)
 8010030:	2201      	movs	r2, #1
 8010032:	701a      	strb	r2, [r3, #0]
}
 8010034:	bf00      	nop
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop
 8010040:	20003ed4 	.word	0x20003ed4
 8010044:	20003ed5 	.word	0x20003ed5

08010048 <measure_get_mode_stop>:

uint8_t measure_get_mode_stop(void)
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
	if(measure_mode == MEASURE_MODE_STOP)
 801004c:	4b05      	ldr	r3, [pc, #20]	; (8010064 <measure_get_mode_stop+0x1c>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <measure_get_mode_stop+0x10>
	{
		return 0;
 8010054:	2300      	movs	r3, #0
 8010056:	e000      	b.n	801005a <measure_get_mode_stop+0x12>
	}

	return 1;
 8010058:	2301      	movs	r3, #1
}
 801005a:	4618      	mov	r0, r3
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	20003ed4 	.word	0x20003ed4

08010068 <measure_period_get_current_value>:


// MEASURE PERIOD
// --------------
uint32_t measure_period_get_current_value(void)
{
 8010068:	b480      	push	{r7}
 801006a:	af00      	add	r7, sp, #0
	return measure_period_info[measure_period_mode].period_value;
 801006c:	4b05      	ldr	r3, [pc, #20]	; (8010084 <measure_period_get_current_value+0x1c>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	4a05      	ldr	r2, [pc, #20]	; (8010088 <measure_period_get_current_value+0x20>)
 8010072:	011b      	lsls	r3, r3, #4
 8010074:	4413      	add	r3, r2
 8010076:	681b      	ldr	r3, [r3, #0]
}
 8010078:	4618      	mov	r0, r3
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20000198 	.word	0x20000198
 8010088:	2000019c 	.word	0x2000019c

0801008c <measure_period_set_mode>:

void measure_period_set_mode(uint8_t _index)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	4603      	mov	r3, r0
 8010094:	71fb      	strb	r3, [r7, #7]
	measure_set_mode_stop();
 8010096:	f7ff ffc5 	bl	8010024 <measure_set_mode_stop>
	measure_period_mode = _index;
 801009a:	4a03      	ldr	r2, [pc, #12]	; (80100a8 <measure_period_set_mode+0x1c>)
 801009c:	79fb      	ldrb	r3, [r7, #7]
 801009e:	7013      	strb	r3, [r2, #0]
}
 80100a0:	bf00      	nop
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	20000198 	.word	0x20000198

080100ac <measure_period_get_current_mode>:

uint8_t measure_period_get_current_mode(void)
{
 80100ac:	b480      	push	{r7}
 80100ae:	af00      	add	r7, sp, #0
	return measure_period_mode;
 80100b0:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <measure_period_get_current_mode+0x14>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr
 80100be:	bf00      	nop
 80100c0:	20000198 	.word	0x20000198

080100c4 <measure_period_get_previous_mode>:

uint8_t measure_period_get_previous_mode(uint8_t _index)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	4603      	mov	r3, r0
 80100cc:	71fb      	strb	r3, [r7, #7]
	if(_index == 0)
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d101      	bne.n	80100d8 <measure_period_get_previous_mode+0x14>
	{
		return (sizeof(measure_period_info) / sizeof(measure_period_info[0]) - 1);
 80100d4:	2301      	movs	r3, #1
 80100d6:	e003      	b.n	80100e0 <measure_period_get_previous_mode+0x1c>
	}

	_index--;
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	3b01      	subs	r3, #1
 80100dc:	71fb      	strb	r3, [r7, #7]
	return _index;
 80100de:	79fb      	ldrb	r3, [r7, #7]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <measure_period_get_next_mode>:

uint8_t measure_period_get_next_mode(uint8_t _index)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	4603      	mov	r3, r0
 80100f4:	71fb      	strb	r3, [r7, #7]
	_index++;
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	3301      	adds	r3, #1
 80100fa:	71fb      	strb	r3, [r7, #7]
	if(_index > (sizeof(measure_period_info) / sizeof(measure_period_info[0]) - 1))
 80100fc:	79fb      	ldrb	r3, [r7, #7]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d901      	bls.n	8010106 <measure_period_get_next_mode+0x1a>
	{
		return 0;
 8010102:	2300      	movs	r3, #0
 8010104:	e000      	b.n	8010108 <measure_period_get_next_mode+0x1c>
	}

	return _index;
 8010106:	79fb      	ldrb	r3, [r7, #7]
}
 8010108:	4618      	mov	r0, r3
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <measure_period_get_text>:

char * measure_period_get_text(uint8_t _index)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	71fb      	strb	r3, [r7, #7]
	return measure_period_info[_index].period_text;
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	011b      	lsls	r3, r3, #4
 8010122:	3308      	adds	r3, #8
 8010124:	4a03      	ldr	r2, [pc, #12]	; (8010134 <measure_period_get_text+0x20>)
 8010126:	4413      	add	r3, r2
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr
 8010134:	2000019c 	.word	0x2000019c

08010138 <measure_period_set_status_waiting>:

// MEASURE PERIOD STATUS
// ---------------------
void measure_period_set_status_waiting(void)
{
 8010138:	b480      	push	{r7}
 801013a:	af00      	add	r7, sp, #0
	measure_period_status = MEASURE_STATUS_WAITING;
 801013c:	4b03      	ldr	r3, [pc, #12]	; (801014c <measure_period_set_status_waiting+0x14>)
 801013e:	2202      	movs	r2, #2
 8010140:	701a      	strb	r2, [r3, #0]
}
 8010142:	bf00      	nop
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	20000199 	.word	0x20000199

08010150 <measure_period_get_status_ready>:

uint8_t measure_period_get_status_ready(void)
{
 8010150:	b480      	push	{r7}
 8010152:	af00      	add	r7, sp, #0
	if(measure_period_status == MEASURE_STATUS_READY)
 8010154:	4b05      	ldr	r3, [pc, #20]	; (801016c <measure_period_get_status_ready+0x1c>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d101      	bne.n	8010160 <measure_period_get_status_ready+0x10>
	{
		return 0;
 801015c:	2300      	movs	r3, #0
 801015e:	e000      	b.n	8010162 <measure_period_get_status_ready+0x12>
	}

	return 1;
 8010160:	2301      	movs	r3, #1
}
 8010162:	4618      	mov	r0, r3
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	20000199 	.word	0x20000199

08010170 <measure_period_set_status_started>:

void measure_period_set_status_started(void)
{
 8010170:	b480      	push	{r7}
 8010172:	af00      	add	r7, sp, #0
	measure_period_status = MEASURE_STATUS_STARTED;
 8010174:	4b03      	ldr	r3, [pc, #12]	; (8010184 <measure_period_set_status_started+0x14>)
 8010176:	2203      	movs	r2, #3
 8010178:	701a      	strb	r2, [r3, #0]
}
 801017a:	bf00      	nop
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	20000199 	.word	0x20000199

08010188 <measure_period_get_status_started>:

uint8_t measure_period_get_status_started(void)
{
 8010188:	b480      	push	{r7}
 801018a:	af00      	add	r7, sp, #0
	if(measure_period_status == MEASURE_STATUS_STARTED)
 801018c:	4b05      	ldr	r3, [pc, #20]	; (80101a4 <measure_period_get_status_started+0x1c>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b03      	cmp	r3, #3
 8010192:	d101      	bne.n	8010198 <measure_period_get_status_started+0x10>
	{
		return 0;
 8010194:	2300      	movs	r3, #0
 8010196:	e000      	b.n	801019a <measure_period_get_status_started+0x12>
	}

	return 1;
 8010198:	2301      	movs	r3, #1
}
 801019a:	4618      	mov	r0, r3
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr
 80101a4:	20000199 	.word	0x20000199

080101a8 <measure_period_set_status_finished>:

void measure_period_set_status_finished(void)
{
 80101a8:	b480      	push	{r7}
 80101aa:	af00      	add	r7, sp, #0
	measure_period_status = MEASURE_STATUS_FINISHED;
 80101ac:	4b03      	ldr	r3, [pc, #12]	; (80101bc <measure_period_set_status_finished+0x14>)
 80101ae:	2201      	movs	r2, #1
 80101b0:	701a      	strb	r2, [r3, #0]
}
 80101b2:	bf00      	nop
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	20000199 	.word	0x20000199

080101c0 <measure_period_reset_status>:

void measure_period_reset_status(void)
{
 80101c0:	b480      	push	{r7}
 80101c2:	af00      	add	r7, sp, #0
	measure_period_status = MEASURE_STATUS_WAITING;
 80101c4:	4b05      	ldr	r3, [pc, #20]	; (80101dc <measure_period_reset_status+0x1c>)
 80101c6:	2202      	movs	r2, #2
 80101c8:	701a      	strb	r2, [r3, #0]
	measure_period_count = 0;
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <measure_period_reset_status+0x20>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	801a      	strh	r2, [r3, #0]
}
 80101d0:	bf00      	nop
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	20000199 	.word	0x20000199
 80101e0:	20003ed6 	.word	0x20003ed6

080101e4 <measure_period_update_status>:
	return tmp;
}
*/

uint8_t measure_period_update_status(void)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	af00      	add	r7, sp, #0
	measure_period_count++;
 80101e8:	4b1a      	ldr	r3, [pc, #104]	; (8010254 <measure_period_update_status+0x70>)
 80101ea:	881b      	ldrh	r3, [r3, #0]
 80101ec:	3301      	adds	r3, #1
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	4b18      	ldr	r3, [pc, #96]	; (8010254 <measure_period_update_status+0x70>)
 80101f2:	801a      	strh	r2, [r3, #0]

	if(measure_period_status == MEASURE_STATUS_FINISHED)
 80101f4:	4b18      	ldr	r3, [pc, #96]	; (8010258 <measure_period_update_status+0x74>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d10f      	bne.n	801021c <measure_period_update_status+0x38>
	{
		if(measure_period_count == measure_period_info[measure_period_mode].period_value)
 80101fc:	4b15      	ldr	r3, [pc, #84]	; (8010254 <measure_period_update_status+0x70>)
 80101fe:	881b      	ldrh	r3, [r3, #0]
 8010200:	4619      	mov	r1, r3
 8010202:	4b16      	ldr	r3, [pc, #88]	; (801025c <measure_period_update_status+0x78>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	4a16      	ldr	r2, [pc, #88]	; (8010260 <measure_period_update_status+0x7c>)
 8010208:	011b      	lsls	r3, r3, #4
 801020a:	4413      	add	r3, r2
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4299      	cmp	r1, r3
 8010210:	d104      	bne.n	801021c <measure_period_update_status+0x38>
		{
			measure_period_set_status_waiting();
 8010212:	f7ff ff91 	bl	8010138 <measure_period_set_status_waiting>
			measure_period_count = 0;
 8010216:	4b0f      	ldr	r3, [pc, #60]	; (8010254 <measure_period_update_status+0x70>)
 8010218:	2200      	movs	r2, #0
 801021a:	801a      	strh	r2, [r3, #0]
		}
	}
	if(measure_period_status == MEASURE_STATUS_WAITING)
 801021c:	4b0e      	ldr	r3, [pc, #56]	; (8010258 <measure_period_update_status+0x74>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b02      	cmp	r3, #2
 8010222:	d113      	bne.n	801024c <measure_period_update_status+0x68>
	{
		if(!(measure_period_count % measure_period_info[measure_period_mode].period_get_measurement))
 8010224:	4b0b      	ldr	r3, [pc, #44]	; (8010254 <measure_period_update_status+0x70>)
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	461a      	mov	r2, r3
 801022a:	4b0c      	ldr	r3, [pc, #48]	; (801025c <measure_period_update_status+0x78>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	490c      	ldr	r1, [pc, #48]	; (8010260 <measure_period_update_status+0x7c>)
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	440b      	add	r3, r1
 8010234:	3304      	adds	r3, #4
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	fbb2 f1f3 	udiv	r1, r2, r3
 801023c:	fb03 f301 	mul.w	r3, r3, r1
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	d102      	bne.n	801024c <measure_period_update_status+0x68>
		{
			measure_period_status = MEASURE_STATUS_READY;
 8010246:	4b04      	ldr	r3, [pc, #16]	; (8010258 <measure_period_update_status+0x74>)
 8010248:	2200      	movs	r2, #0
 801024a:	701a      	strb	r2, [r3, #0]
		}
	}

	return 0;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	20003ed6 	.word	0x20003ed6
 8010258:	20000199 	.word	0x20000199
 801025c:	20000198 	.word	0x20000198
 8010260:	2000019c 	.word	0x2000019c

08010264 <adc_dma_start>:

uint8_t adc_value_index = 0;
uint16_t adc_value_buffer[COUNT_FOR_MEAN][COUNT_OF_USED_ADC] = {0};

void adc_dma_start(void)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	af00      	add	r7, sp, #0
#if ADC1_ENABLE == 1
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_value[0], COUNT_OF_ADC1);
 8010268:	220d      	movs	r2, #13
 801026a:	4903      	ldr	r1, [pc, #12]	; (8010278 <adc_dma_start+0x14>)
 801026c:	4803      	ldr	r0, [pc, #12]	; (801027c <adc_dma_start+0x18>)
 801026e:	f7f1 fdb5 	bl	8001ddc <HAL_ADC_Start_DMA>

//	debug_write_string("DMA Start\n");

//	char str[20] = "ADC Order: ";
//	debug_write_string_nmb(str, (uint8_t)adc_status);
}
 8010272:	bf00      	nop
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	20003edc 	.word	0x20003edc
 801027c:	20004084 	.word	0x20004084

08010280 <adc_dma_stop>:

void adc_dma_stop(void)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	af00      	add	r7, sp, #0
#if ADC1_ENABLE == 1
	HAL_ADC_Stop_DMA(&hadc1);
 8010284:	4802      	ldr	r0, [pc, #8]	; (8010290 <adc_dma_stop+0x10>)
 8010286:	f7f1 feb9 	bl	8001ffc <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
#endif
#if ADC3_ENABLE == 1
	HAL_ADC_Stop_DMA(&hadc3);
#endif
}
 801028a:	bf00      	nop
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	20004084 	.word	0x20004084

08010294 <sort_bubble>:

static void sort_bubble(uint16_t *array, size_t array_length, size_t size)
{
 8010294:	b480      	push	{r7}
 8010296:	b089      	sub	sp, #36	; 0x24
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
	while(size--)
 80102a0:	e02b      	b.n	80102fa <sort_bubble+0x66>
	{
		for(uint8_t i = 1; i <= size; i++)
 80102a2:	2301      	movs	r3, #1
 80102a4:	77fb      	strb	r3, [r7, #31]
 80102a6:	e024      	b.n	80102f2 <sort_bubble+0x5e>
		{
			uint16_t *tmp1 = array + array_length * (i-1);
 80102a8:	7ffb      	ldrb	r3, [r7, #31]
 80102aa:	3b01      	subs	r3, #1
 80102ac:	461a      	mov	r2, r3
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	fb03 f302 	mul.w	r3, r3, r2
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	4413      	add	r3, r2
 80102ba:	61bb      	str	r3, [r7, #24]
			uint16_t *tmp2 = array + array_length * i;
 80102bc:	7ffb      	ldrb	r3, [r7, #31]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	fb02 f303 	mul.w	r3, r2, r3
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	4413      	add	r3, r2
 80102ca:	617b      	str	r3, [r7, #20]

			if(tmp1[0] > tmp2[0])
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	881a      	ldrh	r2, [r3, #0]
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d909      	bls.n	80102ec <sort_bubble+0x58>
			{
				uint16_t temp = *tmp2;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	827b      	strh	r3, [r7, #18]
				*tmp2 = *tmp1;
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	881a      	ldrh	r2, [r3, #0]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	801a      	strh	r2, [r3, #0]
				*tmp1 = temp;
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	8a7a      	ldrh	r2, [r7, #18]
 80102ea:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 1; i <= size; i++)
 80102ec:	7ffb      	ldrb	r3, [r7, #31]
 80102ee:	3301      	adds	r3, #1
 80102f0:	77fb      	strb	r3, [r7, #31]
 80102f2:	7ffb      	ldrb	r3, [r7, #31]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d2d6      	bcs.n	80102a8 <sort_bubble+0x14>
	while(size--)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	1e5a      	subs	r2, r3, #1
 80102fe:	607a      	str	r2, [r7, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1ce      	bne.n	80102a2 <sort_bubble+0xe>
			}
		}
	}
}
 8010304:	bf00      	nop
 8010306:	bf00      	nop
 8010308:	3724      	adds	r7, #36	; 0x24
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
	...

08010314 <adc_transfer_data_to_buffer>:

void adc_transfer_data_to_buffer(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
	if(!measure_period_get_status_started())
 801031a:	f7ff ff35 	bl	8010188 <measure_period_get_status_started>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d141      	bne.n	80103a8 <adc_transfer_data_to_buffer+0x94>
	{
		if(HAL_IS_BIT_SET(adc_data, ADC_ENABLE))
 8010324:	4b22      	ldr	r3, [pc, #136]	; (80103b0 <adc_transfer_data_to_buffer+0x9c>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f003 0301 	and.w	r3, r3, #1
 801032c:	2b00      	cmp	r3, #0
 801032e:	d03b      	beq.n	80103a8 <adc_transfer_data_to_buffer+0x94>
		{
			memcpy(adc_value_buffer[adc_value_index], adc_value, sizeof(adc_value_buffer[0]));
 8010330:	4b20      	ldr	r3, [pc, #128]	; (80103b4 <adc_transfer_data_to_buffer+0xa0>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	461a      	mov	r2, r3
 8010336:	231a      	movs	r3, #26
 8010338:	fb03 f302 	mul.w	r3, r3, r2
 801033c:	4a1e      	ldr	r2, [pc, #120]	; (80103b8 <adc_transfer_data_to_buffer+0xa4>)
 801033e:	4413      	add	r3, r2
 8010340:	221a      	movs	r2, #26
 8010342:	491e      	ldr	r1, [pc, #120]	; (80103bc <adc_transfer_data_to_buffer+0xa8>)
 8010344:	4618      	mov	r0, r3
 8010346:	f000 fed5 	bl	80110f4 <memcpy>
			adc_data = 0;
 801034a:	4b19      	ldr	r3, [pc, #100]	; (80103b0 <adc_transfer_data_to_buffer+0x9c>)
 801034c:	2200      	movs	r2, #0
 801034e:	701a      	strb	r2, [r3, #0]

			adc_value_index++;
 8010350:	4b18      	ldr	r3, [pc, #96]	; (80103b4 <adc_transfer_data_to_buffer+0xa0>)
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	3301      	adds	r3, #1
 8010356:	b2da      	uxtb	r2, r3
 8010358:	4b16      	ldr	r3, [pc, #88]	; (80103b4 <adc_transfer_data_to_buffer+0xa0>)
 801035a:	701a      	strb	r2, [r3, #0]

			if(adc_value_index >= COUNT_FOR_MEAN)
 801035c:	4b15      	ldr	r3, [pc, #84]	; (80103b4 <adc_transfer_data_to_buffer+0xa0>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b0a      	cmp	r3, #10
 8010362:	d91f      	bls.n	80103a4 <adc_transfer_data_to_buffer+0x90>
			{
				for(uint8_t i = 0; i < COUNT_OF_USED_ADC; i++)
 8010364:	2300      	movs	r3, #0
 8010366:	71fb      	strb	r3, [r7, #7]
 8010368:	e00b      	b.n	8010382 <adc_transfer_data_to_buffer+0x6e>
				{
					sort_bubble((uint16_t *)&adc_value_buffer[0][i], sizeof(adc_value_buffer[0]) / sizeof(adc_value_buffer[0][0]), sizeof(adc_value_buffer) / sizeof(adc_value_buffer[0]));
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	4a12      	ldr	r2, [pc, #72]	; (80103b8 <adc_transfer_data_to_buffer+0xa4>)
 8010370:	4413      	add	r3, r2
 8010372:	220b      	movs	r2, #11
 8010374:	210d      	movs	r1, #13
 8010376:	4618      	mov	r0, r3
 8010378:	f7ff ff8c 	bl	8010294 <sort_bubble>
				for(uint8_t i = 0; i < COUNT_OF_USED_ADC; i++)
 801037c:	79fb      	ldrb	r3, [r7, #7]
 801037e:	3301      	adds	r3, #1
 8010380:	71fb      	strb	r3, [r7, #7]
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b0c      	cmp	r3, #12
 8010386:	d9f0      	bls.n	801036a <adc_transfer_data_to_buffer+0x56>
				}

				buffer_lcd_set_value((uint32_t *)&adc_value_buffer[5], COUNT_OF_USED_ADC);
 8010388:	210d      	movs	r1, #13
 801038a:	480d      	ldr	r0, [pc, #52]	; (80103c0 <adc_transfer_data_to_buffer+0xac>)
 801038c:	f7fe ffd2 	bl	800f334 <buffer_lcd_set_value>
				buffer_usb_set_value((uint32_t *)&adc_value_buffer[5], COUNT_OF_USED_ADC);
 8010390:	210d      	movs	r1, #13
 8010392:	480b      	ldr	r0, [pc, #44]	; (80103c0 <adc_transfer_data_to_buffer+0xac>)
 8010394:	f7ff f964 	bl	800f660 <buffer_usb_set_value>
				adc_value_index = 0;
 8010398:	4b06      	ldr	r3, [pc, #24]	; (80103b4 <adc_transfer_data_to_buffer+0xa0>)
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]

				measure_period_set_status_finished();
 801039e:	f7ff ff03 	bl	80101a8 <measure_period_set_status_finished>
			{
				measure_period_set_status_waiting();
			}
		}
	}
}
 80103a2:	e001      	b.n	80103a8 <adc_transfer_data_to_buffer+0x94>
				measure_period_set_status_waiting();
 80103a4:	f7ff fec8 	bl	8010138 <measure_period_set_status_waiting>
}
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	20003ed8 	.word	0x20003ed8
 80103b4:	20003ef6 	.word	0x20003ef6
 80103b8:	20003ef8 	.word	0x20003ef8
 80103bc:	20003edc 	.word	0x20003edc
 80103c0:	20003f7a 	.word	0x20003f7a

080103c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
#if ADC1_ENABLE == 1
	if(hadc == &hadc1)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a08      	ldr	r2, [pc, #32]	; (80103f0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d106      	bne.n	80103e2 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		SET_BIT(adc_data, 1 << ADC1_ENABLE_POS);
 80103d4:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <HAL_ADC_ConvCpltCallback+0x30>)
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	f043 0301 	orr.w	r3, r3, #1
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <HAL_ADC_ConvCpltCallback+0x30>)
 80103e0:	701a      	strb	r2, [r3, #0]
	else if(hadc == &hadc3)
	{
		SET_BIT(adc_data, 1 << ADC3_ENABLE_POS);
	}
#endif
}
 80103e2:	bf00      	nop
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	20004084 	.word	0x20004084
 80103f4:	20003ed8 	.word	0x20003ed8

080103f8 <adc_stop>:

void adc_stop(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	af00      	add	r7, sp, #0
	adc_value_index = 0;
 80103fc:	4b03      	ldr	r3, [pc, #12]	; (801040c <adc_stop+0x14>)
 80103fe:	2200      	movs	r2, #0
 8010400:	701a      	strb	r2, [r3, #0]
	adc_dma_stop();
 8010402:	f7ff ff3d 	bl	8010280 <adc_dma_stop>
}
 8010406:	bf00      	nop
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	20003ef6 	.word	0x20003ef6

08010410 <HAL_TIM_PeriodElapsedCallback>:

uint8_t tim_status = 0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4a14      	ldr	r2, [pc, #80]	; (801046c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d102      	bne.n	8010426 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		usb_update();
 8010420:	f000 f888 	bl	8010534 <usb_update>
				adc_dma_start();
				measure_period_set_status_started();
			}
		}
	}
}
 8010424:	e01e      	b.n	8010464 <HAL_TIM_PeriodElapsedCallback+0x54>
	else if(htim == &htim3)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a11      	ldr	r2, [pc, #68]	; (8010470 <HAL_TIM_PeriodElapsedCallback+0x60>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d104      	bne.n	8010438 <HAL_TIM_PeriodElapsedCallback+0x28>
	 	lcd_update();
 801042e:	f7f6 ff60 	bl	80072f2 <lcd_update>
	 	measure_mode_status_update();
 8010432:	f7ff fd97 	bl	800ff64 <measure_mode_status_update>
}
 8010436:	e015      	b.n	8010464 <HAL_TIM_PeriodElapsedCallback+0x54>
	else if(htim == &htim6)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4a0e      	ldr	r2, [pc, #56]	; (8010474 <HAL_TIM_PeriodElapsedCallback+0x64>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d111      	bne.n	8010464 <HAL_TIM_PeriodElapsedCallback+0x54>
		if(!measure_get_mode_start())
 8010440:	f7ff fdba 	bl	800ffb8 <measure_get_mode_start>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10c      	bne.n	8010464 <HAL_TIM_PeriodElapsedCallback+0x54>
			clock_inc();
 801044a:	f7ff fb8b 	bl	800fb64 <clock_inc>
			measure_period_update_status();
 801044e:	f7ff fec9 	bl	80101e4 <measure_period_update_status>
			if(!measure_period_get_status_ready())
 8010452:	f7ff fe7d 	bl	8010150 <measure_period_get_status_ready>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d103      	bne.n	8010464 <HAL_TIM_PeriodElapsedCallback+0x54>
				adc_dma_start();
 801045c:	f7ff ff02 	bl	8010264 <adc_dma_start>
				measure_period_set_status_started();
 8010460:	f7ff fe86 	bl	8010170 <measure_period_set_status_started>
}
 8010464:	bf00      	nop
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	20004174 	.word	0x20004174
 8010470:	2000403c 	.word	0x2000403c
 8010474:	2000412c 	.word	0x2000412c

08010478 <tim_start_irq>:

void tim_start_irq(void)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	af00      	add	r7, sp, #0
	if(!measure_get_mode_start() && !tim_status)
 801047c:	f7ff fd9c 	bl	800ffb8 <measure_get_mode_start>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d10d      	bne.n	80104a2 <tim_start_irq+0x2a>
 8010486:	4b08      	ldr	r3, [pc, #32]	; (80104a8 <tim_start_irq+0x30>)
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d109      	bne.n	80104a2 <tim_start_irq+0x2a>
	{
		HAL_TIM_Base_Start_IT(&htim6);
 801048e:	4807      	ldr	r0, [pc, #28]	; (80104ac <tim_start_irq+0x34>)
 8010490:	f7f5 f99a 	bl	80057c8 <HAL_TIM_Base_Start_IT>
		adc_dma_start();
 8010494:	f7ff fee6 	bl	8010264 <adc_dma_start>
		measure_period_set_status_started();
 8010498:	f7ff fe6a 	bl	8010170 <measure_period_set_status_started>
		tim_status = 1;
 801049c:	4b02      	ldr	r3, [pc, #8]	; (80104a8 <tim_start_irq+0x30>)
 801049e:	2201      	movs	r2, #1
 80104a0:	701a      	strb	r2, [r3, #0]
	}
}
 80104a2:	bf00      	nop
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20004016 	.word	0x20004016
 80104ac:	2000412c 	.word	0x2000412c

080104b0 <usb_statemachine>:

extern ApplicationTypeDef Appli_state;
uint8_t usb_file_ready = 1;		// TODO optimize?

void usb_statemachine(void)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0
	switch (Appli_state)
 80104b4:	4b17      	ldr	r3, [pc, #92]	; (8010514 <usb_statemachine+0x64>)
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	2b03      	cmp	r3, #3
 80104ba:	d826      	bhi.n	801050a <usb_statemachine+0x5a>
 80104bc:	a201      	add	r2, pc, #4	; (adr r2, 80104c4 <usb_statemachine+0x14>)
 80104be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c2:	bf00      	nop
 80104c4:	0801050b 	.word	0x0801050b
 80104c8:	0801050b 	.word	0x0801050b
 80104cc:	080104d5 	.word	0x080104d5
 80104d0:	080104ff 	.word	0x080104ff

		case APPLICATION_START:
			break;

		case APPLICATION_READY:
			if(!usb_mount() && !measure_get_mode_start())
 80104d4:	f000 f940 	bl	8010758 <usb_mount>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d117      	bne.n	801050e <usb_statemachine+0x5e>
 80104de:	f7ff fd6b 	bl	800ffb8 <measure_get_mode_start>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d112      	bne.n	801050e <usb_statemachine+0x5e>
			{
				// create file
				if(usb_file_exists_get())
 80104e8:	f000 f94e 	bl	8010788 <usb_file_exists_get>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <usb_statemachine+0x46>
				{
					usb_file_create();
 80104f2:	f000 f9c1 	bl	8010878 <usb_file_create>
				}
				usb_file_ready = 0;
 80104f6:	4b08      	ldr	r3, [pc, #32]	; (8010518 <usb_statemachine+0x68>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80104fc:	e007      	b.n	801050e <usb_statemachine+0x5e>

		case APPLICATION_DISCONNECT:
			usb_file_ready = 1;
 80104fe:	4b06      	ldr	r3, [pc, #24]	; (8010518 <usb_statemachine+0x68>)
 8010500:	2201      	movs	r2, #1
 8010502:	701a      	strb	r2, [r3, #0]
			usb_file_exists_reset();
 8010504:	f000 f94c 	bl	80107a0 <usb_file_exists_reset>
			break;
 8010508:	e002      	b.n	8010510 <usb_statemachine+0x60>

		default:
			break;
 801050a:	bf00      	nop
 801050c:	e000      	b.n	8010510 <usb_statemachine+0x60>
			break;
 801050e:	bf00      	nop
	}
}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}
 8010514:	20004030 	.word	0x20004030
 8010518:	200001bc 	.word	0x200001bc

0801051c <usb_ready>:

uint8_t usb_ready(void)
{
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
	return usb_file_ready;
 8010520:	4b03      	ldr	r3, [pc, #12]	; (8010530 <usb_ready+0x14>)
 8010522:	781b      	ldrb	r3, [r3, #0]
}
 8010524:	4618      	mov	r0, r3
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	200001bc 	.word	0x200001bc

08010534 <usb_update>:

void usb_update(void)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	af00      	add	r7, sp, #0
	if(!usb_file_ready && !measure_get_mode_start() && buffer_usb_get_count())
 8010538:	4b08      	ldr	r3, [pc, #32]	; (801055c <usb_update+0x28>)
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10b      	bne.n	8010558 <usb_update+0x24>
 8010540:	f7ff fd3a 	bl	800ffb8 <measure_get_mode_start>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <usb_update+0x24>
 801054a:	f7ff f85f 	bl	800f60c <buffer_usb_get_count>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d001      	beq.n	8010558 <usb_update+0x24>
	{
		usb_file_write_data();
 8010554:	f000 f9fc 	bl	8010950 <usb_file_write_data>
	}
}
 8010558:	bf00      	nop
 801055a:	bd80      	pop	{r7, pc}
 801055c:	200001bc 	.word	0x200001bc

08010560 <usb_stop>:

void usb_stop(void)	// TODO testen
{
 8010560:	b580      	push	{r7, lr}
 8010562:	af00      	add	r7, sp, #0
	if(!measure_get_mode_stop())
 8010564:	f7ff fd70 	bl	8010048 <measure_get_mode_stop>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d111      	bne.n	8010592 <usb_stop+0x32>
	{
		if(!usb_file_ready)
 801056e:	4b0a      	ldr	r3, [pc, #40]	; (8010598 <usb_stop+0x38>)
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <usb_stop+0x24>
		{
			if(buffer_usb_get_count())
 8010576:	f7ff f849 	bl	800f60c <buffer_usb_get_count>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d001      	beq.n	8010584 <usb_stop+0x24>
			{
				usb_file_write_data();
 8010580:	f000 f9e6 	bl	8010950 <usb_file_write_data>
			}
		}

		buffer_usb_reset_counter();
 8010584:	f7ff f966 	bl	800f854 <buffer_usb_reset_counter>

		usb_file_exists_reset();
 8010588:	f000 f90a 	bl	80107a0 <usb_file_exists_reset>
		usb_file_ready = 1;
 801058c:	4b02      	ldr	r3, [pc, #8]	; (8010598 <usb_stop+0x38>)
 801058e:	2201      	movs	r2, #1
 8010590:	701a      	strb	r2, [r3, #0]
	}
}
 8010592:	bf00      	nop
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	200001bc 	.word	0x200001bc

0801059c <usb_data_get_data>:

#define USB_BUF_SIZE		10


size_t usb_data_get_data(char* str, size_t count)
{
 801059c:	b590      	push	{r4, r7, lr}
 801059e:	b0d5      	sub	sp, #340	; 0x154
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	1d3b      	adds	r3, r7, #4
 80105a4:	6018      	str	r0, [r3, #0]
 80105a6:	463b      	mov	r3, r7
 80105a8:	6019      	str	r1, [r3, #0]
	buffer_info_t usb_buffer[USB_BUF_SIZE] = { 0 };
 80105aa:	f107 0318 	add.w	r3, r7, #24
 80105ae:	4618      	mov	r0, r3
 80105b0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80105b4:	461a      	mov	r2, r3
 80105b6:	2100      	movs	r1, #0
 80105b8:	f000 fdc4 	bl	8011144 <memset>

	if(count > USB_BUF_SIZE)
 80105bc:	463b      	mov	r3, r7
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b0a      	cmp	r3, #10
 80105c2:	d902      	bls.n	80105ca <usb_data_get_data+0x2e>
		count = USB_BUF_SIZE;
 80105c4:	463b      	mov	r3, r7
 80105c6:	220a      	movs	r2, #10
 80105c8:	601a      	str	r2, [r3, #0]

	count = buffer_usb_get_values(&usb_buffer[0], count);
 80105ca:	463c      	mov	r4, r7
 80105cc:	463b      	mov	r3, r7
 80105ce:	f107 0218 	add.w	r2, r7, #24
 80105d2:	6819      	ldr	r1, [r3, #0]
 80105d4:	4610      	mov	r0, r2
 80105d6:	f7ff f8bd 	bl	800f754 <buffer_usb_get_values>
 80105da:	6020      	str	r0, [r4, #0]
	if(!count)
 80105dc:	463b      	mov	r3, r7
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d101      	bne.n	80105e8 <usb_data_get_data+0x4c>
		return 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	e0a9      	b.n	801073c <usb_data_get_data+0x1a0>

	for(size_t j = 0; j < count; j ++)
 80105e8:	2300      	movs	r3, #0
 80105ea:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80105ee:	e095      	b.n	801071c <usb_data_get_data+0x180>
	{
		char tmp[10] = {0};
 80105f0:	f107 030c 	add.w	r3, r7, #12
 80105f4:	2200      	movs	r2, #0
 80105f6:	601a      	str	r2, [r3, #0]
 80105f8:	3304      	adds	r3, #4
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	809a      	strh	r2, [r3, #4]

		// hour
		sprintf(tmp, "%02u:", usb_buffer[j].hour);
 8010600:	f107 0118 	add.w	r1, r7, #24
 8010604:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010608:	4613      	mov	r3, r2
 801060a:	011b      	lsls	r3, r3, #4
 801060c:	1a9b      	subs	r3, r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	440b      	add	r3, r1
 8010612:	331c      	adds	r3, #28
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f107 030c 	add.w	r3, r7, #12
 801061c:	494a      	ldr	r1, [pc, #296]	; (8010748 <usb_data_get_data+0x1ac>)
 801061e:	4618      	mov	r0, r3
 8010620:	f001 fabc 	bl	8011b9c <siprintf>
		strcat(str, tmp);
 8010624:	f107 020c 	add.w	r2, r7, #12
 8010628:	1d3b      	adds	r3, r7, #4
 801062a:	4611      	mov	r1, r2
 801062c:	6818      	ldr	r0, [r3, #0]
 801062e:	f001 fad5 	bl	8011bdc <strcat>

		// min
		sprintf(tmp, "%02u:", usb_buffer[j].min);
 8010632:	f107 0118 	add.w	r1, r7, #24
 8010636:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801063a:	4613      	mov	r3, r2
 801063c:	011b      	lsls	r3, r3, #4
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	005b      	lsls	r3, r3, #1
 8010642:	440b      	add	r3, r1
 8010644:	331b      	adds	r3, #27
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	461a      	mov	r2, r3
 801064a:	f107 030c 	add.w	r3, r7, #12
 801064e:	493e      	ldr	r1, [pc, #248]	; (8010748 <usb_data_get_data+0x1ac>)
 8010650:	4618      	mov	r0, r3
 8010652:	f001 faa3 	bl	8011b9c <siprintf>
		strcat(str, tmp);
 8010656:	f107 020c 	add.w	r2, r7, #12
 801065a:	1d3b      	adds	r3, r7, #4
 801065c:	4611      	mov	r1, r2
 801065e:	6818      	ldr	r0, [r3, #0]
 8010660:	f001 fabc 	bl	8011bdc <strcat>

		// sec
		sprintf(tmp, "%02u;", usb_buffer[j].sec);
 8010664:	f107 0118 	add.w	r1, r7, #24
 8010668:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801066c:	4613      	mov	r3, r2
 801066e:	011b      	lsls	r3, r3, #4
 8010670:	1a9b      	subs	r3, r3, r2
 8010672:	005b      	lsls	r3, r3, #1
 8010674:	440b      	add	r3, r1
 8010676:	331a      	adds	r3, #26
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	461a      	mov	r2, r3
 801067c:	f107 030c 	add.w	r3, r7, #12
 8010680:	4932      	ldr	r1, [pc, #200]	; (801074c <usb_data_get_data+0x1b0>)
 8010682:	4618      	mov	r0, r3
 8010684:	f001 fa8a 	bl	8011b9c <siprintf>
		strcat(str, tmp);
 8010688:	f107 020c 	add.w	r2, r7, #12
 801068c:	1d3b      	adds	r3, r7, #4
 801068e:	4611      	mov	r1, r2
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	f001 faa3 	bl	8011bdc <strcat>

		for(uint32_t i = 0; i < ADC_VALUES; i++)
 8010696:	2300      	movs	r3, #0
 8010698:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801069c:	e027      	b.n	80106ee <usb_data_get_data+0x152>
		{
			float value = calc_temp(usb_buffer[j].buffer[i]);
 801069e:	f107 0118 	add.w	r1, r7, #24
 80106a2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80106a6:	4613      	mov	r3, r2
 80106a8:	011b      	lsls	r3, r3, #4
 80106aa:	1a9b      	subs	r3, r3, r2
 80106ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80106b0:	4413      	add	r3, r2
 80106b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff f9f2 	bl	800faa0 <calc_temp>
 80106bc:	ed87 0a51 	vstr	s0, [r7, #324]	; 0x144
			sprintf(tmp, "%.2f;", value);
 80106c0:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80106c4:	f7ef ff40 	bl	8000548 <__aeabi_f2d>
 80106c8:	4602      	mov	r2, r0
 80106ca:	460b      	mov	r3, r1
 80106cc:	f107 000c 	add.w	r0, r7, #12
 80106d0:	491f      	ldr	r1, [pc, #124]	; (8010750 <usb_data_get_data+0x1b4>)
 80106d2:	f001 fa63 	bl	8011b9c <siprintf>
			strcat(str, tmp);
 80106d6:	f107 020c 	add.w	r2, r7, #12
 80106da:	1d3b      	adds	r3, r7, #4
 80106dc:	4611      	mov	r1, r2
 80106de:	6818      	ldr	r0, [r3, #0]
 80106e0:	f001 fa7c 	bl	8011bdc <strcat>
		for(uint32_t i = 0; i < ADC_VALUES; i++)
 80106e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106e8:	3301      	adds	r3, #1
 80106ea:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80106ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106f2:	2b0c      	cmp	r3, #12
 80106f4:	d9d3      	bls.n	801069e <usb_data_get_data+0x102>
		}
		strcat(str, "\n");
 80106f6:	1d3b      	adds	r3, r7, #4
 80106f8:	6818      	ldr	r0, [r3, #0]
 80106fa:	f7ef fd69 	bl	80001d0 <strlen>
 80106fe:	4603      	mov	r3, r0
 8010700:	461a      	mov	r2, r3
 8010702:	1d3b      	adds	r3, r7, #4
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4413      	add	r3, r2
 8010708:	4912      	ldr	r1, [pc, #72]	; (8010754 <usb_data_get_data+0x1b8>)
 801070a:	461a      	mov	r2, r3
 801070c:	460b      	mov	r3, r1
 801070e:	881b      	ldrh	r3, [r3, #0]
 8010710:	8013      	strh	r3, [r2, #0]
	for(size_t j = 0; j < count; j ++)
 8010712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010716:	3301      	adds	r3, #1
 8010718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801071c:	463b      	mov	r3, r7
 801071e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	429a      	cmp	r2, r3
 8010726:	f4ff af63 	bcc.w	80105f0 <usb_data_get_data+0x54>
	}

	debug_inc_usb_access(count);
 801072a:	463b      	mov	r3, r7
 801072c:	6818      	ldr	r0, [r3, #0]
 801072e:	f7ff fba5 	bl	800fe7c <debug_inc_usb_access>

	return strlen(str);
 8010732:	1d3b      	adds	r3, r7, #4
 8010734:	6818      	ldr	r0, [r3, #0]
 8010736:	f7ef fd4b 	bl	80001d0 <strlen>
 801073a:	4603      	mov	r3, r0
}
 801073c:	4618      	mov	r0, r3
 801073e:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8010742:	46bd      	mov	sp, r7
 8010744:	bd90      	pop	{r4, r7, pc}
 8010746:	bf00      	nop
 8010748:	08013fac 	.word	0x08013fac
 801074c:	08013fb4 	.word	0x08013fb4
 8010750:	08013fbc 	.word	0x08013fbc
 8010754:	08013fc4 	.word	0x08013fc4

08010758 <usb_mount>:
	"ADC1_11;", "ADC1_12;", "ADC1_13;",
};


uint8_t usb_mount(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
	FRESULT f_res = f_mount(&USBHFatFS, USBHPath, 0);
 801075e:	2200      	movs	r2, #0
 8010760:	4907      	ldr	r1, [pc, #28]	; (8010780 <usb_mount+0x28>)
 8010762:	4808      	ldr	r0, [pc, #32]	; (8010784 <usb_mount+0x2c>)
 8010764:	f7fd fed6 	bl	800e514 <f_mount>
 8010768:	4603      	mov	r3, r0
 801076a:	71fb      	strb	r3, [r7, #7]

	if(f_res != FR_OK)
 801076c:	79fb      	ldrb	r3, [r7, #7]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d001      	beq.n	8010776 <usb_mount+0x1e>
		return 1;
 8010772:	2301      	movs	r3, #1
 8010774:	e000      	b.n	8010778 <usb_mount+0x20>

	return 0;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	200041c0 	.word	0x200041c0
 8010784:	200043f4 	.word	0x200043f4

08010788 <usb_file_exists_get>:

	return 0;
}

uint8_t usb_file_exists_get(void)
{
 8010788:	b480      	push	{r7}
 801078a:	af00      	add	r7, sp, #0
	return usb_file_exists;
 801078c:	4b03      	ldr	r3, [pc, #12]	; (801079c <usb_file_exists_get+0x14>)
 801078e:	781b      	ldrb	r3, [r3, #0]
}
 8010790:	4618      	mov	r0, r3
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	200001bd 	.word	0x200001bd

080107a0 <usb_file_exists_reset>:

void usb_file_exists_reset(void)
{
 80107a0:	b480      	push	{r7}
 80107a2:	af00      	add	r7, sp, #0
	usb_file_exists = 1;
 80107a4:	4b03      	ldr	r3, [pc, #12]	; (80107b4 <usb_file_exists_reset+0x14>)
 80107a6:	2201      	movs	r2, #1
 80107a8:	701a      	strb	r2, [r3, #0]
}
 80107aa:	bf00      	nop
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr
 80107b4:	200001bd 	.word	0x200001bd

080107b8 <usb_file_get_filename>:

char* usb_file_get_filename(void)
{
 80107b8:	b480      	push	{r7}
 80107ba:	af00      	add	r7, sp, #0
	return filename;
 80107bc:	4b02      	ldr	r3, [pc, #8]	; (80107c8 <usb_file_get_filename+0x10>)
}
 80107be:	4618      	mov	r0, r3
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	20004018 	.word	0x20004018

080107cc <usb_file_get_name>:

static uint8_t usb_file_get_name(char* filename)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b0c0      	sub	sp, #256	; 0x100
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
	FRESULT f_res = FR_OK;
 80107d4:	2300      	movs	r3, #0
 80107d6:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	FILINFO fno[10];

	uint8_t file_counter = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

	do
	{
		char tmp[2];

		if(file_counter >= 10)
 80107e0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80107e4:	2b09      	cmp	r3, #9
 80107e6:	d901      	bls.n	80107ec <usb_file_get_name+0x20>
			return 1;
 80107e8:	2301      	movs	r3, #1
 80107ea:	e03a      	b.n	8010862 <usb_file_get_name+0x96>

		strcpy(filename, "voltage");
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	491f      	ldr	r1, [pc, #124]	; (801086c <usb_file_get_name+0xa0>)
 80107f0:	461a      	mov	r2, r3
 80107f2:	460b      	mov	r3, r1
 80107f4:	cb03      	ldmia	r3!, {r0, r1}
 80107f6:	6010      	str	r0, [r2, #0]
 80107f8:	6051      	str	r1, [r2, #4]
		sprintf(tmp, "%u", file_counter);
 80107fa:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 80107fe:	f107 0308 	add.w	r3, r7, #8
 8010802:	491b      	ldr	r1, [pc, #108]	; (8010870 <usb_file_get_name+0xa4>)
 8010804:	4618      	mov	r0, r3
 8010806:	f001 f9c9 	bl	8011b9c <siprintf>
		strcat(filename, tmp);
 801080a:	f107 0308 	add.w	r3, r7, #8
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f001 f9e3 	bl	8011bdc <strcat>
		strcat(filename, ".csv");
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ef fcda 	bl	80001d0 <strlen>
 801081c:	4603      	mov	r3, r0
 801081e:	461a      	mov	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4413      	add	r3, r2
 8010824:	4a13      	ldr	r2, [pc, #76]	; (8010874 <usb_file_get_name+0xa8>)
 8010826:	6810      	ldr	r0, [r2, #0]
 8010828:	6018      	str	r0, [r3, #0]
 801082a:	7912      	ldrb	r2, [r2, #4]
 801082c:	711a      	strb	r2, [r3, #4]

		f_res = f_stat(filename, &fno[file_counter]);
 801082e:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8010832:	f107 010c 	add.w	r1, r7, #12
 8010836:	4613      	mov	r3, r2
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	4413      	add	r3, r2
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	440b      	add	r3, r1
 8010840:	4619      	mov	r1, r3
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7fe fc90 	bl	800f168 <f_stat>
 8010848:	4603      	mov	r3, r0
 801084a:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe

		file_counter++;
 801084e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8010852:	3301      	adds	r3, #1
 8010854:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

	} while(f_res != FR_NO_FILE);
 8010858:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 801085c:	2b04      	cmp	r3, #4
 801085e:	d1bf      	bne.n	80107e0 <usb_file_get_name+0x14>

	return 0;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	08013fc8 	.word	0x08013fc8
 8010870:	08013fd0 	.word	0x08013fd0
 8010874:	08013fd4 	.word	0x08013fd4

08010878 <usb_file_create>:

uint8_t usb_file_create(void)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b0b4      	sub	sp, #208	; 0xd0
 801087c:	af00      	add	r7, sp, #0
	FRESULT f_res;

	usb_file_get_name(filename);
 801087e:	482d      	ldr	r0, [pc, #180]	; (8010934 <usb_file_create+0xbc>)
 8010880:	f7ff ffa4 	bl	80107cc <usb_file_get_name>

	f_res = f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS);
 8010884:	220a      	movs	r2, #10
 8010886:	492b      	ldr	r1, [pc, #172]	; (8010934 <usb_file_create+0xbc>)
 8010888:	482b      	ldr	r0, [pc, #172]	; (8010938 <usb_file_create+0xc0>)
 801088a:	f7fd fe89 	bl	800e5a0 <f_open>
 801088e:	4603      	mov	r3, r0
 8010890:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if(f_res != FR_OK)
 8010894:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <usb_file_create+0x2a>
	{
		return f_res;
 801089c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80108a0:	e043      	b.n	801092a <usb_file_create+0xb2>
	}

	uint32_t bw = 0;
 80108a2:	2300      	movs	r3, #0
 80108a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	char str[200] = {0};
 80108a8:	2300      	movs	r3, #0
 80108aa:	603b      	str	r3, [r7, #0]
 80108ac:	1d3b      	adds	r3, r7, #4
 80108ae:	22c4      	movs	r2, #196	; 0xc4
 80108b0:	2100      	movs	r1, #0
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 fc46 	bl	8011144 <memset>

	strcat(str, "time;");
 80108b8:	463b      	mov	r3, r7
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7ef fc88 	bl	80001d0 <strlen>
 80108c0:	4603      	mov	r3, r0
 80108c2:	461a      	mov	r2, r3
 80108c4:	463b      	mov	r3, r7
 80108c6:	4413      	add	r3, r2
 80108c8:	4a1c      	ldr	r2, [pc, #112]	; (801093c <usb_file_create+0xc4>)
 80108ca:	6810      	ldr	r0, [r2, #0]
 80108cc:	6018      	str	r0, [r3, #0]
 80108ce:	8892      	ldrh	r2, [r2, #4]
 80108d0:	809a      	strh	r2, [r3, #4]
	strncat(str, &first_line[0][0], sizeof(first_line));
 80108d2:	463b      	mov	r3, r7
 80108d4:	2268      	movs	r2, #104	; 0x68
 80108d6:	491a      	ldr	r1, [pc, #104]	; (8010940 <usb_file_create+0xc8>)
 80108d8:	4618      	mov	r0, r3
 80108da:	f001 f98e 	bl	8011bfa <strncat>
	strcat(str, "\n");
 80108de:	463b      	mov	r3, r7
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ef fc75 	bl	80001d0 <strlen>
 80108e6:	4603      	mov	r3, r0
 80108e8:	461a      	mov	r2, r3
 80108ea:	463b      	mov	r3, r7
 80108ec:	4413      	add	r3, r2
 80108ee:	4915      	ldr	r1, [pc, #84]	; (8010944 <usb_file_create+0xcc>)
 80108f0:	461a      	mov	r2, r3
 80108f2:	460b      	mov	r3, r1
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	8013      	strh	r3, [r2, #0]

	file_seek = strlen(str);
 80108f8:	463b      	mov	r3, r7
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7ef fc68 	bl	80001d0 <strlen>
 8010900:	4603      	mov	r3, r0
 8010902:	4a11      	ldr	r2, [pc, #68]	; (8010948 <usb_file_create+0xd0>)
 8010904:	6013      	str	r3, [r2, #0]
	f_res = f_write(&file, str, file_seek, (unsigned int*)&bw);
 8010906:	4b10      	ldr	r3, [pc, #64]	; (8010948 <usb_file_create+0xd0>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801090e:	4639      	mov	r1, r7
 8010910:	4809      	ldr	r0, [pc, #36]	; (8010938 <usb_file_create+0xc0>)
 8010912:	f7fe f803 	bl	800e91c <f_write>
 8010916:	4603      	mov	r3, r0
 8010918:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	f_close(&file);
 801091c:	4806      	ldr	r0, [pc, #24]	; (8010938 <usb_file_create+0xc0>)
 801091e:	f7fe f9f0 	bl	800ed02 <f_close>
	usb_file_exists = 0;
 8010922:	4b0a      	ldr	r3, [pc, #40]	; (801094c <usb_file_create+0xd4>)
 8010924:	2200      	movs	r2, #0
 8010926:	701a      	strb	r2, [r3, #0]
	return 0;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	37d0      	adds	r7, #208	; 0xd0
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	20004018 	.word	0x20004018
 8010938:	20004628 	.word	0x20004628
 801093c:	08013fdc 	.word	0x08013fdc
 8010940:	200001c0 	.word	0x200001c0
 8010944:	08013fe4 	.word	0x08013fe4
 8010948:	2000402c 	.word	0x2000402c
 801094c:	200001bd 	.word	0x200001bd

08010950 <usb_file_write_data>:

uint8_t usb_file_write_data(void)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 8010956:	af00      	add	r7, sp, #0
	FRESULT f_res;

	f_res = f_open(&file, filename, FA_WRITE);
 8010958:	2202      	movs	r2, #2
 801095a:	492a      	ldr	r1, [pc, #168]	; (8010a04 <usb_file_write_data+0xb4>)
 801095c:	482a      	ldr	r0, [pc, #168]	; (8010a08 <usb_file_write_data+0xb8>)
 801095e:	f7fd fe1f 	bl	800e5a0 <f_open>
 8010962:	4603      	mov	r3, r0
 8010964:	f887 37df 	strb.w	r3, [r7, #2015]	; 0x7df
	if(f_res != FR_OK)
 8010968:	f897 37df 	ldrb.w	r3, [r7, #2015]	; 0x7df
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <usb_file_write_data+0x26>
	{
		return f_res;
 8010970:	f897 37df 	ldrb.w	r3, [r7, #2015]	; 0x7df
 8010974:	e040      	b.n	80109f8 <usb_file_write_data+0xa8>
	}

	f_lseek(&file, file_seek);
 8010976:	4b25      	ldr	r3, [pc, #148]	; (8010a0c <usb_file_write_data+0xbc>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4619      	mov	r1, r3
 801097c:	4822      	ldr	r0, [pc, #136]	; (8010a08 <usb_file_write_data+0xb8>)
 801097e:	f7fe f9ea 	bl	800ed56 <f_lseek>

	while(1)
	{
		uint32_t bw = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
		char str[2000] = {0};
 8010988:	1d3b      	adds	r3, r7, #4
 801098a:	2200      	movs	r2, #0
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	3304      	adds	r3, #4
 8010990:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8010994:	2100      	movs	r1, #0
 8010996:	4618      	mov	r0, r3
 8010998:	f000 fbd4 	bl	8011144 <memset>

		size_t count = usb_data_get_data(str, 10);
 801099c:	1d3b      	adds	r3, r7, #4
 801099e:	210a      	movs	r1, #10
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff fdfb 	bl	801059c <usb_data_get_data>
 80109a6:	f8c7 07d8 	str.w	r0, [r7, #2008]	; 0x7d8
		debug_set_usb_max_bytecount(count);
 80109aa:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	; 0x7d8
 80109ae:	f7ff fa9d 	bl	800feec <debug_set_usb_max_bytecount>
		if(count == 0)
 80109b2:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d016      	beq.n	80109e8 <usb_file_write_data+0x98>
			break;

		file_seek += count;
 80109ba:	4b14      	ldr	r3, [pc, #80]	; (8010a0c <usb_file_write_data+0xbc>)
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80109c2:	4413      	add	r3, r2
 80109c4:	4a11      	ldr	r2, [pc, #68]	; (8010a0c <usb_file_write_data+0xbc>)
 80109c6:	6013      	str	r3, [r2, #0]
		f_res = f_write(&file, str, count, (unsigned int*)&bw);
 80109c8:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 80109cc:	1d39      	adds	r1, r7, #4
 80109ce:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 80109d2:	480d      	ldr	r0, [pc, #52]	; (8010a08 <usb_file_write_data+0xb8>)
 80109d4:	f7fd ffa2 	bl	800e91c <f_write>
 80109d8:	4603      	mov	r3, r0
 80109da:	f887 37df 	strb.w	r3, [r7, #2015]	; 0x7df

		if(f_res != FR_OK)
 80109de:	f897 37df 	ldrb.w	r3, [r7, #2015]	; 0x7df
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d102      	bne.n	80109ec <usb_file_write_data+0x9c>
	{
 80109e6:	e7cc      	b.n	8010982 <usb_file_write_data+0x32>
			break;
 80109e8:	bf00      	nop
 80109ea:	e000      	b.n	80109ee <usb_file_write_data+0x9e>
			break;
 80109ec:	bf00      	nop
	}

	f_close(&file);
 80109ee:	4806      	ldr	r0, [pc, #24]	; (8010a08 <usb_file_write_data+0xb8>)
 80109f0:	f7fe f987 	bl	800ed02 <f_close>

	return f_res;
 80109f4:	f897 37df 	ldrb.w	r3, [r7, #2015]	; 0x7df
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20004018 	.word	0x20004018
 8010a08:	20004628 	.word	0x20004628
 8010a0c:	2000402c 	.word	0x2000402c

08010a10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010a14:	2201      	movs	r2, #1
 8010a16:	490e      	ldr	r1, [pc, #56]	; (8010a50 <MX_USB_HOST_Init+0x40>)
 8010a18:	480e      	ldr	r0, [pc, #56]	; (8010a54 <MX_USB_HOST_Init+0x44>)
 8010a1a:	f7fa fc87 	bl	800b32c <USBH_Init>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d001      	beq.n	8010a28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010a24:	f7f0 fe40 	bl	80016a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010a28:	490b      	ldr	r1, [pc, #44]	; (8010a58 <MX_USB_HOST_Init+0x48>)
 8010a2a:	480a      	ldr	r0, [pc, #40]	; (8010a54 <MX_USB_HOST_Init+0x44>)
 8010a2c:	f7fa fd0c 	bl	800b448 <USBH_RegisterClass>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d001      	beq.n	8010a3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010a36:	f7f0 fe37 	bl	80016a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010a3a:	4806      	ldr	r0, [pc, #24]	; (8010a54 <MX_USB_HOST_Init+0x44>)
 8010a3c:	f7fa fd90 	bl	800b560 <USBH_Start>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d001      	beq.n	8010a4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010a46:	f7f0 fe2f 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010a4a:	bf00      	nop
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	08010a71 	.word	0x08010a71
 8010a54:	20004858 	.word	0x20004858
 8010a58:	20000178 	.word	0x20000178

08010a5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010a60:	4802      	ldr	r0, [pc, #8]	; (8010a6c <MX_USB_HOST_Process+0x10>)
 8010a62:	f7fa fd8d 	bl	800b580 <USBH_Process>
}
 8010a66:	bf00      	nop
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	20004858 	.word	0x20004858

08010a70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	2b04      	cmp	r3, #4
 8010a82:	d819      	bhi.n	8010ab8 <USBH_UserProcess+0x48>
 8010a84:	a201      	add	r2, pc, #4	; (adr r2, 8010a8c <USBH_UserProcess+0x1c>)
 8010a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a8a:	bf00      	nop
 8010a8c:	08010ab9 	.word	0x08010ab9
 8010a90:	08010aa9 	.word	0x08010aa9
 8010a94:	08010ab9 	.word	0x08010ab9
 8010a98:	08010ab1 	.word	0x08010ab1
 8010a9c:	08010aa1 	.word	0x08010aa1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010aa0:	4b09      	ldr	r3, [pc, #36]	; (8010ac8 <USBH_UserProcess+0x58>)
 8010aa2:	2203      	movs	r2, #3
 8010aa4:	701a      	strb	r2, [r3, #0]
  break;
 8010aa6:	e008      	b.n	8010aba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010aa8:	4b07      	ldr	r3, [pc, #28]	; (8010ac8 <USBH_UserProcess+0x58>)
 8010aaa:	2202      	movs	r2, #2
 8010aac:	701a      	strb	r2, [r3, #0]
  break;
 8010aae:	e004      	b.n	8010aba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010ab0:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <USBH_UserProcess+0x58>)
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	701a      	strb	r2, [r3, #0]
  break;
 8010ab6:	e000      	b.n	8010aba <USBH_UserProcess+0x4a>

  default:
  break;
 8010ab8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010aba:	bf00      	nop
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	20004030 	.word	0x20004030

08010acc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b08a      	sub	sp, #40	; 0x28
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ad4:	f107 0314 	add.w	r3, r7, #20
 8010ad8:	2200      	movs	r2, #0
 8010ada:	601a      	str	r2, [r3, #0]
 8010adc:	605a      	str	r2, [r3, #4]
 8010ade:	609a      	str	r2, [r3, #8]
 8010ae0:	60da      	str	r2, [r3, #12]
 8010ae2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010aec:	d147      	bne.n	8010b7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010aee:	2300      	movs	r3, #0
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	4b25      	ldr	r3, [pc, #148]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af6:	4a24      	ldr	r2, [pc, #144]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010af8:	f043 0301 	orr.w	r3, r3, #1
 8010afc:	6313      	str	r3, [r2, #48]	; 0x30
 8010afe:	4b22      	ldr	r3, [pc, #136]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b02:	f003 0301 	and.w	r3, r3, #1
 8010b06:	613b      	str	r3, [r7, #16]
 8010b08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010b10:	2300      	movs	r3, #0
 8010b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b14:	2300      	movs	r3, #0
 8010b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010b18:	f107 0314 	add.w	r3, r7, #20
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	481b      	ldr	r0, [pc, #108]	; (8010b8c <HAL_HCD_MspInit+0xc0>)
 8010b20:	f7f2 fa6c 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010b24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b32:	2300      	movs	r3, #0
 8010b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010b36:	230a      	movs	r3, #10
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b3a:	f107 0314 	add.w	r3, r7, #20
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4812      	ldr	r0, [pc, #72]	; (8010b8c <HAL_HCD_MspInit+0xc0>)
 8010b42:	f7f2 fa5b 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b46:	4b10      	ldr	r3, [pc, #64]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b4a:	4a0f      	ldr	r2, [pc, #60]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b50:	6353      	str	r3, [r2, #52]	; 0x34
 8010b52:	2300      	movs	r3, #0
 8010b54:	60fb      	str	r3, [r7, #12]
 8010b56:	4b0c      	ldr	r3, [pc, #48]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5a:	4a0b      	ldr	r2, [pc, #44]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b60:	6453      	str	r3, [r2, #68]	; 0x44
 8010b62:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <HAL_HCD_MspInit+0xbc>)
 8010b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 2);
 8010b6e:	2202      	movs	r2, #2
 8010b70:	2100      	movs	r1, #0
 8010b72:	2043      	movs	r0, #67	; 0x43
 8010b74:	f7f1 fe2b 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b78:	2043      	movs	r0, #67	; 0x43
 8010b7a:	f7f1 fe44 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b7e:	bf00      	nop
 8010b80:	3728      	adds	r7, #40	; 0x28
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	40023800 	.word	0x40023800
 8010b8c:	40020000 	.word	0x40020000

08010b90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fb f8c1 	bl	800bd26 <USBH_LL_IncTimer>
}
 8010ba4:	bf00      	nop
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fb f8f9 	bl	800bdb2 <USBH_LL_Connect>
}
 8010bc0:	bf00      	nop
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fb f902 	bl	800bde0 <USBH_LL_Disconnect>
}
 8010bdc:	bf00      	nop
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010bf4:	bf00      	nop
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fb f8b3 	bl	800bd7a <USBH_LL_PortEnabled>
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fb f8b3 	bl	800bd96 <USBH_LL_PortDisabled>
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d12a      	bne.n	8010ca0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010c4a:	4a18      	ldr	r2, [pc, #96]	; (8010cac <USBH_LL_Init+0x74>)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a15      	ldr	r2, [pc, #84]	; (8010cac <USBH_LL_Init+0x74>)
 8010c56:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010c5a:	4b14      	ldr	r3, [pc, #80]	; (8010cac <USBH_LL_Init+0x74>)
 8010c5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010c60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010c62:	4b12      	ldr	r3, [pc, #72]	; (8010cac <USBH_LL_Init+0x74>)
 8010c64:	2208      	movs	r2, #8
 8010c66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 8010c68:	4b10      	ldr	r3, [pc, #64]	; (8010cac <USBH_LL_Init+0x74>)
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010c6e:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <USBH_LL_Init+0x74>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010c74:	4b0d      	ldr	r3, [pc, #52]	; (8010cac <USBH_LL_Init+0x74>)
 8010c76:	2202      	movs	r2, #2
 8010c78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010c7a:	4b0c      	ldr	r3, [pc, #48]	; (8010cac <USBH_LL_Init+0x74>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010c80:	480a      	ldr	r0, [pc, #40]	; (8010cac <USBH_LL_Init+0x74>)
 8010c82:	f7f2 fba1 	bl	80033c8 <HAL_HCD_Init>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d001      	beq.n	8010c90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010c8c:	f7f0 fd0c 	bl	80016a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010c90:	4806      	ldr	r0, [pc, #24]	; (8010cac <USBH_LL_Init+0x74>)
 8010c92:	f7f2 ff84 	bl	8003b9e <HAL_HCD_GetCurrentFrame>
 8010c96:	4603      	mov	r3, r0
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7fb f834 	bl	800bd08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	20004c30 	.word	0x20004c30

08010cb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7f2 fef3 	bl	8003ab2 <HAL_HCD_Start>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f000 f98c 	bl	8010ff0 <USBH_Get_USB_Status>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3710      	adds	r7, #16
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}

08010ce6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b084      	sub	sp, #16
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7f2 fefb 	bl	8003af8 <HAL_HCD_Stop>
 8010d02:	4603      	mov	r3, r0
 8010d04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d06:	7bfb      	ldrb	r3, [r7, #15]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 f971 	bl	8010ff0 <USBH_Get_USB_Status>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010d24:	2301      	movs	r3, #1
 8010d26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f2 ff43 	bl	8003bba <HAL_HCD_GetCurrentSpeed>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d00c      	beq.n	8010d54 <USBH_LL_GetSpeed+0x38>
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d80d      	bhi.n	8010d5a <USBH_LL_GetSpeed+0x3e>
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <USBH_LL_GetSpeed+0x2c>
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d003      	beq.n	8010d4e <USBH_LL_GetSpeed+0x32>
 8010d46:	e008      	b.n	8010d5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d4c:	e008      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	73fb      	strb	r3, [r7, #15]
    break;
 8010d52:	e005      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010d54:	2302      	movs	r3, #2
 8010d56:	73fb      	strb	r3, [r7, #15]
    break;
 8010d58:	e002      	b.n	8010d60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d5e:	bf00      	nop
  }
  return  speed;
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b084      	sub	sp, #16
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f2 fed6 	bl	8003b32 <HAL_HCD_ResetPort>
 8010d86:	4603      	mov	r3, r0
 8010d88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d8a:	7bfb      	ldrb	r3, [r7, #15]
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f000 f92f 	bl	8010ff0 <USBH_Get_USB_Status>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	4611      	mov	r1, r2
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f2 fedd 	bl	8003b76 <HAL_HCD_HC_GetXferCount>
 8010dbc:	4603      	mov	r3, r0
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010dc6:	b590      	push	{r4, r7, lr}
 8010dc8:	b089      	sub	sp, #36	; 0x24
 8010dca:	af04      	add	r7, sp, #16
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	70fb      	strb	r3, [r7, #3]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	70bb      	strb	r3, [r7, #2]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010dee:	787c      	ldrb	r4, [r7, #1]
 8010df0:	78ba      	ldrb	r2, [r7, #2]
 8010df2:	78f9      	ldrb	r1, [r7, #3]
 8010df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	4623      	mov	r3, r4
 8010e06:	f7f2 fb41 	bl	800348c <HAL_HCD_HC_Init>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e0e:	7bfb      	ldrb	r3, [r7, #15]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 f8ed 	bl	8010ff0 <USBH_Get_USB_Status>
 8010e16:	4603      	mov	r3, r0
 8010e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3714      	adds	r7, #20
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd90      	pop	{r4, r7, pc}

08010e24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e34:	2300      	movs	r3, #0
 8010e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e3e:	78fa      	ldrb	r2, [r7, #3]
 8010e40:	4611      	mov	r1, r2
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f2 fbb1 	bl	80035aa <HAL_HCD_HC_Halt>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 f8ce 	bl	8010ff0 <USBH_Get_USB_Status>
 8010e54:	4603      	mov	r3, r0
 8010e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010e62:	b590      	push	{r4, r7, lr}
 8010e64:	b089      	sub	sp, #36	; 0x24
 8010e66:	af04      	add	r7, sp, #16
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	4608      	mov	r0, r1
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	461a      	mov	r2, r3
 8010e70:	4603      	mov	r3, r0
 8010e72:	70fb      	strb	r3, [r7, #3]
 8010e74:	460b      	mov	r3, r1
 8010e76:	70bb      	strb	r3, [r7, #2]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e80:	2300      	movs	r3, #0
 8010e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010e8a:	787c      	ldrb	r4, [r7, #1]
 8010e8c:	78ba      	ldrb	r2, [r7, #2]
 8010e8e:	78f9      	ldrb	r1, [r7, #3]
 8010e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e94:	9303      	str	r3, [sp, #12]
 8010e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e98:	9302      	str	r3, [sp, #8]
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	9301      	str	r3, [sp, #4]
 8010e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	4623      	mov	r3, r4
 8010ea6:	f7f2 fba3 	bl	80035f0 <HAL_HCD_HC_SubmitRequest>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010eae:	7bfb      	ldrb	r3, [r7, #15]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 f89d 	bl	8010ff0 <USBH_Get_USB_Status>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3714      	adds	r7, #20
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd90      	pop	{r4, r7, pc}

08010ec4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ed6:	78fa      	ldrb	r2, [r7, #3]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7f2 fe37 	bl	8003b4e <HAL_HCD_HC_GetURBState>
 8010ee0:	4603      	mov	r3, r0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d103      	bne.n	8010f08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010f00:	78fb      	ldrb	r3, [r7, #3]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 f8a0 	bl	8011048 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010f08:	20c8      	movs	r0, #200	; 0xc8
 8010f0a:	f7f0 feff 	bl	8001d0c <HAL_Delay>
  return USBH_OK;
 8010f0e:	2300      	movs	r3, #0
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	460b      	mov	r3, r1
 8010f22:	70fb      	strb	r3, [r7, #3]
 8010f24:	4613      	mov	r3, r2
 8010f26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010f30:	78fb      	ldrb	r3, [r7, #3]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	212c      	movs	r1, #44	; 0x2c
 8010f36:	fb01 f303 	mul.w	r3, r1, r3
 8010f3a:	4413      	add	r3, r2
 8010f3c:	333b      	adds	r3, #59	; 0x3b
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d009      	beq.n	8010f58 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010f44:	78fb      	ldrb	r3, [r7, #3]
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	212c      	movs	r1, #44	; 0x2c
 8010f4a:	fb01 f303 	mul.w	r3, r1, r3
 8010f4e:	4413      	add	r3, r2
 8010f50:	3354      	adds	r3, #84	; 0x54
 8010f52:	78ba      	ldrb	r2, [r7, #2]
 8010f54:	701a      	strb	r2, [r3, #0]
 8010f56:	e008      	b.n	8010f6a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010f58:	78fb      	ldrb	r3, [r7, #3]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	212c      	movs	r1, #44	; 0x2c
 8010f5e:	fb01 f303 	mul.w	r3, r1, r3
 8010f62:	4413      	add	r3, r2
 8010f64:	3355      	adds	r3, #85	; 0x55
 8010f66:	78ba      	ldrb	r2, [r7, #2]
 8010f68:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	460b      	mov	r3, r1
 8010f82:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f8e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010f90:	78fb      	ldrb	r3, [r7, #3]
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	212c      	movs	r1, #44	; 0x2c
 8010f96:	fb01 f303 	mul.w	r3, r1, r3
 8010f9a:	4413      	add	r3, r2
 8010f9c:	333b      	adds	r3, #59	; 0x3b
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d009      	beq.n	8010fb8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010fa4:	78fb      	ldrb	r3, [r7, #3]
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	212c      	movs	r1, #44	; 0x2c
 8010faa:	fb01 f303 	mul.w	r3, r1, r3
 8010fae:	4413      	add	r3, r2
 8010fb0:	3354      	adds	r3, #84	; 0x54
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	73fb      	strb	r3, [r7, #15]
 8010fb6:	e008      	b.n	8010fca <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010fb8:	78fb      	ldrb	r3, [r7, #3]
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	212c      	movs	r1, #44	; 0x2c
 8010fbe:	fb01 f303 	mul.w	r3, r1, r3
 8010fc2:	4413      	add	r3, r2
 8010fc4:	3355      	adds	r3, #85	; 0x55
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7f0 fe93 	bl	8001d0c <HAL_Delay>
}
 8010fe6:	bf00      	nop
 8010fe8:	3708      	adds	r7, #8
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
	...

08010ff0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ffe:	79fb      	ldrb	r3, [r7, #7]
 8011000:	2b03      	cmp	r3, #3
 8011002:	d817      	bhi.n	8011034 <USBH_Get_USB_Status+0x44>
 8011004:	a201      	add	r2, pc, #4	; (adr r2, 801100c <USBH_Get_USB_Status+0x1c>)
 8011006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100a:	bf00      	nop
 801100c:	0801101d 	.word	0x0801101d
 8011010:	08011023 	.word	0x08011023
 8011014:	08011029 	.word	0x08011029
 8011018:	0801102f 	.word	0x0801102f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	73fb      	strb	r3, [r7, #15]
    break;
 8011020:	e00b      	b.n	801103a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011022:	2302      	movs	r3, #2
 8011024:	73fb      	strb	r3, [r7, #15]
    break;
 8011026:	e008      	b.n	801103a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011028:	2301      	movs	r3, #1
 801102a:	73fb      	strb	r3, [r7, #15]
    break;
 801102c:	e005      	b.n	801103a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801102e:	2302      	movs	r3, #2
 8011030:	73fb      	strb	r3, [r7, #15]
    break;
 8011032:	e002      	b.n	801103a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011034:	2302      	movs	r3, #2
 8011036:	73fb      	strb	r3, [r7, #15]
    break;
 8011038:	bf00      	nop
  }
  return usb_status;
 801103a:	7bfb      	ldrb	r3, [r7, #15]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3714      	adds	r7, #20
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011056:	79fb      	ldrb	r3, [r7, #7]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801105c:	2301      	movs	r3, #1
 801105e:	73fb      	strb	r3, [r7, #15]
 8011060:	e001      	b.n	8011066 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011062:	2300      	movs	r3, #0
 8011064:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011066:	7bfb      	ldrb	r3, [r7, #15]
 8011068:	461a      	mov	r2, r3
 801106a:	2101      	movs	r1, #1
 801106c:	4803      	ldr	r0, [pc, #12]	; (801107c <MX_DriverVbusFS+0x34>)
 801106e:	f7f2 f979 	bl	8003364 <HAL_GPIO_WritePin>
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	40020800 	.word	0x40020800

08011080 <__errno>:
 8011080:	4b01      	ldr	r3, [pc, #4]	; (8011088 <__errno+0x8>)
 8011082:	6818      	ldr	r0, [r3, #0]
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	20000228 	.word	0x20000228

0801108c <__libc_init_array>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	4d0d      	ldr	r5, [pc, #52]	; (80110c4 <__libc_init_array+0x38>)
 8011090:	4c0d      	ldr	r4, [pc, #52]	; (80110c8 <__libc_init_array+0x3c>)
 8011092:	1b64      	subs	r4, r4, r5
 8011094:	10a4      	asrs	r4, r4, #2
 8011096:	2600      	movs	r6, #0
 8011098:	42a6      	cmp	r6, r4
 801109a:	d109      	bne.n	80110b0 <__libc_init_array+0x24>
 801109c:	4d0b      	ldr	r5, [pc, #44]	; (80110cc <__libc_init_array+0x40>)
 801109e:	4c0c      	ldr	r4, [pc, #48]	; (80110d0 <__libc_init_array+0x44>)
 80110a0:	f002 fedc 	bl	8013e5c <_init>
 80110a4:	1b64      	subs	r4, r4, r5
 80110a6:	10a4      	asrs	r4, r4, #2
 80110a8:	2600      	movs	r6, #0
 80110aa:	42a6      	cmp	r6, r4
 80110ac:	d105      	bne.n	80110ba <__libc_init_array+0x2e>
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80110b4:	4798      	blx	r3
 80110b6:	3601      	adds	r6, #1
 80110b8:	e7ee      	b.n	8011098 <__libc_init_array+0xc>
 80110ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80110be:	4798      	blx	r3
 80110c0:	3601      	adds	r6, #1
 80110c2:	e7f2      	b.n	80110aa <__libc_init_array+0x1e>
 80110c4:	0801540c 	.word	0x0801540c
 80110c8:	0801540c 	.word	0x0801540c
 80110cc:	0801540c 	.word	0x0801540c
 80110d0:	08015410 	.word	0x08015410

080110d4 <malloc>:
 80110d4:	4b02      	ldr	r3, [pc, #8]	; (80110e0 <malloc+0xc>)
 80110d6:	4601      	mov	r1, r0
 80110d8:	6818      	ldr	r0, [r3, #0]
 80110da:	f000 b88b 	b.w	80111f4 <_malloc_r>
 80110de:	bf00      	nop
 80110e0:	20000228 	.word	0x20000228

080110e4 <free>:
 80110e4:	4b02      	ldr	r3, [pc, #8]	; (80110f0 <free+0xc>)
 80110e6:	4601      	mov	r1, r0
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	f000 b833 	b.w	8011154 <_free_r>
 80110ee:	bf00      	nop
 80110f0:	20000228 	.word	0x20000228

080110f4 <memcpy>:
 80110f4:	440a      	add	r2, r1
 80110f6:	4291      	cmp	r1, r2
 80110f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80110fc:	d100      	bne.n	8011100 <memcpy+0xc>
 80110fe:	4770      	bx	lr
 8011100:	b510      	push	{r4, lr}
 8011102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011106:	f803 4f01 	strb.w	r4, [r3, #1]!
 801110a:	4291      	cmp	r1, r2
 801110c:	d1f9      	bne.n	8011102 <memcpy+0xe>
 801110e:	bd10      	pop	{r4, pc}

08011110 <memmove>:
 8011110:	4288      	cmp	r0, r1
 8011112:	b510      	push	{r4, lr}
 8011114:	eb01 0402 	add.w	r4, r1, r2
 8011118:	d902      	bls.n	8011120 <memmove+0x10>
 801111a:	4284      	cmp	r4, r0
 801111c:	4623      	mov	r3, r4
 801111e:	d807      	bhi.n	8011130 <memmove+0x20>
 8011120:	1e43      	subs	r3, r0, #1
 8011122:	42a1      	cmp	r1, r4
 8011124:	d008      	beq.n	8011138 <memmove+0x28>
 8011126:	f811 2b01 	ldrb.w	r2, [r1], #1
 801112a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801112e:	e7f8      	b.n	8011122 <memmove+0x12>
 8011130:	4402      	add	r2, r0
 8011132:	4601      	mov	r1, r0
 8011134:	428a      	cmp	r2, r1
 8011136:	d100      	bne.n	801113a <memmove+0x2a>
 8011138:	bd10      	pop	{r4, pc}
 801113a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801113e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011142:	e7f7      	b.n	8011134 <memmove+0x24>

08011144 <memset>:
 8011144:	4402      	add	r2, r0
 8011146:	4603      	mov	r3, r0
 8011148:	4293      	cmp	r3, r2
 801114a:	d100      	bne.n	801114e <memset+0xa>
 801114c:	4770      	bx	lr
 801114e:	f803 1b01 	strb.w	r1, [r3], #1
 8011152:	e7f9      	b.n	8011148 <memset+0x4>

08011154 <_free_r>:
 8011154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011156:	2900      	cmp	r1, #0
 8011158:	d048      	beq.n	80111ec <_free_r+0x98>
 801115a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115e:	9001      	str	r0, [sp, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	f1a1 0404 	sub.w	r4, r1, #4
 8011166:	bfb8      	it	lt
 8011168:	18e4      	addlt	r4, r4, r3
 801116a:	f001 fbd5 	bl	8012918 <__malloc_lock>
 801116e:	4a20      	ldr	r2, [pc, #128]	; (80111f0 <_free_r+0x9c>)
 8011170:	9801      	ldr	r0, [sp, #4]
 8011172:	6813      	ldr	r3, [r2, #0]
 8011174:	4615      	mov	r5, r2
 8011176:	b933      	cbnz	r3, 8011186 <_free_r+0x32>
 8011178:	6063      	str	r3, [r4, #4]
 801117a:	6014      	str	r4, [r2, #0]
 801117c:	b003      	add	sp, #12
 801117e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011182:	f001 bbcf 	b.w	8012924 <__malloc_unlock>
 8011186:	42a3      	cmp	r3, r4
 8011188:	d90b      	bls.n	80111a2 <_free_r+0x4e>
 801118a:	6821      	ldr	r1, [r4, #0]
 801118c:	1862      	adds	r2, r4, r1
 801118e:	4293      	cmp	r3, r2
 8011190:	bf04      	itt	eq
 8011192:	681a      	ldreq	r2, [r3, #0]
 8011194:	685b      	ldreq	r3, [r3, #4]
 8011196:	6063      	str	r3, [r4, #4]
 8011198:	bf04      	itt	eq
 801119a:	1852      	addeq	r2, r2, r1
 801119c:	6022      	streq	r2, [r4, #0]
 801119e:	602c      	str	r4, [r5, #0]
 80111a0:	e7ec      	b.n	801117c <_free_r+0x28>
 80111a2:	461a      	mov	r2, r3
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	b10b      	cbz	r3, 80111ac <_free_r+0x58>
 80111a8:	42a3      	cmp	r3, r4
 80111aa:	d9fa      	bls.n	80111a2 <_free_r+0x4e>
 80111ac:	6811      	ldr	r1, [r2, #0]
 80111ae:	1855      	adds	r5, r2, r1
 80111b0:	42a5      	cmp	r5, r4
 80111b2:	d10b      	bne.n	80111cc <_free_r+0x78>
 80111b4:	6824      	ldr	r4, [r4, #0]
 80111b6:	4421      	add	r1, r4
 80111b8:	1854      	adds	r4, r2, r1
 80111ba:	42a3      	cmp	r3, r4
 80111bc:	6011      	str	r1, [r2, #0]
 80111be:	d1dd      	bne.n	801117c <_free_r+0x28>
 80111c0:	681c      	ldr	r4, [r3, #0]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	6053      	str	r3, [r2, #4]
 80111c6:	4421      	add	r1, r4
 80111c8:	6011      	str	r1, [r2, #0]
 80111ca:	e7d7      	b.n	801117c <_free_r+0x28>
 80111cc:	d902      	bls.n	80111d4 <_free_r+0x80>
 80111ce:	230c      	movs	r3, #12
 80111d0:	6003      	str	r3, [r0, #0]
 80111d2:	e7d3      	b.n	801117c <_free_r+0x28>
 80111d4:	6825      	ldr	r5, [r4, #0]
 80111d6:	1961      	adds	r1, r4, r5
 80111d8:	428b      	cmp	r3, r1
 80111da:	bf04      	itt	eq
 80111dc:	6819      	ldreq	r1, [r3, #0]
 80111de:	685b      	ldreq	r3, [r3, #4]
 80111e0:	6063      	str	r3, [r4, #4]
 80111e2:	bf04      	itt	eq
 80111e4:	1949      	addeq	r1, r1, r5
 80111e6:	6021      	streq	r1, [r4, #0]
 80111e8:	6054      	str	r4, [r2, #4]
 80111ea:	e7c7      	b.n	801117c <_free_r+0x28>
 80111ec:	b003      	add	sp, #12
 80111ee:	bd30      	pop	{r4, r5, pc}
 80111f0:	20004034 	.word	0x20004034

080111f4 <_malloc_r>:
 80111f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f6:	1ccd      	adds	r5, r1, #3
 80111f8:	f025 0503 	bic.w	r5, r5, #3
 80111fc:	3508      	adds	r5, #8
 80111fe:	2d0c      	cmp	r5, #12
 8011200:	bf38      	it	cc
 8011202:	250c      	movcc	r5, #12
 8011204:	2d00      	cmp	r5, #0
 8011206:	4606      	mov	r6, r0
 8011208:	db01      	blt.n	801120e <_malloc_r+0x1a>
 801120a:	42a9      	cmp	r1, r5
 801120c:	d903      	bls.n	8011216 <_malloc_r+0x22>
 801120e:	230c      	movs	r3, #12
 8011210:	6033      	str	r3, [r6, #0]
 8011212:	2000      	movs	r0, #0
 8011214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011216:	f001 fb7f 	bl	8012918 <__malloc_lock>
 801121a:	4921      	ldr	r1, [pc, #132]	; (80112a0 <_malloc_r+0xac>)
 801121c:	680a      	ldr	r2, [r1, #0]
 801121e:	4614      	mov	r4, r2
 8011220:	b99c      	cbnz	r4, 801124a <_malloc_r+0x56>
 8011222:	4f20      	ldr	r7, [pc, #128]	; (80112a4 <_malloc_r+0xb0>)
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	b923      	cbnz	r3, 8011232 <_malloc_r+0x3e>
 8011228:	4621      	mov	r1, r4
 801122a:	4630      	mov	r0, r6
 801122c:	f000 fca6 	bl	8011b7c <_sbrk_r>
 8011230:	6038      	str	r0, [r7, #0]
 8011232:	4629      	mov	r1, r5
 8011234:	4630      	mov	r0, r6
 8011236:	f000 fca1 	bl	8011b7c <_sbrk_r>
 801123a:	1c43      	adds	r3, r0, #1
 801123c:	d123      	bne.n	8011286 <_malloc_r+0x92>
 801123e:	230c      	movs	r3, #12
 8011240:	6033      	str	r3, [r6, #0]
 8011242:	4630      	mov	r0, r6
 8011244:	f001 fb6e 	bl	8012924 <__malloc_unlock>
 8011248:	e7e3      	b.n	8011212 <_malloc_r+0x1e>
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	1b5b      	subs	r3, r3, r5
 801124e:	d417      	bmi.n	8011280 <_malloc_r+0x8c>
 8011250:	2b0b      	cmp	r3, #11
 8011252:	d903      	bls.n	801125c <_malloc_r+0x68>
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	441c      	add	r4, r3
 8011258:	6025      	str	r5, [r4, #0]
 801125a:	e004      	b.n	8011266 <_malloc_r+0x72>
 801125c:	6863      	ldr	r3, [r4, #4]
 801125e:	42a2      	cmp	r2, r4
 8011260:	bf0c      	ite	eq
 8011262:	600b      	streq	r3, [r1, #0]
 8011264:	6053      	strne	r3, [r2, #4]
 8011266:	4630      	mov	r0, r6
 8011268:	f001 fb5c 	bl	8012924 <__malloc_unlock>
 801126c:	f104 000b 	add.w	r0, r4, #11
 8011270:	1d23      	adds	r3, r4, #4
 8011272:	f020 0007 	bic.w	r0, r0, #7
 8011276:	1ac2      	subs	r2, r0, r3
 8011278:	d0cc      	beq.n	8011214 <_malloc_r+0x20>
 801127a:	1a1b      	subs	r3, r3, r0
 801127c:	50a3      	str	r3, [r4, r2]
 801127e:	e7c9      	b.n	8011214 <_malloc_r+0x20>
 8011280:	4622      	mov	r2, r4
 8011282:	6864      	ldr	r4, [r4, #4]
 8011284:	e7cc      	b.n	8011220 <_malloc_r+0x2c>
 8011286:	1cc4      	adds	r4, r0, #3
 8011288:	f024 0403 	bic.w	r4, r4, #3
 801128c:	42a0      	cmp	r0, r4
 801128e:	d0e3      	beq.n	8011258 <_malloc_r+0x64>
 8011290:	1a21      	subs	r1, r4, r0
 8011292:	4630      	mov	r0, r6
 8011294:	f000 fc72 	bl	8011b7c <_sbrk_r>
 8011298:	3001      	adds	r0, #1
 801129a:	d1dd      	bne.n	8011258 <_malloc_r+0x64>
 801129c:	e7cf      	b.n	801123e <_malloc_r+0x4a>
 801129e:	bf00      	nop
 80112a0:	20004034 	.word	0x20004034
 80112a4:	20004038 	.word	0x20004038

080112a8 <__cvt>:
 80112a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112ac:	ec55 4b10 	vmov	r4, r5, d0
 80112b0:	2d00      	cmp	r5, #0
 80112b2:	460e      	mov	r6, r1
 80112b4:	4619      	mov	r1, r3
 80112b6:	462b      	mov	r3, r5
 80112b8:	bfbb      	ittet	lt
 80112ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80112be:	461d      	movlt	r5, r3
 80112c0:	2300      	movge	r3, #0
 80112c2:	232d      	movlt	r3, #45	; 0x2d
 80112c4:	700b      	strb	r3, [r1, #0]
 80112c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80112cc:	4691      	mov	r9, r2
 80112ce:	f023 0820 	bic.w	r8, r3, #32
 80112d2:	bfbc      	itt	lt
 80112d4:	4622      	movlt	r2, r4
 80112d6:	4614      	movlt	r4, r2
 80112d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80112dc:	d005      	beq.n	80112ea <__cvt+0x42>
 80112de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80112e2:	d100      	bne.n	80112e6 <__cvt+0x3e>
 80112e4:	3601      	adds	r6, #1
 80112e6:	2102      	movs	r1, #2
 80112e8:	e000      	b.n	80112ec <__cvt+0x44>
 80112ea:	2103      	movs	r1, #3
 80112ec:	ab03      	add	r3, sp, #12
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	ab02      	add	r3, sp, #8
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	ec45 4b10 	vmov	d0, r4, r5
 80112f8:	4653      	mov	r3, sl
 80112fa:	4632      	mov	r2, r6
 80112fc:	f000 fd1c 	bl	8011d38 <_dtoa_r>
 8011300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011304:	4607      	mov	r7, r0
 8011306:	d102      	bne.n	801130e <__cvt+0x66>
 8011308:	f019 0f01 	tst.w	r9, #1
 801130c:	d022      	beq.n	8011354 <__cvt+0xac>
 801130e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011312:	eb07 0906 	add.w	r9, r7, r6
 8011316:	d110      	bne.n	801133a <__cvt+0x92>
 8011318:	783b      	ldrb	r3, [r7, #0]
 801131a:	2b30      	cmp	r3, #48	; 0x30
 801131c:	d10a      	bne.n	8011334 <__cvt+0x8c>
 801131e:	2200      	movs	r2, #0
 8011320:	2300      	movs	r3, #0
 8011322:	4620      	mov	r0, r4
 8011324:	4629      	mov	r1, r5
 8011326:	f7ef fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 801132a:	b918      	cbnz	r0, 8011334 <__cvt+0x8c>
 801132c:	f1c6 0601 	rsb	r6, r6, #1
 8011330:	f8ca 6000 	str.w	r6, [sl]
 8011334:	f8da 3000 	ldr.w	r3, [sl]
 8011338:	4499      	add	r9, r3
 801133a:	2200      	movs	r2, #0
 801133c:	2300      	movs	r3, #0
 801133e:	4620      	mov	r0, r4
 8011340:	4629      	mov	r1, r5
 8011342:	f7ef fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011346:	b108      	cbz	r0, 801134c <__cvt+0xa4>
 8011348:	f8cd 900c 	str.w	r9, [sp, #12]
 801134c:	2230      	movs	r2, #48	; 0x30
 801134e:	9b03      	ldr	r3, [sp, #12]
 8011350:	454b      	cmp	r3, r9
 8011352:	d307      	bcc.n	8011364 <__cvt+0xbc>
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011358:	1bdb      	subs	r3, r3, r7
 801135a:	4638      	mov	r0, r7
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	b004      	add	sp, #16
 8011360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011364:	1c59      	adds	r1, r3, #1
 8011366:	9103      	str	r1, [sp, #12]
 8011368:	701a      	strb	r2, [r3, #0]
 801136a:	e7f0      	b.n	801134e <__cvt+0xa6>

0801136c <__exponent>:
 801136c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801136e:	4603      	mov	r3, r0
 8011370:	2900      	cmp	r1, #0
 8011372:	bfb8      	it	lt
 8011374:	4249      	neglt	r1, r1
 8011376:	f803 2b02 	strb.w	r2, [r3], #2
 801137a:	bfb4      	ite	lt
 801137c:	222d      	movlt	r2, #45	; 0x2d
 801137e:	222b      	movge	r2, #43	; 0x2b
 8011380:	2909      	cmp	r1, #9
 8011382:	7042      	strb	r2, [r0, #1]
 8011384:	dd2a      	ble.n	80113dc <__exponent+0x70>
 8011386:	f10d 0407 	add.w	r4, sp, #7
 801138a:	46a4      	mov	ip, r4
 801138c:	270a      	movs	r7, #10
 801138e:	46a6      	mov	lr, r4
 8011390:	460a      	mov	r2, r1
 8011392:	fb91 f6f7 	sdiv	r6, r1, r7
 8011396:	fb07 1516 	mls	r5, r7, r6, r1
 801139a:	3530      	adds	r5, #48	; 0x30
 801139c:	2a63      	cmp	r2, #99	; 0x63
 801139e:	f104 34ff 	add.w	r4, r4, #4294967295
 80113a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80113a6:	4631      	mov	r1, r6
 80113a8:	dcf1      	bgt.n	801138e <__exponent+0x22>
 80113aa:	3130      	adds	r1, #48	; 0x30
 80113ac:	f1ae 0502 	sub.w	r5, lr, #2
 80113b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80113b4:	1c44      	adds	r4, r0, #1
 80113b6:	4629      	mov	r1, r5
 80113b8:	4561      	cmp	r1, ip
 80113ba:	d30a      	bcc.n	80113d2 <__exponent+0x66>
 80113bc:	f10d 0209 	add.w	r2, sp, #9
 80113c0:	eba2 020e 	sub.w	r2, r2, lr
 80113c4:	4565      	cmp	r5, ip
 80113c6:	bf88      	it	hi
 80113c8:	2200      	movhi	r2, #0
 80113ca:	4413      	add	r3, r2
 80113cc:	1a18      	subs	r0, r3, r0
 80113ce:	b003      	add	sp, #12
 80113d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113da:	e7ed      	b.n	80113b8 <__exponent+0x4c>
 80113dc:	2330      	movs	r3, #48	; 0x30
 80113de:	3130      	adds	r1, #48	; 0x30
 80113e0:	7083      	strb	r3, [r0, #2]
 80113e2:	70c1      	strb	r1, [r0, #3]
 80113e4:	1d03      	adds	r3, r0, #4
 80113e6:	e7f1      	b.n	80113cc <__exponent+0x60>

080113e8 <_printf_float>:
 80113e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ec:	ed2d 8b02 	vpush	{d8}
 80113f0:	b08d      	sub	sp, #52	; 0x34
 80113f2:	460c      	mov	r4, r1
 80113f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80113f8:	4616      	mov	r6, r2
 80113fa:	461f      	mov	r7, r3
 80113fc:	4605      	mov	r5, r0
 80113fe:	f001 fa87 	bl	8012910 <_localeconv_r>
 8011402:	f8d0 a000 	ldr.w	sl, [r0]
 8011406:	4650      	mov	r0, sl
 8011408:	f7ee fee2 	bl	80001d0 <strlen>
 801140c:	2300      	movs	r3, #0
 801140e:	930a      	str	r3, [sp, #40]	; 0x28
 8011410:	6823      	ldr	r3, [r4, #0]
 8011412:	9305      	str	r3, [sp, #20]
 8011414:	f8d8 3000 	ldr.w	r3, [r8]
 8011418:	f894 b018 	ldrb.w	fp, [r4, #24]
 801141c:	3307      	adds	r3, #7
 801141e:	f023 0307 	bic.w	r3, r3, #7
 8011422:	f103 0208 	add.w	r2, r3, #8
 8011426:	f8c8 2000 	str.w	r2, [r8]
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011432:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011436:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801143a:	9307      	str	r3, [sp, #28]
 801143c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011440:	ee08 0a10 	vmov	s16, r0
 8011444:	4b9f      	ldr	r3, [pc, #636]	; (80116c4 <_printf_float+0x2dc>)
 8011446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801144a:	f04f 32ff 	mov.w	r2, #4294967295
 801144e:	f7ef fb6d 	bl	8000b2c <__aeabi_dcmpun>
 8011452:	bb88      	cbnz	r0, 80114b8 <_printf_float+0xd0>
 8011454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011458:	4b9a      	ldr	r3, [pc, #616]	; (80116c4 <_printf_float+0x2dc>)
 801145a:	f04f 32ff 	mov.w	r2, #4294967295
 801145e:	f7ef fb47 	bl	8000af0 <__aeabi_dcmple>
 8011462:	bb48      	cbnz	r0, 80114b8 <_printf_float+0xd0>
 8011464:	2200      	movs	r2, #0
 8011466:	2300      	movs	r3, #0
 8011468:	4640      	mov	r0, r8
 801146a:	4649      	mov	r1, r9
 801146c:	f7ef fb36 	bl	8000adc <__aeabi_dcmplt>
 8011470:	b110      	cbz	r0, 8011478 <_printf_float+0x90>
 8011472:	232d      	movs	r3, #45	; 0x2d
 8011474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011478:	4b93      	ldr	r3, [pc, #588]	; (80116c8 <_printf_float+0x2e0>)
 801147a:	4894      	ldr	r0, [pc, #592]	; (80116cc <_printf_float+0x2e4>)
 801147c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011480:	bf94      	ite	ls
 8011482:	4698      	movls	r8, r3
 8011484:	4680      	movhi	r8, r0
 8011486:	2303      	movs	r3, #3
 8011488:	6123      	str	r3, [r4, #16]
 801148a:	9b05      	ldr	r3, [sp, #20]
 801148c:	f023 0204 	bic.w	r2, r3, #4
 8011490:	6022      	str	r2, [r4, #0]
 8011492:	f04f 0900 	mov.w	r9, #0
 8011496:	9700      	str	r7, [sp, #0]
 8011498:	4633      	mov	r3, r6
 801149a:	aa0b      	add	r2, sp, #44	; 0x2c
 801149c:	4621      	mov	r1, r4
 801149e:	4628      	mov	r0, r5
 80114a0:	f000 f9d8 	bl	8011854 <_printf_common>
 80114a4:	3001      	adds	r0, #1
 80114a6:	f040 8090 	bne.w	80115ca <_printf_float+0x1e2>
 80114aa:	f04f 30ff 	mov.w	r0, #4294967295
 80114ae:	b00d      	add	sp, #52	; 0x34
 80114b0:	ecbd 8b02 	vpop	{d8}
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	4642      	mov	r2, r8
 80114ba:	464b      	mov	r3, r9
 80114bc:	4640      	mov	r0, r8
 80114be:	4649      	mov	r1, r9
 80114c0:	f7ef fb34 	bl	8000b2c <__aeabi_dcmpun>
 80114c4:	b140      	cbz	r0, 80114d8 <_printf_float+0xf0>
 80114c6:	464b      	mov	r3, r9
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfbc      	itt	lt
 80114cc:	232d      	movlt	r3, #45	; 0x2d
 80114ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80114d2:	487f      	ldr	r0, [pc, #508]	; (80116d0 <_printf_float+0x2e8>)
 80114d4:	4b7f      	ldr	r3, [pc, #508]	; (80116d4 <_printf_float+0x2ec>)
 80114d6:	e7d1      	b.n	801147c <_printf_float+0x94>
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80114de:	9206      	str	r2, [sp, #24]
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	d13f      	bne.n	8011564 <_printf_float+0x17c>
 80114e4:	2306      	movs	r3, #6
 80114e6:	6063      	str	r3, [r4, #4]
 80114e8:	9b05      	ldr	r3, [sp, #20]
 80114ea:	6861      	ldr	r1, [r4, #4]
 80114ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80114f0:	2300      	movs	r3, #0
 80114f2:	9303      	str	r3, [sp, #12]
 80114f4:	ab0a      	add	r3, sp, #40	; 0x28
 80114f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80114fa:	ab09      	add	r3, sp, #36	; 0x24
 80114fc:	ec49 8b10 	vmov	d0, r8, r9
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	6022      	str	r2, [r4, #0]
 8011504:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011508:	4628      	mov	r0, r5
 801150a:	f7ff fecd 	bl	80112a8 <__cvt>
 801150e:	9b06      	ldr	r3, [sp, #24]
 8011510:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011512:	2b47      	cmp	r3, #71	; 0x47
 8011514:	4680      	mov	r8, r0
 8011516:	d108      	bne.n	801152a <_printf_float+0x142>
 8011518:	1cc8      	adds	r0, r1, #3
 801151a:	db02      	blt.n	8011522 <_printf_float+0x13a>
 801151c:	6863      	ldr	r3, [r4, #4]
 801151e:	4299      	cmp	r1, r3
 8011520:	dd41      	ble.n	80115a6 <_printf_float+0x1be>
 8011522:	f1ab 0b02 	sub.w	fp, fp, #2
 8011526:	fa5f fb8b 	uxtb.w	fp, fp
 801152a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801152e:	d820      	bhi.n	8011572 <_printf_float+0x18a>
 8011530:	3901      	subs	r1, #1
 8011532:	465a      	mov	r2, fp
 8011534:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011538:	9109      	str	r1, [sp, #36]	; 0x24
 801153a:	f7ff ff17 	bl	801136c <__exponent>
 801153e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011540:	1813      	adds	r3, r2, r0
 8011542:	2a01      	cmp	r2, #1
 8011544:	4681      	mov	r9, r0
 8011546:	6123      	str	r3, [r4, #16]
 8011548:	dc02      	bgt.n	8011550 <_printf_float+0x168>
 801154a:	6822      	ldr	r2, [r4, #0]
 801154c:	07d2      	lsls	r2, r2, #31
 801154e:	d501      	bpl.n	8011554 <_printf_float+0x16c>
 8011550:	3301      	adds	r3, #1
 8011552:	6123      	str	r3, [r4, #16]
 8011554:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011558:	2b00      	cmp	r3, #0
 801155a:	d09c      	beq.n	8011496 <_printf_float+0xae>
 801155c:	232d      	movs	r3, #45	; 0x2d
 801155e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011562:	e798      	b.n	8011496 <_printf_float+0xae>
 8011564:	9a06      	ldr	r2, [sp, #24]
 8011566:	2a47      	cmp	r2, #71	; 0x47
 8011568:	d1be      	bne.n	80114e8 <_printf_float+0x100>
 801156a:	2b00      	cmp	r3, #0
 801156c:	d1bc      	bne.n	80114e8 <_printf_float+0x100>
 801156e:	2301      	movs	r3, #1
 8011570:	e7b9      	b.n	80114e6 <_printf_float+0xfe>
 8011572:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011576:	d118      	bne.n	80115aa <_printf_float+0x1c2>
 8011578:	2900      	cmp	r1, #0
 801157a:	6863      	ldr	r3, [r4, #4]
 801157c:	dd0b      	ble.n	8011596 <_printf_float+0x1ae>
 801157e:	6121      	str	r1, [r4, #16]
 8011580:	b913      	cbnz	r3, 8011588 <_printf_float+0x1a0>
 8011582:	6822      	ldr	r2, [r4, #0]
 8011584:	07d0      	lsls	r0, r2, #31
 8011586:	d502      	bpl.n	801158e <_printf_float+0x1a6>
 8011588:	3301      	adds	r3, #1
 801158a:	440b      	add	r3, r1
 801158c:	6123      	str	r3, [r4, #16]
 801158e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011590:	f04f 0900 	mov.w	r9, #0
 8011594:	e7de      	b.n	8011554 <_printf_float+0x16c>
 8011596:	b913      	cbnz	r3, 801159e <_printf_float+0x1b6>
 8011598:	6822      	ldr	r2, [r4, #0]
 801159a:	07d2      	lsls	r2, r2, #31
 801159c:	d501      	bpl.n	80115a2 <_printf_float+0x1ba>
 801159e:	3302      	adds	r3, #2
 80115a0:	e7f4      	b.n	801158c <_printf_float+0x1a4>
 80115a2:	2301      	movs	r3, #1
 80115a4:	e7f2      	b.n	801158c <_printf_float+0x1a4>
 80115a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80115aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ac:	4299      	cmp	r1, r3
 80115ae:	db05      	blt.n	80115bc <_printf_float+0x1d4>
 80115b0:	6823      	ldr	r3, [r4, #0]
 80115b2:	6121      	str	r1, [r4, #16]
 80115b4:	07d8      	lsls	r0, r3, #31
 80115b6:	d5ea      	bpl.n	801158e <_printf_float+0x1a6>
 80115b8:	1c4b      	adds	r3, r1, #1
 80115ba:	e7e7      	b.n	801158c <_printf_float+0x1a4>
 80115bc:	2900      	cmp	r1, #0
 80115be:	bfd4      	ite	le
 80115c0:	f1c1 0202 	rsble	r2, r1, #2
 80115c4:	2201      	movgt	r2, #1
 80115c6:	4413      	add	r3, r2
 80115c8:	e7e0      	b.n	801158c <_printf_float+0x1a4>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	055a      	lsls	r2, r3, #21
 80115ce:	d407      	bmi.n	80115e0 <_printf_float+0x1f8>
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	4642      	mov	r2, r8
 80115d4:	4631      	mov	r1, r6
 80115d6:	4628      	mov	r0, r5
 80115d8:	47b8      	blx	r7
 80115da:	3001      	adds	r0, #1
 80115dc:	d12c      	bne.n	8011638 <_printf_float+0x250>
 80115de:	e764      	b.n	80114aa <_printf_float+0xc2>
 80115e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80115e4:	f240 80e0 	bls.w	80117a8 <_printf_float+0x3c0>
 80115e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80115ec:	2200      	movs	r2, #0
 80115ee:	2300      	movs	r3, #0
 80115f0:	f7ef fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d034      	beq.n	8011662 <_printf_float+0x27a>
 80115f8:	4a37      	ldr	r2, [pc, #220]	; (80116d8 <_printf_float+0x2f0>)
 80115fa:	2301      	movs	r3, #1
 80115fc:	4631      	mov	r1, r6
 80115fe:	4628      	mov	r0, r5
 8011600:	47b8      	blx	r7
 8011602:	3001      	adds	r0, #1
 8011604:	f43f af51 	beq.w	80114aa <_printf_float+0xc2>
 8011608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801160c:	429a      	cmp	r2, r3
 801160e:	db02      	blt.n	8011616 <_printf_float+0x22e>
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	07d8      	lsls	r0, r3, #31
 8011614:	d510      	bpl.n	8011638 <_printf_float+0x250>
 8011616:	ee18 3a10 	vmov	r3, s16
 801161a:	4652      	mov	r2, sl
 801161c:	4631      	mov	r1, r6
 801161e:	4628      	mov	r0, r5
 8011620:	47b8      	blx	r7
 8011622:	3001      	adds	r0, #1
 8011624:	f43f af41 	beq.w	80114aa <_printf_float+0xc2>
 8011628:	f04f 0800 	mov.w	r8, #0
 801162c:	f104 091a 	add.w	r9, r4, #26
 8011630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011632:	3b01      	subs	r3, #1
 8011634:	4543      	cmp	r3, r8
 8011636:	dc09      	bgt.n	801164c <_printf_float+0x264>
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	079b      	lsls	r3, r3, #30
 801163c:	f100 8105 	bmi.w	801184a <_printf_float+0x462>
 8011640:	68e0      	ldr	r0, [r4, #12]
 8011642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011644:	4298      	cmp	r0, r3
 8011646:	bfb8      	it	lt
 8011648:	4618      	movlt	r0, r3
 801164a:	e730      	b.n	80114ae <_printf_float+0xc6>
 801164c:	2301      	movs	r3, #1
 801164e:	464a      	mov	r2, r9
 8011650:	4631      	mov	r1, r6
 8011652:	4628      	mov	r0, r5
 8011654:	47b8      	blx	r7
 8011656:	3001      	adds	r0, #1
 8011658:	f43f af27 	beq.w	80114aa <_printf_float+0xc2>
 801165c:	f108 0801 	add.w	r8, r8, #1
 8011660:	e7e6      	b.n	8011630 <_printf_float+0x248>
 8011662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011664:	2b00      	cmp	r3, #0
 8011666:	dc39      	bgt.n	80116dc <_printf_float+0x2f4>
 8011668:	4a1b      	ldr	r2, [pc, #108]	; (80116d8 <_printf_float+0x2f0>)
 801166a:	2301      	movs	r3, #1
 801166c:	4631      	mov	r1, r6
 801166e:	4628      	mov	r0, r5
 8011670:	47b8      	blx	r7
 8011672:	3001      	adds	r0, #1
 8011674:	f43f af19 	beq.w	80114aa <_printf_float+0xc2>
 8011678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801167c:	4313      	orrs	r3, r2
 801167e:	d102      	bne.n	8011686 <_printf_float+0x29e>
 8011680:	6823      	ldr	r3, [r4, #0]
 8011682:	07d9      	lsls	r1, r3, #31
 8011684:	d5d8      	bpl.n	8011638 <_printf_float+0x250>
 8011686:	ee18 3a10 	vmov	r3, s16
 801168a:	4652      	mov	r2, sl
 801168c:	4631      	mov	r1, r6
 801168e:	4628      	mov	r0, r5
 8011690:	47b8      	blx	r7
 8011692:	3001      	adds	r0, #1
 8011694:	f43f af09 	beq.w	80114aa <_printf_float+0xc2>
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	f104 0a1a 	add.w	sl, r4, #26
 80116a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a2:	425b      	negs	r3, r3
 80116a4:	454b      	cmp	r3, r9
 80116a6:	dc01      	bgt.n	80116ac <_printf_float+0x2c4>
 80116a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116aa:	e792      	b.n	80115d2 <_printf_float+0x1ea>
 80116ac:	2301      	movs	r3, #1
 80116ae:	4652      	mov	r2, sl
 80116b0:	4631      	mov	r1, r6
 80116b2:	4628      	mov	r0, r5
 80116b4:	47b8      	blx	r7
 80116b6:	3001      	adds	r0, #1
 80116b8:	f43f aef7 	beq.w	80114aa <_printf_float+0xc2>
 80116bc:	f109 0901 	add.w	r9, r9, #1
 80116c0:	e7ee      	b.n	80116a0 <_printf_float+0x2b8>
 80116c2:	bf00      	nop
 80116c4:	7fefffff 	.word	0x7fefffff
 80116c8:	08015028 	.word	0x08015028
 80116cc:	0801502c 	.word	0x0801502c
 80116d0:	08015034 	.word	0x08015034
 80116d4:	08015030 	.word	0x08015030
 80116d8:	08015038 	.word	0x08015038
 80116dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116e0:	429a      	cmp	r2, r3
 80116e2:	bfa8      	it	ge
 80116e4:	461a      	movge	r2, r3
 80116e6:	2a00      	cmp	r2, #0
 80116e8:	4691      	mov	r9, r2
 80116ea:	dc37      	bgt.n	801175c <_printf_float+0x374>
 80116ec:	f04f 0b00 	mov.w	fp, #0
 80116f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116f4:	f104 021a 	add.w	r2, r4, #26
 80116f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80116fa:	9305      	str	r3, [sp, #20]
 80116fc:	eba3 0309 	sub.w	r3, r3, r9
 8011700:	455b      	cmp	r3, fp
 8011702:	dc33      	bgt.n	801176c <_printf_float+0x384>
 8011704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011708:	429a      	cmp	r2, r3
 801170a:	db3b      	blt.n	8011784 <_printf_float+0x39c>
 801170c:	6823      	ldr	r3, [r4, #0]
 801170e:	07da      	lsls	r2, r3, #31
 8011710:	d438      	bmi.n	8011784 <_printf_float+0x39c>
 8011712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011714:	9b05      	ldr	r3, [sp, #20]
 8011716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	eba2 0901 	sub.w	r9, r2, r1
 801171e:	4599      	cmp	r9, r3
 8011720:	bfa8      	it	ge
 8011722:	4699      	movge	r9, r3
 8011724:	f1b9 0f00 	cmp.w	r9, #0
 8011728:	dc35      	bgt.n	8011796 <_printf_float+0x3ae>
 801172a:	f04f 0800 	mov.w	r8, #0
 801172e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011732:	f104 0a1a 	add.w	sl, r4, #26
 8011736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801173a:	1a9b      	subs	r3, r3, r2
 801173c:	eba3 0309 	sub.w	r3, r3, r9
 8011740:	4543      	cmp	r3, r8
 8011742:	f77f af79 	ble.w	8011638 <_printf_float+0x250>
 8011746:	2301      	movs	r3, #1
 8011748:	4652      	mov	r2, sl
 801174a:	4631      	mov	r1, r6
 801174c:	4628      	mov	r0, r5
 801174e:	47b8      	blx	r7
 8011750:	3001      	adds	r0, #1
 8011752:	f43f aeaa 	beq.w	80114aa <_printf_float+0xc2>
 8011756:	f108 0801 	add.w	r8, r8, #1
 801175a:	e7ec      	b.n	8011736 <_printf_float+0x34e>
 801175c:	4613      	mov	r3, r2
 801175e:	4631      	mov	r1, r6
 8011760:	4642      	mov	r2, r8
 8011762:	4628      	mov	r0, r5
 8011764:	47b8      	blx	r7
 8011766:	3001      	adds	r0, #1
 8011768:	d1c0      	bne.n	80116ec <_printf_float+0x304>
 801176a:	e69e      	b.n	80114aa <_printf_float+0xc2>
 801176c:	2301      	movs	r3, #1
 801176e:	4631      	mov	r1, r6
 8011770:	4628      	mov	r0, r5
 8011772:	9205      	str	r2, [sp, #20]
 8011774:	47b8      	blx	r7
 8011776:	3001      	adds	r0, #1
 8011778:	f43f ae97 	beq.w	80114aa <_printf_float+0xc2>
 801177c:	9a05      	ldr	r2, [sp, #20]
 801177e:	f10b 0b01 	add.w	fp, fp, #1
 8011782:	e7b9      	b.n	80116f8 <_printf_float+0x310>
 8011784:	ee18 3a10 	vmov	r3, s16
 8011788:	4652      	mov	r2, sl
 801178a:	4631      	mov	r1, r6
 801178c:	4628      	mov	r0, r5
 801178e:	47b8      	blx	r7
 8011790:	3001      	adds	r0, #1
 8011792:	d1be      	bne.n	8011712 <_printf_float+0x32a>
 8011794:	e689      	b.n	80114aa <_printf_float+0xc2>
 8011796:	9a05      	ldr	r2, [sp, #20]
 8011798:	464b      	mov	r3, r9
 801179a:	4442      	add	r2, r8
 801179c:	4631      	mov	r1, r6
 801179e:	4628      	mov	r0, r5
 80117a0:	47b8      	blx	r7
 80117a2:	3001      	adds	r0, #1
 80117a4:	d1c1      	bne.n	801172a <_printf_float+0x342>
 80117a6:	e680      	b.n	80114aa <_printf_float+0xc2>
 80117a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117aa:	2a01      	cmp	r2, #1
 80117ac:	dc01      	bgt.n	80117b2 <_printf_float+0x3ca>
 80117ae:	07db      	lsls	r3, r3, #31
 80117b0:	d538      	bpl.n	8011824 <_printf_float+0x43c>
 80117b2:	2301      	movs	r3, #1
 80117b4:	4642      	mov	r2, r8
 80117b6:	4631      	mov	r1, r6
 80117b8:	4628      	mov	r0, r5
 80117ba:	47b8      	blx	r7
 80117bc:	3001      	adds	r0, #1
 80117be:	f43f ae74 	beq.w	80114aa <_printf_float+0xc2>
 80117c2:	ee18 3a10 	vmov	r3, s16
 80117c6:	4652      	mov	r2, sl
 80117c8:	4631      	mov	r1, r6
 80117ca:	4628      	mov	r0, r5
 80117cc:	47b8      	blx	r7
 80117ce:	3001      	adds	r0, #1
 80117d0:	f43f ae6b 	beq.w	80114aa <_printf_float+0xc2>
 80117d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117d8:	2200      	movs	r2, #0
 80117da:	2300      	movs	r3, #0
 80117dc:	f7ef f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80117e0:	b9d8      	cbnz	r0, 801181a <_printf_float+0x432>
 80117e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117e4:	f108 0201 	add.w	r2, r8, #1
 80117e8:	3b01      	subs	r3, #1
 80117ea:	4631      	mov	r1, r6
 80117ec:	4628      	mov	r0, r5
 80117ee:	47b8      	blx	r7
 80117f0:	3001      	adds	r0, #1
 80117f2:	d10e      	bne.n	8011812 <_printf_float+0x42a>
 80117f4:	e659      	b.n	80114aa <_printf_float+0xc2>
 80117f6:	2301      	movs	r3, #1
 80117f8:	4652      	mov	r2, sl
 80117fa:	4631      	mov	r1, r6
 80117fc:	4628      	mov	r0, r5
 80117fe:	47b8      	blx	r7
 8011800:	3001      	adds	r0, #1
 8011802:	f43f ae52 	beq.w	80114aa <_printf_float+0xc2>
 8011806:	f108 0801 	add.w	r8, r8, #1
 801180a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801180c:	3b01      	subs	r3, #1
 801180e:	4543      	cmp	r3, r8
 8011810:	dcf1      	bgt.n	80117f6 <_printf_float+0x40e>
 8011812:	464b      	mov	r3, r9
 8011814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011818:	e6dc      	b.n	80115d4 <_printf_float+0x1ec>
 801181a:	f04f 0800 	mov.w	r8, #0
 801181e:	f104 0a1a 	add.w	sl, r4, #26
 8011822:	e7f2      	b.n	801180a <_printf_float+0x422>
 8011824:	2301      	movs	r3, #1
 8011826:	4642      	mov	r2, r8
 8011828:	e7df      	b.n	80117ea <_printf_float+0x402>
 801182a:	2301      	movs	r3, #1
 801182c:	464a      	mov	r2, r9
 801182e:	4631      	mov	r1, r6
 8011830:	4628      	mov	r0, r5
 8011832:	47b8      	blx	r7
 8011834:	3001      	adds	r0, #1
 8011836:	f43f ae38 	beq.w	80114aa <_printf_float+0xc2>
 801183a:	f108 0801 	add.w	r8, r8, #1
 801183e:	68e3      	ldr	r3, [r4, #12]
 8011840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011842:	1a5b      	subs	r3, r3, r1
 8011844:	4543      	cmp	r3, r8
 8011846:	dcf0      	bgt.n	801182a <_printf_float+0x442>
 8011848:	e6fa      	b.n	8011640 <_printf_float+0x258>
 801184a:	f04f 0800 	mov.w	r8, #0
 801184e:	f104 0919 	add.w	r9, r4, #25
 8011852:	e7f4      	b.n	801183e <_printf_float+0x456>

08011854 <_printf_common>:
 8011854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011858:	4616      	mov	r6, r2
 801185a:	4699      	mov	r9, r3
 801185c:	688a      	ldr	r2, [r1, #8]
 801185e:	690b      	ldr	r3, [r1, #16]
 8011860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011864:	4293      	cmp	r3, r2
 8011866:	bfb8      	it	lt
 8011868:	4613      	movlt	r3, r2
 801186a:	6033      	str	r3, [r6, #0]
 801186c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011870:	4607      	mov	r7, r0
 8011872:	460c      	mov	r4, r1
 8011874:	b10a      	cbz	r2, 801187a <_printf_common+0x26>
 8011876:	3301      	adds	r3, #1
 8011878:	6033      	str	r3, [r6, #0]
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	0699      	lsls	r1, r3, #26
 801187e:	bf42      	ittt	mi
 8011880:	6833      	ldrmi	r3, [r6, #0]
 8011882:	3302      	addmi	r3, #2
 8011884:	6033      	strmi	r3, [r6, #0]
 8011886:	6825      	ldr	r5, [r4, #0]
 8011888:	f015 0506 	ands.w	r5, r5, #6
 801188c:	d106      	bne.n	801189c <_printf_common+0x48>
 801188e:	f104 0a19 	add.w	sl, r4, #25
 8011892:	68e3      	ldr	r3, [r4, #12]
 8011894:	6832      	ldr	r2, [r6, #0]
 8011896:	1a9b      	subs	r3, r3, r2
 8011898:	42ab      	cmp	r3, r5
 801189a:	dc26      	bgt.n	80118ea <_printf_common+0x96>
 801189c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118a0:	1e13      	subs	r3, r2, #0
 80118a2:	6822      	ldr	r2, [r4, #0]
 80118a4:	bf18      	it	ne
 80118a6:	2301      	movne	r3, #1
 80118a8:	0692      	lsls	r2, r2, #26
 80118aa:	d42b      	bmi.n	8011904 <_printf_common+0xb0>
 80118ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118b0:	4649      	mov	r1, r9
 80118b2:	4638      	mov	r0, r7
 80118b4:	47c0      	blx	r8
 80118b6:	3001      	adds	r0, #1
 80118b8:	d01e      	beq.n	80118f8 <_printf_common+0xa4>
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	68e5      	ldr	r5, [r4, #12]
 80118be:	6832      	ldr	r2, [r6, #0]
 80118c0:	f003 0306 	and.w	r3, r3, #6
 80118c4:	2b04      	cmp	r3, #4
 80118c6:	bf08      	it	eq
 80118c8:	1aad      	subeq	r5, r5, r2
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	6922      	ldr	r2, [r4, #16]
 80118ce:	bf0c      	ite	eq
 80118d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118d4:	2500      	movne	r5, #0
 80118d6:	4293      	cmp	r3, r2
 80118d8:	bfc4      	itt	gt
 80118da:	1a9b      	subgt	r3, r3, r2
 80118dc:	18ed      	addgt	r5, r5, r3
 80118de:	2600      	movs	r6, #0
 80118e0:	341a      	adds	r4, #26
 80118e2:	42b5      	cmp	r5, r6
 80118e4:	d11a      	bne.n	801191c <_printf_common+0xc8>
 80118e6:	2000      	movs	r0, #0
 80118e8:	e008      	b.n	80118fc <_printf_common+0xa8>
 80118ea:	2301      	movs	r3, #1
 80118ec:	4652      	mov	r2, sl
 80118ee:	4649      	mov	r1, r9
 80118f0:	4638      	mov	r0, r7
 80118f2:	47c0      	blx	r8
 80118f4:	3001      	adds	r0, #1
 80118f6:	d103      	bne.n	8011900 <_printf_common+0xac>
 80118f8:	f04f 30ff 	mov.w	r0, #4294967295
 80118fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011900:	3501      	adds	r5, #1
 8011902:	e7c6      	b.n	8011892 <_printf_common+0x3e>
 8011904:	18e1      	adds	r1, r4, r3
 8011906:	1c5a      	adds	r2, r3, #1
 8011908:	2030      	movs	r0, #48	; 0x30
 801190a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801190e:	4422      	add	r2, r4
 8011910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011918:	3302      	adds	r3, #2
 801191a:	e7c7      	b.n	80118ac <_printf_common+0x58>
 801191c:	2301      	movs	r3, #1
 801191e:	4622      	mov	r2, r4
 8011920:	4649      	mov	r1, r9
 8011922:	4638      	mov	r0, r7
 8011924:	47c0      	blx	r8
 8011926:	3001      	adds	r0, #1
 8011928:	d0e6      	beq.n	80118f8 <_printf_common+0xa4>
 801192a:	3601      	adds	r6, #1
 801192c:	e7d9      	b.n	80118e2 <_printf_common+0x8e>
	...

08011930 <_printf_i>:
 8011930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011934:	460c      	mov	r4, r1
 8011936:	4691      	mov	r9, r2
 8011938:	7e27      	ldrb	r7, [r4, #24]
 801193a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801193c:	2f78      	cmp	r7, #120	; 0x78
 801193e:	4680      	mov	r8, r0
 8011940:	469a      	mov	sl, r3
 8011942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011946:	d807      	bhi.n	8011958 <_printf_i+0x28>
 8011948:	2f62      	cmp	r7, #98	; 0x62
 801194a:	d80a      	bhi.n	8011962 <_printf_i+0x32>
 801194c:	2f00      	cmp	r7, #0
 801194e:	f000 80d8 	beq.w	8011b02 <_printf_i+0x1d2>
 8011952:	2f58      	cmp	r7, #88	; 0x58
 8011954:	f000 80a3 	beq.w	8011a9e <_printf_i+0x16e>
 8011958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801195c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011960:	e03a      	b.n	80119d8 <_printf_i+0xa8>
 8011962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011966:	2b15      	cmp	r3, #21
 8011968:	d8f6      	bhi.n	8011958 <_printf_i+0x28>
 801196a:	a001      	add	r0, pc, #4	; (adr r0, 8011970 <_printf_i+0x40>)
 801196c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011970:	080119c9 	.word	0x080119c9
 8011974:	080119dd 	.word	0x080119dd
 8011978:	08011959 	.word	0x08011959
 801197c:	08011959 	.word	0x08011959
 8011980:	08011959 	.word	0x08011959
 8011984:	08011959 	.word	0x08011959
 8011988:	080119dd 	.word	0x080119dd
 801198c:	08011959 	.word	0x08011959
 8011990:	08011959 	.word	0x08011959
 8011994:	08011959 	.word	0x08011959
 8011998:	08011959 	.word	0x08011959
 801199c:	08011ae9 	.word	0x08011ae9
 80119a0:	08011a0d 	.word	0x08011a0d
 80119a4:	08011acb 	.word	0x08011acb
 80119a8:	08011959 	.word	0x08011959
 80119ac:	08011959 	.word	0x08011959
 80119b0:	08011b0b 	.word	0x08011b0b
 80119b4:	08011959 	.word	0x08011959
 80119b8:	08011a0d 	.word	0x08011a0d
 80119bc:	08011959 	.word	0x08011959
 80119c0:	08011959 	.word	0x08011959
 80119c4:	08011ad3 	.word	0x08011ad3
 80119c8:	680b      	ldr	r3, [r1, #0]
 80119ca:	1d1a      	adds	r2, r3, #4
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	600a      	str	r2, [r1, #0]
 80119d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80119d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119d8:	2301      	movs	r3, #1
 80119da:	e0a3      	b.n	8011b24 <_printf_i+0x1f4>
 80119dc:	6825      	ldr	r5, [r4, #0]
 80119de:	6808      	ldr	r0, [r1, #0]
 80119e0:	062e      	lsls	r6, r5, #24
 80119e2:	f100 0304 	add.w	r3, r0, #4
 80119e6:	d50a      	bpl.n	80119fe <_printf_i+0xce>
 80119e8:	6805      	ldr	r5, [r0, #0]
 80119ea:	600b      	str	r3, [r1, #0]
 80119ec:	2d00      	cmp	r5, #0
 80119ee:	da03      	bge.n	80119f8 <_printf_i+0xc8>
 80119f0:	232d      	movs	r3, #45	; 0x2d
 80119f2:	426d      	negs	r5, r5
 80119f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119f8:	485e      	ldr	r0, [pc, #376]	; (8011b74 <_printf_i+0x244>)
 80119fa:	230a      	movs	r3, #10
 80119fc:	e019      	b.n	8011a32 <_printf_i+0x102>
 80119fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011a02:	6805      	ldr	r5, [r0, #0]
 8011a04:	600b      	str	r3, [r1, #0]
 8011a06:	bf18      	it	ne
 8011a08:	b22d      	sxthne	r5, r5
 8011a0a:	e7ef      	b.n	80119ec <_printf_i+0xbc>
 8011a0c:	680b      	ldr	r3, [r1, #0]
 8011a0e:	6825      	ldr	r5, [r4, #0]
 8011a10:	1d18      	adds	r0, r3, #4
 8011a12:	6008      	str	r0, [r1, #0]
 8011a14:	0628      	lsls	r0, r5, #24
 8011a16:	d501      	bpl.n	8011a1c <_printf_i+0xec>
 8011a18:	681d      	ldr	r5, [r3, #0]
 8011a1a:	e002      	b.n	8011a22 <_printf_i+0xf2>
 8011a1c:	0669      	lsls	r1, r5, #25
 8011a1e:	d5fb      	bpl.n	8011a18 <_printf_i+0xe8>
 8011a20:	881d      	ldrh	r5, [r3, #0]
 8011a22:	4854      	ldr	r0, [pc, #336]	; (8011b74 <_printf_i+0x244>)
 8011a24:	2f6f      	cmp	r7, #111	; 0x6f
 8011a26:	bf0c      	ite	eq
 8011a28:	2308      	moveq	r3, #8
 8011a2a:	230a      	movne	r3, #10
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a32:	6866      	ldr	r6, [r4, #4]
 8011a34:	60a6      	str	r6, [r4, #8]
 8011a36:	2e00      	cmp	r6, #0
 8011a38:	bfa2      	ittt	ge
 8011a3a:	6821      	ldrge	r1, [r4, #0]
 8011a3c:	f021 0104 	bicge.w	r1, r1, #4
 8011a40:	6021      	strge	r1, [r4, #0]
 8011a42:	b90d      	cbnz	r5, 8011a48 <_printf_i+0x118>
 8011a44:	2e00      	cmp	r6, #0
 8011a46:	d04d      	beq.n	8011ae4 <_printf_i+0x1b4>
 8011a48:	4616      	mov	r6, r2
 8011a4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a4e:	fb03 5711 	mls	r7, r3, r1, r5
 8011a52:	5dc7      	ldrb	r7, [r0, r7]
 8011a54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a58:	462f      	mov	r7, r5
 8011a5a:	42bb      	cmp	r3, r7
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	d9f4      	bls.n	8011a4a <_printf_i+0x11a>
 8011a60:	2b08      	cmp	r3, #8
 8011a62:	d10b      	bne.n	8011a7c <_printf_i+0x14c>
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	07df      	lsls	r7, r3, #31
 8011a68:	d508      	bpl.n	8011a7c <_printf_i+0x14c>
 8011a6a:	6923      	ldr	r3, [r4, #16]
 8011a6c:	6861      	ldr	r1, [r4, #4]
 8011a6e:	4299      	cmp	r1, r3
 8011a70:	bfde      	ittt	le
 8011a72:	2330      	movle	r3, #48	; 0x30
 8011a74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a7c:	1b92      	subs	r2, r2, r6
 8011a7e:	6122      	str	r2, [r4, #16]
 8011a80:	f8cd a000 	str.w	sl, [sp]
 8011a84:	464b      	mov	r3, r9
 8011a86:	aa03      	add	r2, sp, #12
 8011a88:	4621      	mov	r1, r4
 8011a8a:	4640      	mov	r0, r8
 8011a8c:	f7ff fee2 	bl	8011854 <_printf_common>
 8011a90:	3001      	adds	r0, #1
 8011a92:	d14c      	bne.n	8011b2e <_printf_i+0x1fe>
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295
 8011a98:	b004      	add	sp, #16
 8011a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a9e:	4835      	ldr	r0, [pc, #212]	; (8011b74 <_printf_i+0x244>)
 8011aa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	680e      	ldr	r6, [r1, #0]
 8011aa8:	061f      	lsls	r7, r3, #24
 8011aaa:	f856 5b04 	ldr.w	r5, [r6], #4
 8011aae:	600e      	str	r6, [r1, #0]
 8011ab0:	d514      	bpl.n	8011adc <_printf_i+0x1ac>
 8011ab2:	07d9      	lsls	r1, r3, #31
 8011ab4:	bf44      	itt	mi
 8011ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8011aba:	6023      	strmi	r3, [r4, #0]
 8011abc:	b91d      	cbnz	r5, 8011ac6 <_printf_i+0x196>
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	f023 0320 	bic.w	r3, r3, #32
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	2310      	movs	r3, #16
 8011ac8:	e7b0      	b.n	8011a2c <_printf_i+0xfc>
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	f043 0320 	orr.w	r3, r3, #32
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	2378      	movs	r3, #120	; 0x78
 8011ad4:	4828      	ldr	r0, [pc, #160]	; (8011b78 <_printf_i+0x248>)
 8011ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ada:	e7e3      	b.n	8011aa4 <_printf_i+0x174>
 8011adc:	065e      	lsls	r6, r3, #25
 8011ade:	bf48      	it	mi
 8011ae0:	b2ad      	uxthmi	r5, r5
 8011ae2:	e7e6      	b.n	8011ab2 <_printf_i+0x182>
 8011ae4:	4616      	mov	r6, r2
 8011ae6:	e7bb      	b.n	8011a60 <_printf_i+0x130>
 8011ae8:	680b      	ldr	r3, [r1, #0]
 8011aea:	6826      	ldr	r6, [r4, #0]
 8011aec:	6960      	ldr	r0, [r4, #20]
 8011aee:	1d1d      	adds	r5, r3, #4
 8011af0:	600d      	str	r5, [r1, #0]
 8011af2:	0635      	lsls	r5, r6, #24
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	d501      	bpl.n	8011afc <_printf_i+0x1cc>
 8011af8:	6018      	str	r0, [r3, #0]
 8011afa:	e002      	b.n	8011b02 <_printf_i+0x1d2>
 8011afc:	0671      	lsls	r1, r6, #25
 8011afe:	d5fb      	bpl.n	8011af8 <_printf_i+0x1c8>
 8011b00:	8018      	strh	r0, [r3, #0]
 8011b02:	2300      	movs	r3, #0
 8011b04:	6123      	str	r3, [r4, #16]
 8011b06:	4616      	mov	r6, r2
 8011b08:	e7ba      	b.n	8011a80 <_printf_i+0x150>
 8011b0a:	680b      	ldr	r3, [r1, #0]
 8011b0c:	1d1a      	adds	r2, r3, #4
 8011b0e:	600a      	str	r2, [r1, #0]
 8011b10:	681e      	ldr	r6, [r3, #0]
 8011b12:	6862      	ldr	r2, [r4, #4]
 8011b14:	2100      	movs	r1, #0
 8011b16:	4630      	mov	r0, r6
 8011b18:	f7ee fb62 	bl	80001e0 <memchr>
 8011b1c:	b108      	cbz	r0, 8011b22 <_printf_i+0x1f2>
 8011b1e:	1b80      	subs	r0, r0, r6
 8011b20:	6060      	str	r0, [r4, #4]
 8011b22:	6863      	ldr	r3, [r4, #4]
 8011b24:	6123      	str	r3, [r4, #16]
 8011b26:	2300      	movs	r3, #0
 8011b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b2c:	e7a8      	b.n	8011a80 <_printf_i+0x150>
 8011b2e:	6923      	ldr	r3, [r4, #16]
 8011b30:	4632      	mov	r2, r6
 8011b32:	4649      	mov	r1, r9
 8011b34:	4640      	mov	r0, r8
 8011b36:	47d0      	blx	sl
 8011b38:	3001      	adds	r0, #1
 8011b3a:	d0ab      	beq.n	8011a94 <_printf_i+0x164>
 8011b3c:	6823      	ldr	r3, [r4, #0]
 8011b3e:	079b      	lsls	r3, r3, #30
 8011b40:	d413      	bmi.n	8011b6a <_printf_i+0x23a>
 8011b42:	68e0      	ldr	r0, [r4, #12]
 8011b44:	9b03      	ldr	r3, [sp, #12]
 8011b46:	4298      	cmp	r0, r3
 8011b48:	bfb8      	it	lt
 8011b4a:	4618      	movlt	r0, r3
 8011b4c:	e7a4      	b.n	8011a98 <_printf_i+0x168>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	4632      	mov	r2, r6
 8011b52:	4649      	mov	r1, r9
 8011b54:	4640      	mov	r0, r8
 8011b56:	47d0      	blx	sl
 8011b58:	3001      	adds	r0, #1
 8011b5a:	d09b      	beq.n	8011a94 <_printf_i+0x164>
 8011b5c:	3501      	adds	r5, #1
 8011b5e:	68e3      	ldr	r3, [r4, #12]
 8011b60:	9903      	ldr	r1, [sp, #12]
 8011b62:	1a5b      	subs	r3, r3, r1
 8011b64:	42ab      	cmp	r3, r5
 8011b66:	dcf2      	bgt.n	8011b4e <_printf_i+0x21e>
 8011b68:	e7eb      	b.n	8011b42 <_printf_i+0x212>
 8011b6a:	2500      	movs	r5, #0
 8011b6c:	f104 0619 	add.w	r6, r4, #25
 8011b70:	e7f5      	b.n	8011b5e <_printf_i+0x22e>
 8011b72:	bf00      	nop
 8011b74:	0801503a 	.word	0x0801503a
 8011b78:	0801504b 	.word	0x0801504b

08011b7c <_sbrk_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	4d06      	ldr	r5, [pc, #24]	; (8011b98 <_sbrk_r+0x1c>)
 8011b80:	2300      	movs	r3, #0
 8011b82:	4604      	mov	r4, r0
 8011b84:	4608      	mov	r0, r1
 8011b86:	602b      	str	r3, [r5, #0]
 8011b88:	f7ef ffd8 	bl	8001b3c <_sbrk>
 8011b8c:	1c43      	adds	r3, r0, #1
 8011b8e:	d102      	bne.n	8011b96 <_sbrk_r+0x1a>
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	b103      	cbz	r3, 8011b96 <_sbrk_r+0x1a>
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	bd38      	pop	{r3, r4, r5, pc}
 8011b98:	20004f34 	.word	0x20004f34

08011b9c <siprintf>:
 8011b9c:	b40e      	push	{r1, r2, r3}
 8011b9e:	b500      	push	{lr}
 8011ba0:	b09c      	sub	sp, #112	; 0x70
 8011ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8011ba4:	9002      	str	r0, [sp, #8]
 8011ba6:	9006      	str	r0, [sp, #24]
 8011ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bac:	4809      	ldr	r0, [pc, #36]	; (8011bd4 <siprintf+0x38>)
 8011bae:	9107      	str	r1, [sp, #28]
 8011bb0:	9104      	str	r1, [sp, #16]
 8011bb2:	4909      	ldr	r1, [pc, #36]	; (8011bd8 <siprintf+0x3c>)
 8011bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bb8:	9105      	str	r1, [sp, #20]
 8011bba:	6800      	ldr	r0, [r0, #0]
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	a902      	add	r1, sp, #8
 8011bc0:	f001 fa9e 	bl	8013100 <_svfiprintf_r>
 8011bc4:	9b02      	ldr	r3, [sp, #8]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	701a      	strb	r2, [r3, #0]
 8011bca:	b01c      	add	sp, #112	; 0x70
 8011bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bd0:	b003      	add	sp, #12
 8011bd2:	4770      	bx	lr
 8011bd4:	20000228 	.word	0x20000228
 8011bd8:	ffff0208 	.word	0xffff0208

08011bdc <strcat>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4602      	mov	r2, r0
 8011be0:	7814      	ldrb	r4, [r2, #0]
 8011be2:	4613      	mov	r3, r2
 8011be4:	3201      	adds	r2, #1
 8011be6:	2c00      	cmp	r4, #0
 8011be8:	d1fa      	bne.n	8011be0 <strcat+0x4>
 8011bea:	3b01      	subs	r3, #1
 8011bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bf4:	2a00      	cmp	r2, #0
 8011bf6:	d1f9      	bne.n	8011bec <strcat+0x10>
 8011bf8:	bd10      	pop	{r4, pc}

08011bfa <strncat>:
 8011bfa:	b530      	push	{r4, r5, lr}
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	7825      	ldrb	r5, [r4, #0]
 8011c00:	4623      	mov	r3, r4
 8011c02:	3401      	adds	r4, #1
 8011c04:	2d00      	cmp	r5, #0
 8011c06:	d1fa      	bne.n	8011bfe <strncat+0x4>
 8011c08:	3a01      	subs	r2, #1
 8011c0a:	d304      	bcc.n	8011c16 <strncat+0x1c>
 8011c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c10:	f803 4b01 	strb.w	r4, [r3], #1
 8011c14:	b904      	cbnz	r4, 8011c18 <strncat+0x1e>
 8011c16:	bd30      	pop	{r4, r5, pc}
 8011c18:	2a00      	cmp	r2, #0
 8011c1a:	d1f5      	bne.n	8011c08 <strncat+0xe>
 8011c1c:	701a      	strb	r2, [r3, #0]
 8011c1e:	e7f3      	b.n	8011c08 <strncat+0xe>

08011c20 <quorem>:
 8011c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	6903      	ldr	r3, [r0, #16]
 8011c26:	690c      	ldr	r4, [r1, #16]
 8011c28:	42a3      	cmp	r3, r4
 8011c2a:	4607      	mov	r7, r0
 8011c2c:	f2c0 8081 	blt.w	8011d32 <quorem+0x112>
 8011c30:	3c01      	subs	r4, #1
 8011c32:	f101 0814 	add.w	r8, r1, #20
 8011c36:	f100 0514 	add.w	r5, r0, #20
 8011c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011c50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011c54:	fbb2 f6f3 	udiv	r6, r2, r3
 8011c58:	d331      	bcc.n	8011cbe <quorem+0x9e>
 8011c5a:	f04f 0e00 	mov.w	lr, #0
 8011c5e:	4640      	mov	r0, r8
 8011c60:	46ac      	mov	ip, r5
 8011c62:	46f2      	mov	sl, lr
 8011c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8011c68:	b293      	uxth	r3, r2
 8011c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8011c6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	ebaa 0303 	sub.w	r3, sl, r3
 8011c78:	0c12      	lsrs	r2, r2, #16
 8011c7a:	f8dc a000 	ldr.w	sl, [ip]
 8011c7e:	fb06 e202 	mla	r2, r6, r2, lr
 8011c82:	fa13 f38a 	uxtah	r3, r3, sl
 8011c86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011c8a:	fa1f fa82 	uxth.w	sl, r2
 8011c8e:	f8dc 2000 	ldr.w	r2, [ip]
 8011c92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011c96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ca0:	4581      	cmp	r9, r0
 8011ca2:	f84c 3b04 	str.w	r3, [ip], #4
 8011ca6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011caa:	d2db      	bcs.n	8011c64 <quorem+0x44>
 8011cac:	f855 300b 	ldr.w	r3, [r5, fp]
 8011cb0:	b92b      	cbnz	r3, 8011cbe <quorem+0x9e>
 8011cb2:	9b01      	ldr	r3, [sp, #4]
 8011cb4:	3b04      	subs	r3, #4
 8011cb6:	429d      	cmp	r5, r3
 8011cb8:	461a      	mov	r2, r3
 8011cba:	d32e      	bcc.n	8011d1a <quorem+0xfa>
 8011cbc:	613c      	str	r4, [r7, #16]
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	f001 f8b4 	bl	8012e2c <__mcmp>
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	db24      	blt.n	8011d12 <quorem+0xf2>
 8011cc8:	3601      	adds	r6, #1
 8011cca:	4628      	mov	r0, r5
 8011ccc:	f04f 0c00 	mov.w	ip, #0
 8011cd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8011cd8:	b293      	uxth	r3, r2
 8011cda:	ebac 0303 	sub.w	r3, ip, r3
 8011cde:	0c12      	lsrs	r2, r2, #16
 8011ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8011ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cf2:	45c1      	cmp	r9, r8
 8011cf4:	f840 3b04 	str.w	r3, [r0], #4
 8011cf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011cfc:	d2e8      	bcs.n	8011cd0 <quorem+0xb0>
 8011cfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d06:	b922      	cbnz	r2, 8011d12 <quorem+0xf2>
 8011d08:	3b04      	subs	r3, #4
 8011d0a:	429d      	cmp	r5, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	d30a      	bcc.n	8011d26 <quorem+0x106>
 8011d10:	613c      	str	r4, [r7, #16]
 8011d12:	4630      	mov	r0, r6
 8011d14:	b003      	add	sp, #12
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	6812      	ldr	r2, [r2, #0]
 8011d1c:	3b04      	subs	r3, #4
 8011d1e:	2a00      	cmp	r2, #0
 8011d20:	d1cc      	bne.n	8011cbc <quorem+0x9c>
 8011d22:	3c01      	subs	r4, #1
 8011d24:	e7c7      	b.n	8011cb6 <quorem+0x96>
 8011d26:	6812      	ldr	r2, [r2, #0]
 8011d28:	3b04      	subs	r3, #4
 8011d2a:	2a00      	cmp	r2, #0
 8011d2c:	d1f0      	bne.n	8011d10 <quorem+0xf0>
 8011d2e:	3c01      	subs	r4, #1
 8011d30:	e7eb      	b.n	8011d0a <quorem+0xea>
 8011d32:	2000      	movs	r0, #0
 8011d34:	e7ee      	b.n	8011d14 <quorem+0xf4>
	...

08011d38 <_dtoa_r>:
 8011d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d3c:	ed2d 8b02 	vpush	{d8}
 8011d40:	ec57 6b10 	vmov	r6, r7, d0
 8011d44:	b095      	sub	sp, #84	; 0x54
 8011d46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011d48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011d4c:	9105      	str	r1, [sp, #20]
 8011d4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011d52:	4604      	mov	r4, r0
 8011d54:	9209      	str	r2, [sp, #36]	; 0x24
 8011d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d58:	b975      	cbnz	r5, 8011d78 <_dtoa_r+0x40>
 8011d5a:	2010      	movs	r0, #16
 8011d5c:	f7ff f9ba 	bl	80110d4 <malloc>
 8011d60:	4602      	mov	r2, r0
 8011d62:	6260      	str	r0, [r4, #36]	; 0x24
 8011d64:	b920      	cbnz	r0, 8011d70 <_dtoa_r+0x38>
 8011d66:	4bb2      	ldr	r3, [pc, #712]	; (8012030 <_dtoa_r+0x2f8>)
 8011d68:	21ea      	movs	r1, #234	; 0xea
 8011d6a:	48b2      	ldr	r0, [pc, #712]	; (8012034 <_dtoa_r+0x2fc>)
 8011d6c:	f001 fac8 	bl	8013300 <__assert_func>
 8011d70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011d74:	6005      	str	r5, [r0, #0]
 8011d76:	60c5      	str	r5, [r0, #12]
 8011d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d7a:	6819      	ldr	r1, [r3, #0]
 8011d7c:	b151      	cbz	r1, 8011d94 <_dtoa_r+0x5c>
 8011d7e:	685a      	ldr	r2, [r3, #4]
 8011d80:	604a      	str	r2, [r1, #4]
 8011d82:	2301      	movs	r3, #1
 8011d84:	4093      	lsls	r3, r2
 8011d86:	608b      	str	r3, [r1, #8]
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f000 fe11 	bl	80129b0 <_Bfree>
 8011d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d90:	2200      	movs	r2, #0
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	1e3b      	subs	r3, r7, #0
 8011d96:	bfb9      	ittee	lt
 8011d98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011d9c:	9303      	strlt	r3, [sp, #12]
 8011d9e:	2300      	movge	r3, #0
 8011da0:	f8c8 3000 	strge.w	r3, [r8]
 8011da4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011da8:	4ba3      	ldr	r3, [pc, #652]	; (8012038 <_dtoa_r+0x300>)
 8011daa:	bfbc      	itt	lt
 8011dac:	2201      	movlt	r2, #1
 8011dae:	f8c8 2000 	strlt.w	r2, [r8]
 8011db2:	ea33 0309 	bics.w	r3, r3, r9
 8011db6:	d11b      	bne.n	8011df0 <_dtoa_r+0xb8>
 8011db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011dc4:	4333      	orrs	r3, r6
 8011dc6:	f000 857a 	beq.w	80128be <_dtoa_r+0xb86>
 8011dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011dcc:	b963      	cbnz	r3, 8011de8 <_dtoa_r+0xb0>
 8011dce:	4b9b      	ldr	r3, [pc, #620]	; (801203c <_dtoa_r+0x304>)
 8011dd0:	e024      	b.n	8011e1c <_dtoa_r+0xe4>
 8011dd2:	4b9b      	ldr	r3, [pc, #620]	; (8012040 <_dtoa_r+0x308>)
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	3308      	adds	r3, #8
 8011dd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011dda:	6013      	str	r3, [r2, #0]
 8011ddc:	9800      	ldr	r0, [sp, #0]
 8011dde:	b015      	add	sp, #84	; 0x54
 8011de0:	ecbd 8b02 	vpop	{d8}
 8011de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de8:	4b94      	ldr	r3, [pc, #592]	; (801203c <_dtoa_r+0x304>)
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	3303      	adds	r3, #3
 8011dee:	e7f3      	b.n	8011dd8 <_dtoa_r+0xa0>
 8011df0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011df4:	2200      	movs	r2, #0
 8011df6:	ec51 0b17 	vmov	r0, r1, d7
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011e00:	f7ee fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e04:	4680      	mov	r8, r0
 8011e06:	b158      	cbz	r0, 8011e20 <_dtoa_r+0xe8>
 8011e08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	6013      	str	r3, [r2, #0]
 8011e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f000 8551 	beq.w	80128b8 <_dtoa_r+0xb80>
 8011e16:	488b      	ldr	r0, [pc, #556]	; (8012044 <_dtoa_r+0x30c>)
 8011e18:	6018      	str	r0, [r3, #0]
 8011e1a:	1e43      	subs	r3, r0, #1
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	e7dd      	b.n	8011ddc <_dtoa_r+0xa4>
 8011e20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011e24:	aa12      	add	r2, sp, #72	; 0x48
 8011e26:	a913      	add	r1, sp, #76	; 0x4c
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f001 f8a3 	bl	8012f74 <__d2b>
 8011e2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e32:	4683      	mov	fp, r0
 8011e34:	2d00      	cmp	r5, #0
 8011e36:	d07c      	beq.n	8011f32 <_dtoa_r+0x1fa>
 8011e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011e46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011e4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011e52:	4b7d      	ldr	r3, [pc, #500]	; (8012048 <_dtoa_r+0x310>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	4630      	mov	r0, r6
 8011e58:	4639      	mov	r1, r7
 8011e5a:	f7ee fa15 	bl	8000288 <__aeabi_dsub>
 8011e5e:	a36e      	add	r3, pc, #440	; (adr r3, 8012018 <_dtoa_r+0x2e0>)
 8011e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e64:	f7ee fbc8 	bl	80005f8 <__aeabi_dmul>
 8011e68:	a36d      	add	r3, pc, #436	; (adr r3, 8012020 <_dtoa_r+0x2e8>)
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	f7ee fa0d 	bl	800028c <__adddf3>
 8011e72:	4606      	mov	r6, r0
 8011e74:	4628      	mov	r0, r5
 8011e76:	460f      	mov	r7, r1
 8011e78:	f7ee fb54 	bl	8000524 <__aeabi_i2d>
 8011e7c:	a36a      	add	r3, pc, #424	; (adr r3, 8012028 <_dtoa_r+0x2f0>)
 8011e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e82:	f7ee fbb9 	bl	80005f8 <__aeabi_dmul>
 8011e86:	4602      	mov	r2, r0
 8011e88:	460b      	mov	r3, r1
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	f7ee f9fd 	bl	800028c <__adddf3>
 8011e92:	4606      	mov	r6, r0
 8011e94:	460f      	mov	r7, r1
 8011e96:	f7ee fe5f 	bl	8000b58 <__aeabi_d2iz>
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	4682      	mov	sl, r0
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	4639      	mov	r1, r7
 8011ea4:	f7ee fe1a 	bl	8000adc <__aeabi_dcmplt>
 8011ea8:	b148      	cbz	r0, 8011ebe <_dtoa_r+0x186>
 8011eaa:	4650      	mov	r0, sl
 8011eac:	f7ee fb3a 	bl	8000524 <__aeabi_i2d>
 8011eb0:	4632      	mov	r2, r6
 8011eb2:	463b      	mov	r3, r7
 8011eb4:	f7ee fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8011eb8:	b908      	cbnz	r0, 8011ebe <_dtoa_r+0x186>
 8011eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ebe:	f1ba 0f16 	cmp.w	sl, #22
 8011ec2:	d854      	bhi.n	8011f6e <_dtoa_r+0x236>
 8011ec4:	4b61      	ldr	r3, [pc, #388]	; (801204c <_dtoa_r+0x314>)
 8011ec6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ed2:	f7ee fe03 	bl	8000adc <__aeabi_dcmplt>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d04b      	beq.n	8011f72 <_dtoa_r+0x23a>
 8011eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ede:	2300      	movs	r3, #0
 8011ee0:	930e      	str	r3, [sp, #56]	; 0x38
 8011ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ee4:	1b5d      	subs	r5, r3, r5
 8011ee6:	1e6b      	subs	r3, r5, #1
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	bf43      	ittte	mi
 8011eec:	2300      	movmi	r3, #0
 8011eee:	f1c5 0801 	rsbmi	r8, r5, #1
 8011ef2:	9304      	strmi	r3, [sp, #16]
 8011ef4:	f04f 0800 	movpl.w	r8, #0
 8011ef8:	f1ba 0f00 	cmp.w	sl, #0
 8011efc:	db3b      	blt.n	8011f76 <_dtoa_r+0x23e>
 8011efe:	9b04      	ldr	r3, [sp, #16]
 8011f00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011f04:	4453      	add	r3, sl
 8011f06:	9304      	str	r3, [sp, #16]
 8011f08:	2300      	movs	r3, #0
 8011f0a:	9306      	str	r3, [sp, #24]
 8011f0c:	9b05      	ldr	r3, [sp, #20]
 8011f0e:	2b09      	cmp	r3, #9
 8011f10:	d869      	bhi.n	8011fe6 <_dtoa_r+0x2ae>
 8011f12:	2b05      	cmp	r3, #5
 8011f14:	bfc4      	itt	gt
 8011f16:	3b04      	subgt	r3, #4
 8011f18:	9305      	strgt	r3, [sp, #20]
 8011f1a:	9b05      	ldr	r3, [sp, #20]
 8011f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8011f20:	bfcc      	ite	gt
 8011f22:	2500      	movgt	r5, #0
 8011f24:	2501      	movle	r5, #1
 8011f26:	2b03      	cmp	r3, #3
 8011f28:	d869      	bhi.n	8011ffe <_dtoa_r+0x2c6>
 8011f2a:	e8df f003 	tbb	[pc, r3]
 8011f2e:	4e2c      	.short	0x4e2c
 8011f30:	5a4c      	.short	0x5a4c
 8011f32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011f36:	441d      	add	r5, r3
 8011f38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011f3c:	2b20      	cmp	r3, #32
 8011f3e:	bfc1      	itttt	gt
 8011f40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011f44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011f48:	fa09 f303 	lslgt.w	r3, r9, r3
 8011f4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011f50:	bfda      	itte	le
 8011f52:	f1c3 0320 	rsble	r3, r3, #32
 8011f56:	fa06 f003 	lslle.w	r0, r6, r3
 8011f5a:	4318      	orrgt	r0, r3
 8011f5c:	f7ee fad2 	bl	8000504 <__aeabi_ui2d>
 8011f60:	2301      	movs	r3, #1
 8011f62:	4606      	mov	r6, r0
 8011f64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011f68:	3d01      	subs	r5, #1
 8011f6a:	9310      	str	r3, [sp, #64]	; 0x40
 8011f6c:	e771      	b.n	8011e52 <_dtoa_r+0x11a>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e7b6      	b.n	8011ee0 <_dtoa_r+0x1a8>
 8011f72:	900e      	str	r0, [sp, #56]	; 0x38
 8011f74:	e7b5      	b.n	8011ee2 <_dtoa_r+0x1aa>
 8011f76:	f1ca 0300 	rsb	r3, sl, #0
 8011f7a:	9306      	str	r3, [sp, #24]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	eba8 080a 	sub.w	r8, r8, sl
 8011f82:	930d      	str	r3, [sp, #52]	; 0x34
 8011f84:	e7c2      	b.n	8011f0c <_dtoa_r+0x1d4>
 8011f86:	2300      	movs	r3, #0
 8011f88:	9308      	str	r3, [sp, #32]
 8011f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	dc39      	bgt.n	8012004 <_dtoa_r+0x2cc>
 8011f90:	f04f 0901 	mov.w	r9, #1
 8011f94:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f98:	464b      	mov	r3, r9
 8011f9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011f9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	6042      	str	r2, [r0, #4]
 8011fa4:	2204      	movs	r2, #4
 8011fa6:	f102 0614 	add.w	r6, r2, #20
 8011faa:	429e      	cmp	r6, r3
 8011fac:	6841      	ldr	r1, [r0, #4]
 8011fae:	d92f      	bls.n	8012010 <_dtoa_r+0x2d8>
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f000 fcbd 	bl	8012930 <_Balloc>
 8011fb6:	9000      	str	r0, [sp, #0]
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d14b      	bne.n	8012054 <_dtoa_r+0x31c>
 8011fbc:	4b24      	ldr	r3, [pc, #144]	; (8012050 <_dtoa_r+0x318>)
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011fc4:	e6d1      	b.n	8011d6a <_dtoa_r+0x32>
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e7de      	b.n	8011f88 <_dtoa_r+0x250>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	9308      	str	r3, [sp, #32]
 8011fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fd0:	eb0a 0903 	add.w	r9, sl, r3
 8011fd4:	f109 0301 	add.w	r3, r9, #1
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	bfb8      	it	lt
 8011fde:	2301      	movlt	r3, #1
 8011fe0:	e7dd      	b.n	8011f9e <_dtoa_r+0x266>
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e7f2      	b.n	8011fcc <_dtoa_r+0x294>
 8011fe6:	2501      	movs	r5, #1
 8011fe8:	2300      	movs	r3, #0
 8011fea:	9305      	str	r3, [sp, #20]
 8011fec:	9508      	str	r5, [sp, #32]
 8011fee:	f04f 39ff 	mov.w	r9, #4294967295
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011ff8:	2312      	movs	r3, #18
 8011ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8011ffc:	e7cf      	b.n	8011f9e <_dtoa_r+0x266>
 8011ffe:	2301      	movs	r3, #1
 8012000:	9308      	str	r3, [sp, #32]
 8012002:	e7f4      	b.n	8011fee <_dtoa_r+0x2b6>
 8012004:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012008:	f8cd 9004 	str.w	r9, [sp, #4]
 801200c:	464b      	mov	r3, r9
 801200e:	e7c6      	b.n	8011f9e <_dtoa_r+0x266>
 8012010:	3101      	adds	r1, #1
 8012012:	6041      	str	r1, [r0, #4]
 8012014:	0052      	lsls	r2, r2, #1
 8012016:	e7c6      	b.n	8011fa6 <_dtoa_r+0x26e>
 8012018:	636f4361 	.word	0x636f4361
 801201c:	3fd287a7 	.word	0x3fd287a7
 8012020:	8b60c8b3 	.word	0x8b60c8b3
 8012024:	3fc68a28 	.word	0x3fc68a28
 8012028:	509f79fb 	.word	0x509f79fb
 801202c:	3fd34413 	.word	0x3fd34413
 8012030:	08015069 	.word	0x08015069
 8012034:	08015080 	.word	0x08015080
 8012038:	7ff00000 	.word	0x7ff00000
 801203c:	08015065 	.word	0x08015065
 8012040:	0801505c 	.word	0x0801505c
 8012044:	08015039 	.word	0x08015039
 8012048:	3ff80000 	.word	0x3ff80000
 801204c:	08015178 	.word	0x08015178
 8012050:	080150df 	.word	0x080150df
 8012054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012056:	9a00      	ldr	r2, [sp, #0]
 8012058:	601a      	str	r2, [r3, #0]
 801205a:	9b01      	ldr	r3, [sp, #4]
 801205c:	2b0e      	cmp	r3, #14
 801205e:	f200 80ad 	bhi.w	80121bc <_dtoa_r+0x484>
 8012062:	2d00      	cmp	r5, #0
 8012064:	f000 80aa 	beq.w	80121bc <_dtoa_r+0x484>
 8012068:	f1ba 0f00 	cmp.w	sl, #0
 801206c:	dd36      	ble.n	80120dc <_dtoa_r+0x3a4>
 801206e:	4ac3      	ldr	r2, [pc, #780]	; (801237c <_dtoa_r+0x644>)
 8012070:	f00a 030f 	and.w	r3, sl, #15
 8012074:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012078:	ed93 7b00 	vldr	d7, [r3]
 801207c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012080:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012084:	eeb0 8a47 	vmov.f32	s16, s14
 8012088:	eef0 8a67 	vmov.f32	s17, s15
 801208c:	d016      	beq.n	80120bc <_dtoa_r+0x384>
 801208e:	4bbc      	ldr	r3, [pc, #752]	; (8012380 <_dtoa_r+0x648>)
 8012090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012098:	f7ee fbd8 	bl	800084c <__aeabi_ddiv>
 801209c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120a0:	f007 070f 	and.w	r7, r7, #15
 80120a4:	2503      	movs	r5, #3
 80120a6:	4eb6      	ldr	r6, [pc, #728]	; (8012380 <_dtoa_r+0x648>)
 80120a8:	b957      	cbnz	r7, 80120c0 <_dtoa_r+0x388>
 80120aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120ae:	ec53 2b18 	vmov	r2, r3, d8
 80120b2:	f7ee fbcb 	bl	800084c <__aeabi_ddiv>
 80120b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120ba:	e029      	b.n	8012110 <_dtoa_r+0x3d8>
 80120bc:	2502      	movs	r5, #2
 80120be:	e7f2      	b.n	80120a6 <_dtoa_r+0x36e>
 80120c0:	07f9      	lsls	r1, r7, #31
 80120c2:	d508      	bpl.n	80120d6 <_dtoa_r+0x39e>
 80120c4:	ec51 0b18 	vmov	r0, r1, d8
 80120c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80120cc:	f7ee fa94 	bl	80005f8 <__aeabi_dmul>
 80120d0:	ec41 0b18 	vmov	d8, r0, r1
 80120d4:	3501      	adds	r5, #1
 80120d6:	107f      	asrs	r7, r7, #1
 80120d8:	3608      	adds	r6, #8
 80120da:	e7e5      	b.n	80120a8 <_dtoa_r+0x370>
 80120dc:	f000 80a6 	beq.w	801222c <_dtoa_r+0x4f4>
 80120e0:	f1ca 0600 	rsb	r6, sl, #0
 80120e4:	4ba5      	ldr	r3, [pc, #660]	; (801237c <_dtoa_r+0x644>)
 80120e6:	4fa6      	ldr	r7, [pc, #664]	; (8012380 <_dtoa_r+0x648>)
 80120e8:	f006 020f 	and.w	r2, r6, #15
 80120ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120f8:	f7ee fa7e 	bl	80005f8 <__aeabi_dmul>
 80120fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012100:	1136      	asrs	r6, r6, #4
 8012102:	2300      	movs	r3, #0
 8012104:	2502      	movs	r5, #2
 8012106:	2e00      	cmp	r6, #0
 8012108:	f040 8085 	bne.w	8012216 <_dtoa_r+0x4de>
 801210c:	2b00      	cmp	r3, #0
 801210e:	d1d2      	bne.n	80120b6 <_dtoa_r+0x37e>
 8012110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 808c 	beq.w	8012230 <_dtoa_r+0x4f8>
 8012118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801211c:	4b99      	ldr	r3, [pc, #612]	; (8012384 <_dtoa_r+0x64c>)
 801211e:	2200      	movs	r2, #0
 8012120:	4630      	mov	r0, r6
 8012122:	4639      	mov	r1, r7
 8012124:	f7ee fcda 	bl	8000adc <__aeabi_dcmplt>
 8012128:	2800      	cmp	r0, #0
 801212a:	f000 8081 	beq.w	8012230 <_dtoa_r+0x4f8>
 801212e:	9b01      	ldr	r3, [sp, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d07d      	beq.n	8012230 <_dtoa_r+0x4f8>
 8012134:	f1b9 0f00 	cmp.w	r9, #0
 8012138:	dd3c      	ble.n	80121b4 <_dtoa_r+0x47c>
 801213a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801213e:	9307      	str	r3, [sp, #28]
 8012140:	2200      	movs	r2, #0
 8012142:	4b91      	ldr	r3, [pc, #580]	; (8012388 <_dtoa_r+0x650>)
 8012144:	4630      	mov	r0, r6
 8012146:	4639      	mov	r1, r7
 8012148:	f7ee fa56 	bl	80005f8 <__aeabi_dmul>
 801214c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012150:	3501      	adds	r5, #1
 8012152:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012156:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801215a:	4628      	mov	r0, r5
 801215c:	f7ee f9e2 	bl	8000524 <__aeabi_i2d>
 8012160:	4632      	mov	r2, r6
 8012162:	463b      	mov	r3, r7
 8012164:	f7ee fa48 	bl	80005f8 <__aeabi_dmul>
 8012168:	4b88      	ldr	r3, [pc, #544]	; (801238c <_dtoa_r+0x654>)
 801216a:	2200      	movs	r2, #0
 801216c:	f7ee f88e 	bl	800028c <__adddf3>
 8012170:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012178:	9303      	str	r3, [sp, #12]
 801217a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801217c:	2b00      	cmp	r3, #0
 801217e:	d15c      	bne.n	801223a <_dtoa_r+0x502>
 8012180:	4b83      	ldr	r3, [pc, #524]	; (8012390 <_dtoa_r+0x658>)
 8012182:	2200      	movs	r2, #0
 8012184:	4630      	mov	r0, r6
 8012186:	4639      	mov	r1, r7
 8012188:	f7ee f87e 	bl	8000288 <__aeabi_dsub>
 801218c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012190:	4606      	mov	r6, r0
 8012192:	460f      	mov	r7, r1
 8012194:	f7ee fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 8012198:	2800      	cmp	r0, #0
 801219a:	f040 8296 	bne.w	80126ca <_dtoa_r+0x992>
 801219e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80121a2:	4630      	mov	r0, r6
 80121a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121a8:	4639      	mov	r1, r7
 80121aa:	f7ee fc97 	bl	8000adc <__aeabi_dcmplt>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	f040 8288 	bne.w	80126c4 <_dtoa_r+0x98c>
 80121b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80121b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f2c0 8158 	blt.w	8012474 <_dtoa_r+0x73c>
 80121c4:	f1ba 0f0e 	cmp.w	sl, #14
 80121c8:	f300 8154 	bgt.w	8012474 <_dtoa_r+0x73c>
 80121cc:	4b6b      	ldr	r3, [pc, #428]	; (801237c <_dtoa_r+0x644>)
 80121ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f280 80e3 	bge.w	80123a4 <_dtoa_r+0x66c>
 80121de:	9b01      	ldr	r3, [sp, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f300 80df 	bgt.w	80123a4 <_dtoa_r+0x66c>
 80121e6:	f040 826d 	bne.w	80126c4 <_dtoa_r+0x98c>
 80121ea:	4b69      	ldr	r3, [pc, #420]	; (8012390 <_dtoa_r+0x658>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	4640      	mov	r0, r8
 80121f0:	4649      	mov	r1, r9
 80121f2:	f7ee fa01 	bl	80005f8 <__aeabi_dmul>
 80121f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121fa:	f7ee fc83 	bl	8000b04 <__aeabi_dcmpge>
 80121fe:	9e01      	ldr	r6, [sp, #4]
 8012200:	4637      	mov	r7, r6
 8012202:	2800      	cmp	r0, #0
 8012204:	f040 8243 	bne.w	801268e <_dtoa_r+0x956>
 8012208:	9d00      	ldr	r5, [sp, #0]
 801220a:	2331      	movs	r3, #49	; 0x31
 801220c:	f805 3b01 	strb.w	r3, [r5], #1
 8012210:	f10a 0a01 	add.w	sl, sl, #1
 8012214:	e23f      	b.n	8012696 <_dtoa_r+0x95e>
 8012216:	07f2      	lsls	r2, r6, #31
 8012218:	d505      	bpl.n	8012226 <_dtoa_r+0x4ee>
 801221a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801221e:	f7ee f9eb 	bl	80005f8 <__aeabi_dmul>
 8012222:	3501      	adds	r5, #1
 8012224:	2301      	movs	r3, #1
 8012226:	1076      	asrs	r6, r6, #1
 8012228:	3708      	adds	r7, #8
 801222a:	e76c      	b.n	8012106 <_dtoa_r+0x3ce>
 801222c:	2502      	movs	r5, #2
 801222e:	e76f      	b.n	8012110 <_dtoa_r+0x3d8>
 8012230:	9b01      	ldr	r3, [sp, #4]
 8012232:	f8cd a01c 	str.w	sl, [sp, #28]
 8012236:	930c      	str	r3, [sp, #48]	; 0x30
 8012238:	e78d      	b.n	8012156 <_dtoa_r+0x41e>
 801223a:	9900      	ldr	r1, [sp, #0]
 801223c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801223e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012240:	4b4e      	ldr	r3, [pc, #312]	; (801237c <_dtoa_r+0x644>)
 8012242:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012246:	4401      	add	r1, r0
 8012248:	9102      	str	r1, [sp, #8]
 801224a:	9908      	ldr	r1, [sp, #32]
 801224c:	eeb0 8a47 	vmov.f32	s16, s14
 8012250:	eef0 8a67 	vmov.f32	s17, s15
 8012254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801225c:	2900      	cmp	r1, #0
 801225e:	d045      	beq.n	80122ec <_dtoa_r+0x5b4>
 8012260:	494c      	ldr	r1, [pc, #304]	; (8012394 <_dtoa_r+0x65c>)
 8012262:	2000      	movs	r0, #0
 8012264:	f7ee faf2 	bl	800084c <__aeabi_ddiv>
 8012268:	ec53 2b18 	vmov	r2, r3, d8
 801226c:	f7ee f80c 	bl	8000288 <__aeabi_dsub>
 8012270:	9d00      	ldr	r5, [sp, #0]
 8012272:	ec41 0b18 	vmov	d8, r0, r1
 8012276:	4639      	mov	r1, r7
 8012278:	4630      	mov	r0, r6
 801227a:	f7ee fc6d 	bl	8000b58 <__aeabi_d2iz>
 801227e:	900c      	str	r0, [sp, #48]	; 0x30
 8012280:	f7ee f950 	bl	8000524 <__aeabi_i2d>
 8012284:	4602      	mov	r2, r0
 8012286:	460b      	mov	r3, r1
 8012288:	4630      	mov	r0, r6
 801228a:	4639      	mov	r1, r7
 801228c:	f7ed fffc 	bl	8000288 <__aeabi_dsub>
 8012290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012292:	3330      	adds	r3, #48	; 0x30
 8012294:	f805 3b01 	strb.w	r3, [r5], #1
 8012298:	ec53 2b18 	vmov	r2, r3, d8
 801229c:	4606      	mov	r6, r0
 801229e:	460f      	mov	r7, r1
 80122a0:	f7ee fc1c 	bl	8000adc <__aeabi_dcmplt>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d165      	bne.n	8012374 <_dtoa_r+0x63c>
 80122a8:	4632      	mov	r2, r6
 80122aa:	463b      	mov	r3, r7
 80122ac:	4935      	ldr	r1, [pc, #212]	; (8012384 <_dtoa_r+0x64c>)
 80122ae:	2000      	movs	r0, #0
 80122b0:	f7ed ffea 	bl	8000288 <__aeabi_dsub>
 80122b4:	ec53 2b18 	vmov	r2, r3, d8
 80122b8:	f7ee fc10 	bl	8000adc <__aeabi_dcmplt>
 80122bc:	2800      	cmp	r0, #0
 80122be:	f040 80b9 	bne.w	8012434 <_dtoa_r+0x6fc>
 80122c2:	9b02      	ldr	r3, [sp, #8]
 80122c4:	429d      	cmp	r5, r3
 80122c6:	f43f af75 	beq.w	80121b4 <_dtoa_r+0x47c>
 80122ca:	4b2f      	ldr	r3, [pc, #188]	; (8012388 <_dtoa_r+0x650>)
 80122cc:	ec51 0b18 	vmov	r0, r1, d8
 80122d0:	2200      	movs	r2, #0
 80122d2:	f7ee f991 	bl	80005f8 <__aeabi_dmul>
 80122d6:	4b2c      	ldr	r3, [pc, #176]	; (8012388 <_dtoa_r+0x650>)
 80122d8:	ec41 0b18 	vmov	d8, r0, r1
 80122dc:	2200      	movs	r2, #0
 80122de:	4630      	mov	r0, r6
 80122e0:	4639      	mov	r1, r7
 80122e2:	f7ee f989 	bl	80005f8 <__aeabi_dmul>
 80122e6:	4606      	mov	r6, r0
 80122e8:	460f      	mov	r7, r1
 80122ea:	e7c4      	b.n	8012276 <_dtoa_r+0x53e>
 80122ec:	ec51 0b17 	vmov	r0, r1, d7
 80122f0:	f7ee f982 	bl	80005f8 <__aeabi_dmul>
 80122f4:	9b02      	ldr	r3, [sp, #8]
 80122f6:	9d00      	ldr	r5, [sp, #0]
 80122f8:	930c      	str	r3, [sp, #48]	; 0x30
 80122fa:	ec41 0b18 	vmov	d8, r0, r1
 80122fe:	4639      	mov	r1, r7
 8012300:	4630      	mov	r0, r6
 8012302:	f7ee fc29 	bl	8000b58 <__aeabi_d2iz>
 8012306:	9011      	str	r0, [sp, #68]	; 0x44
 8012308:	f7ee f90c 	bl	8000524 <__aeabi_i2d>
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	4630      	mov	r0, r6
 8012312:	4639      	mov	r1, r7
 8012314:	f7ed ffb8 	bl	8000288 <__aeabi_dsub>
 8012318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801231a:	3330      	adds	r3, #48	; 0x30
 801231c:	f805 3b01 	strb.w	r3, [r5], #1
 8012320:	9b02      	ldr	r3, [sp, #8]
 8012322:	429d      	cmp	r5, r3
 8012324:	4606      	mov	r6, r0
 8012326:	460f      	mov	r7, r1
 8012328:	f04f 0200 	mov.w	r2, #0
 801232c:	d134      	bne.n	8012398 <_dtoa_r+0x660>
 801232e:	4b19      	ldr	r3, [pc, #100]	; (8012394 <_dtoa_r+0x65c>)
 8012330:	ec51 0b18 	vmov	r0, r1, d8
 8012334:	f7ed ffaa 	bl	800028c <__adddf3>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4630      	mov	r0, r6
 801233e:	4639      	mov	r1, r7
 8012340:	f7ee fbea 	bl	8000b18 <__aeabi_dcmpgt>
 8012344:	2800      	cmp	r0, #0
 8012346:	d175      	bne.n	8012434 <_dtoa_r+0x6fc>
 8012348:	ec53 2b18 	vmov	r2, r3, d8
 801234c:	4911      	ldr	r1, [pc, #68]	; (8012394 <_dtoa_r+0x65c>)
 801234e:	2000      	movs	r0, #0
 8012350:	f7ed ff9a 	bl	8000288 <__aeabi_dsub>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4630      	mov	r0, r6
 801235a:	4639      	mov	r1, r7
 801235c:	f7ee fbbe 	bl	8000adc <__aeabi_dcmplt>
 8012360:	2800      	cmp	r0, #0
 8012362:	f43f af27 	beq.w	80121b4 <_dtoa_r+0x47c>
 8012366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012368:	1e6b      	subs	r3, r5, #1
 801236a:	930c      	str	r3, [sp, #48]	; 0x30
 801236c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012370:	2b30      	cmp	r3, #48	; 0x30
 8012372:	d0f8      	beq.n	8012366 <_dtoa_r+0x62e>
 8012374:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012378:	e04a      	b.n	8012410 <_dtoa_r+0x6d8>
 801237a:	bf00      	nop
 801237c:	08015178 	.word	0x08015178
 8012380:	08015150 	.word	0x08015150
 8012384:	3ff00000 	.word	0x3ff00000
 8012388:	40240000 	.word	0x40240000
 801238c:	401c0000 	.word	0x401c0000
 8012390:	40140000 	.word	0x40140000
 8012394:	3fe00000 	.word	0x3fe00000
 8012398:	4baf      	ldr	r3, [pc, #700]	; (8012658 <_dtoa_r+0x920>)
 801239a:	f7ee f92d 	bl	80005f8 <__aeabi_dmul>
 801239e:	4606      	mov	r6, r0
 80123a0:	460f      	mov	r7, r1
 80123a2:	e7ac      	b.n	80122fe <_dtoa_r+0x5c6>
 80123a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123a8:	9d00      	ldr	r5, [sp, #0]
 80123aa:	4642      	mov	r2, r8
 80123ac:	464b      	mov	r3, r9
 80123ae:	4630      	mov	r0, r6
 80123b0:	4639      	mov	r1, r7
 80123b2:	f7ee fa4b 	bl	800084c <__aeabi_ddiv>
 80123b6:	f7ee fbcf 	bl	8000b58 <__aeabi_d2iz>
 80123ba:	9002      	str	r0, [sp, #8]
 80123bc:	f7ee f8b2 	bl	8000524 <__aeabi_i2d>
 80123c0:	4642      	mov	r2, r8
 80123c2:	464b      	mov	r3, r9
 80123c4:	f7ee f918 	bl	80005f8 <__aeabi_dmul>
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	4630      	mov	r0, r6
 80123ce:	4639      	mov	r1, r7
 80123d0:	f7ed ff5a 	bl	8000288 <__aeabi_dsub>
 80123d4:	9e02      	ldr	r6, [sp, #8]
 80123d6:	9f01      	ldr	r7, [sp, #4]
 80123d8:	3630      	adds	r6, #48	; 0x30
 80123da:	f805 6b01 	strb.w	r6, [r5], #1
 80123de:	9e00      	ldr	r6, [sp, #0]
 80123e0:	1bae      	subs	r6, r5, r6
 80123e2:	42b7      	cmp	r7, r6
 80123e4:	4602      	mov	r2, r0
 80123e6:	460b      	mov	r3, r1
 80123e8:	d137      	bne.n	801245a <_dtoa_r+0x722>
 80123ea:	f7ed ff4f 	bl	800028c <__adddf3>
 80123ee:	4642      	mov	r2, r8
 80123f0:	464b      	mov	r3, r9
 80123f2:	4606      	mov	r6, r0
 80123f4:	460f      	mov	r7, r1
 80123f6:	f7ee fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 80123fa:	b9c8      	cbnz	r0, 8012430 <_dtoa_r+0x6f8>
 80123fc:	4642      	mov	r2, r8
 80123fe:	464b      	mov	r3, r9
 8012400:	4630      	mov	r0, r6
 8012402:	4639      	mov	r1, r7
 8012404:	f7ee fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8012408:	b110      	cbz	r0, 8012410 <_dtoa_r+0x6d8>
 801240a:	9b02      	ldr	r3, [sp, #8]
 801240c:	07d9      	lsls	r1, r3, #31
 801240e:	d40f      	bmi.n	8012430 <_dtoa_r+0x6f8>
 8012410:	4620      	mov	r0, r4
 8012412:	4659      	mov	r1, fp
 8012414:	f000 facc 	bl	80129b0 <_Bfree>
 8012418:	2300      	movs	r3, #0
 801241a:	702b      	strb	r3, [r5, #0]
 801241c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801241e:	f10a 0001 	add.w	r0, sl, #1
 8012422:	6018      	str	r0, [r3, #0]
 8012424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012426:	2b00      	cmp	r3, #0
 8012428:	f43f acd8 	beq.w	8011ddc <_dtoa_r+0xa4>
 801242c:	601d      	str	r5, [r3, #0]
 801242e:	e4d5      	b.n	8011ddc <_dtoa_r+0xa4>
 8012430:	f8cd a01c 	str.w	sl, [sp, #28]
 8012434:	462b      	mov	r3, r5
 8012436:	461d      	mov	r5, r3
 8012438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801243c:	2a39      	cmp	r2, #57	; 0x39
 801243e:	d108      	bne.n	8012452 <_dtoa_r+0x71a>
 8012440:	9a00      	ldr	r2, [sp, #0]
 8012442:	429a      	cmp	r2, r3
 8012444:	d1f7      	bne.n	8012436 <_dtoa_r+0x6fe>
 8012446:	9a07      	ldr	r2, [sp, #28]
 8012448:	9900      	ldr	r1, [sp, #0]
 801244a:	3201      	adds	r2, #1
 801244c:	9207      	str	r2, [sp, #28]
 801244e:	2230      	movs	r2, #48	; 0x30
 8012450:	700a      	strb	r2, [r1, #0]
 8012452:	781a      	ldrb	r2, [r3, #0]
 8012454:	3201      	adds	r2, #1
 8012456:	701a      	strb	r2, [r3, #0]
 8012458:	e78c      	b.n	8012374 <_dtoa_r+0x63c>
 801245a:	4b7f      	ldr	r3, [pc, #508]	; (8012658 <_dtoa_r+0x920>)
 801245c:	2200      	movs	r2, #0
 801245e:	f7ee f8cb 	bl	80005f8 <__aeabi_dmul>
 8012462:	2200      	movs	r2, #0
 8012464:	2300      	movs	r3, #0
 8012466:	4606      	mov	r6, r0
 8012468:	460f      	mov	r7, r1
 801246a:	f7ee fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 801246e:	2800      	cmp	r0, #0
 8012470:	d09b      	beq.n	80123aa <_dtoa_r+0x672>
 8012472:	e7cd      	b.n	8012410 <_dtoa_r+0x6d8>
 8012474:	9a08      	ldr	r2, [sp, #32]
 8012476:	2a00      	cmp	r2, #0
 8012478:	f000 80c4 	beq.w	8012604 <_dtoa_r+0x8cc>
 801247c:	9a05      	ldr	r2, [sp, #20]
 801247e:	2a01      	cmp	r2, #1
 8012480:	f300 80a8 	bgt.w	80125d4 <_dtoa_r+0x89c>
 8012484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012486:	2a00      	cmp	r2, #0
 8012488:	f000 80a0 	beq.w	80125cc <_dtoa_r+0x894>
 801248c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012490:	9e06      	ldr	r6, [sp, #24]
 8012492:	4645      	mov	r5, r8
 8012494:	9a04      	ldr	r2, [sp, #16]
 8012496:	2101      	movs	r1, #1
 8012498:	441a      	add	r2, r3
 801249a:	4620      	mov	r0, r4
 801249c:	4498      	add	r8, r3
 801249e:	9204      	str	r2, [sp, #16]
 80124a0:	f000 fb42 	bl	8012b28 <__i2b>
 80124a4:	4607      	mov	r7, r0
 80124a6:	2d00      	cmp	r5, #0
 80124a8:	dd0b      	ble.n	80124c2 <_dtoa_r+0x78a>
 80124aa:	9b04      	ldr	r3, [sp, #16]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	dd08      	ble.n	80124c2 <_dtoa_r+0x78a>
 80124b0:	42ab      	cmp	r3, r5
 80124b2:	9a04      	ldr	r2, [sp, #16]
 80124b4:	bfa8      	it	ge
 80124b6:	462b      	movge	r3, r5
 80124b8:	eba8 0803 	sub.w	r8, r8, r3
 80124bc:	1aed      	subs	r5, r5, r3
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	9304      	str	r3, [sp, #16]
 80124c2:	9b06      	ldr	r3, [sp, #24]
 80124c4:	b1fb      	cbz	r3, 8012506 <_dtoa_r+0x7ce>
 80124c6:	9b08      	ldr	r3, [sp, #32]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	f000 809f 	beq.w	801260c <_dtoa_r+0x8d4>
 80124ce:	2e00      	cmp	r6, #0
 80124d0:	dd11      	ble.n	80124f6 <_dtoa_r+0x7be>
 80124d2:	4639      	mov	r1, r7
 80124d4:	4632      	mov	r2, r6
 80124d6:	4620      	mov	r0, r4
 80124d8:	f000 fbe2 	bl	8012ca0 <__pow5mult>
 80124dc:	465a      	mov	r2, fp
 80124de:	4601      	mov	r1, r0
 80124e0:	4607      	mov	r7, r0
 80124e2:	4620      	mov	r0, r4
 80124e4:	f000 fb36 	bl	8012b54 <__multiply>
 80124e8:	4659      	mov	r1, fp
 80124ea:	9007      	str	r0, [sp, #28]
 80124ec:	4620      	mov	r0, r4
 80124ee:	f000 fa5f 	bl	80129b0 <_Bfree>
 80124f2:	9b07      	ldr	r3, [sp, #28]
 80124f4:	469b      	mov	fp, r3
 80124f6:	9b06      	ldr	r3, [sp, #24]
 80124f8:	1b9a      	subs	r2, r3, r6
 80124fa:	d004      	beq.n	8012506 <_dtoa_r+0x7ce>
 80124fc:	4659      	mov	r1, fp
 80124fe:	4620      	mov	r0, r4
 8012500:	f000 fbce 	bl	8012ca0 <__pow5mult>
 8012504:	4683      	mov	fp, r0
 8012506:	2101      	movs	r1, #1
 8012508:	4620      	mov	r0, r4
 801250a:	f000 fb0d 	bl	8012b28 <__i2b>
 801250e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012510:	2b00      	cmp	r3, #0
 8012512:	4606      	mov	r6, r0
 8012514:	dd7c      	ble.n	8012610 <_dtoa_r+0x8d8>
 8012516:	461a      	mov	r2, r3
 8012518:	4601      	mov	r1, r0
 801251a:	4620      	mov	r0, r4
 801251c:	f000 fbc0 	bl	8012ca0 <__pow5mult>
 8012520:	9b05      	ldr	r3, [sp, #20]
 8012522:	2b01      	cmp	r3, #1
 8012524:	4606      	mov	r6, r0
 8012526:	dd76      	ble.n	8012616 <_dtoa_r+0x8de>
 8012528:	2300      	movs	r3, #0
 801252a:	9306      	str	r3, [sp, #24]
 801252c:	6933      	ldr	r3, [r6, #16]
 801252e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012532:	6918      	ldr	r0, [r3, #16]
 8012534:	f000 faa8 	bl	8012a88 <__hi0bits>
 8012538:	f1c0 0020 	rsb	r0, r0, #32
 801253c:	9b04      	ldr	r3, [sp, #16]
 801253e:	4418      	add	r0, r3
 8012540:	f010 001f 	ands.w	r0, r0, #31
 8012544:	f000 8086 	beq.w	8012654 <_dtoa_r+0x91c>
 8012548:	f1c0 0320 	rsb	r3, r0, #32
 801254c:	2b04      	cmp	r3, #4
 801254e:	dd7f      	ble.n	8012650 <_dtoa_r+0x918>
 8012550:	f1c0 001c 	rsb	r0, r0, #28
 8012554:	9b04      	ldr	r3, [sp, #16]
 8012556:	4403      	add	r3, r0
 8012558:	4480      	add	r8, r0
 801255a:	4405      	add	r5, r0
 801255c:	9304      	str	r3, [sp, #16]
 801255e:	f1b8 0f00 	cmp.w	r8, #0
 8012562:	dd05      	ble.n	8012570 <_dtoa_r+0x838>
 8012564:	4659      	mov	r1, fp
 8012566:	4642      	mov	r2, r8
 8012568:	4620      	mov	r0, r4
 801256a:	f000 fbf3 	bl	8012d54 <__lshift>
 801256e:	4683      	mov	fp, r0
 8012570:	9b04      	ldr	r3, [sp, #16]
 8012572:	2b00      	cmp	r3, #0
 8012574:	dd05      	ble.n	8012582 <_dtoa_r+0x84a>
 8012576:	4631      	mov	r1, r6
 8012578:	461a      	mov	r2, r3
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fbea 	bl	8012d54 <__lshift>
 8012580:	4606      	mov	r6, r0
 8012582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012584:	2b00      	cmp	r3, #0
 8012586:	d069      	beq.n	801265c <_dtoa_r+0x924>
 8012588:	4631      	mov	r1, r6
 801258a:	4658      	mov	r0, fp
 801258c:	f000 fc4e 	bl	8012e2c <__mcmp>
 8012590:	2800      	cmp	r0, #0
 8012592:	da63      	bge.n	801265c <_dtoa_r+0x924>
 8012594:	2300      	movs	r3, #0
 8012596:	4659      	mov	r1, fp
 8012598:	220a      	movs	r2, #10
 801259a:	4620      	mov	r0, r4
 801259c:	f000 fa2a 	bl	80129f4 <__multadd>
 80125a0:	9b08      	ldr	r3, [sp, #32]
 80125a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125a6:	4683      	mov	fp, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 818f 	beq.w	80128cc <_dtoa_r+0xb94>
 80125ae:	4639      	mov	r1, r7
 80125b0:	2300      	movs	r3, #0
 80125b2:	220a      	movs	r2, #10
 80125b4:	4620      	mov	r0, r4
 80125b6:	f000 fa1d 	bl	80129f4 <__multadd>
 80125ba:	f1b9 0f00 	cmp.w	r9, #0
 80125be:	4607      	mov	r7, r0
 80125c0:	f300 808e 	bgt.w	80126e0 <_dtoa_r+0x9a8>
 80125c4:	9b05      	ldr	r3, [sp, #20]
 80125c6:	2b02      	cmp	r3, #2
 80125c8:	dc50      	bgt.n	801266c <_dtoa_r+0x934>
 80125ca:	e089      	b.n	80126e0 <_dtoa_r+0x9a8>
 80125cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80125d2:	e75d      	b.n	8012490 <_dtoa_r+0x758>
 80125d4:	9b01      	ldr	r3, [sp, #4]
 80125d6:	1e5e      	subs	r6, r3, #1
 80125d8:	9b06      	ldr	r3, [sp, #24]
 80125da:	42b3      	cmp	r3, r6
 80125dc:	bfbf      	itttt	lt
 80125de:	9b06      	ldrlt	r3, [sp, #24]
 80125e0:	9606      	strlt	r6, [sp, #24]
 80125e2:	1af2      	sublt	r2, r6, r3
 80125e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80125e6:	bfb6      	itet	lt
 80125e8:	189b      	addlt	r3, r3, r2
 80125ea:	1b9e      	subge	r6, r3, r6
 80125ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80125ee:	9b01      	ldr	r3, [sp, #4]
 80125f0:	bfb8      	it	lt
 80125f2:	2600      	movlt	r6, #0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	bfb5      	itete	lt
 80125f8:	eba8 0503 	sublt.w	r5, r8, r3
 80125fc:	9b01      	ldrge	r3, [sp, #4]
 80125fe:	2300      	movlt	r3, #0
 8012600:	4645      	movge	r5, r8
 8012602:	e747      	b.n	8012494 <_dtoa_r+0x75c>
 8012604:	9e06      	ldr	r6, [sp, #24]
 8012606:	9f08      	ldr	r7, [sp, #32]
 8012608:	4645      	mov	r5, r8
 801260a:	e74c      	b.n	80124a6 <_dtoa_r+0x76e>
 801260c:	9a06      	ldr	r2, [sp, #24]
 801260e:	e775      	b.n	80124fc <_dtoa_r+0x7c4>
 8012610:	9b05      	ldr	r3, [sp, #20]
 8012612:	2b01      	cmp	r3, #1
 8012614:	dc18      	bgt.n	8012648 <_dtoa_r+0x910>
 8012616:	9b02      	ldr	r3, [sp, #8]
 8012618:	b9b3      	cbnz	r3, 8012648 <_dtoa_r+0x910>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012620:	b9a3      	cbnz	r3, 801264c <_dtoa_r+0x914>
 8012622:	9b03      	ldr	r3, [sp, #12]
 8012624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012628:	0d1b      	lsrs	r3, r3, #20
 801262a:	051b      	lsls	r3, r3, #20
 801262c:	b12b      	cbz	r3, 801263a <_dtoa_r+0x902>
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	3301      	adds	r3, #1
 8012632:	9304      	str	r3, [sp, #16]
 8012634:	f108 0801 	add.w	r8, r8, #1
 8012638:	2301      	movs	r3, #1
 801263a:	9306      	str	r3, [sp, #24]
 801263c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801263e:	2b00      	cmp	r3, #0
 8012640:	f47f af74 	bne.w	801252c <_dtoa_r+0x7f4>
 8012644:	2001      	movs	r0, #1
 8012646:	e779      	b.n	801253c <_dtoa_r+0x804>
 8012648:	2300      	movs	r3, #0
 801264a:	e7f6      	b.n	801263a <_dtoa_r+0x902>
 801264c:	9b02      	ldr	r3, [sp, #8]
 801264e:	e7f4      	b.n	801263a <_dtoa_r+0x902>
 8012650:	d085      	beq.n	801255e <_dtoa_r+0x826>
 8012652:	4618      	mov	r0, r3
 8012654:	301c      	adds	r0, #28
 8012656:	e77d      	b.n	8012554 <_dtoa_r+0x81c>
 8012658:	40240000 	.word	0x40240000
 801265c:	9b01      	ldr	r3, [sp, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	dc38      	bgt.n	80126d4 <_dtoa_r+0x99c>
 8012662:	9b05      	ldr	r3, [sp, #20]
 8012664:	2b02      	cmp	r3, #2
 8012666:	dd35      	ble.n	80126d4 <_dtoa_r+0x99c>
 8012668:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801266c:	f1b9 0f00 	cmp.w	r9, #0
 8012670:	d10d      	bne.n	801268e <_dtoa_r+0x956>
 8012672:	4631      	mov	r1, r6
 8012674:	464b      	mov	r3, r9
 8012676:	2205      	movs	r2, #5
 8012678:	4620      	mov	r0, r4
 801267a:	f000 f9bb 	bl	80129f4 <__multadd>
 801267e:	4601      	mov	r1, r0
 8012680:	4606      	mov	r6, r0
 8012682:	4658      	mov	r0, fp
 8012684:	f000 fbd2 	bl	8012e2c <__mcmp>
 8012688:	2800      	cmp	r0, #0
 801268a:	f73f adbd 	bgt.w	8012208 <_dtoa_r+0x4d0>
 801268e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012690:	9d00      	ldr	r5, [sp, #0]
 8012692:	ea6f 0a03 	mvn.w	sl, r3
 8012696:	f04f 0800 	mov.w	r8, #0
 801269a:	4631      	mov	r1, r6
 801269c:	4620      	mov	r0, r4
 801269e:	f000 f987 	bl	80129b0 <_Bfree>
 80126a2:	2f00      	cmp	r7, #0
 80126a4:	f43f aeb4 	beq.w	8012410 <_dtoa_r+0x6d8>
 80126a8:	f1b8 0f00 	cmp.w	r8, #0
 80126ac:	d005      	beq.n	80126ba <_dtoa_r+0x982>
 80126ae:	45b8      	cmp	r8, r7
 80126b0:	d003      	beq.n	80126ba <_dtoa_r+0x982>
 80126b2:	4641      	mov	r1, r8
 80126b4:	4620      	mov	r0, r4
 80126b6:	f000 f97b 	bl	80129b0 <_Bfree>
 80126ba:	4639      	mov	r1, r7
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 f977 	bl	80129b0 <_Bfree>
 80126c2:	e6a5      	b.n	8012410 <_dtoa_r+0x6d8>
 80126c4:	2600      	movs	r6, #0
 80126c6:	4637      	mov	r7, r6
 80126c8:	e7e1      	b.n	801268e <_dtoa_r+0x956>
 80126ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80126cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80126d0:	4637      	mov	r7, r6
 80126d2:	e599      	b.n	8012208 <_dtoa_r+0x4d0>
 80126d4:	9b08      	ldr	r3, [sp, #32]
 80126d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f000 80fd 	beq.w	80128da <_dtoa_r+0xba2>
 80126e0:	2d00      	cmp	r5, #0
 80126e2:	dd05      	ble.n	80126f0 <_dtoa_r+0x9b8>
 80126e4:	4639      	mov	r1, r7
 80126e6:	462a      	mov	r2, r5
 80126e8:	4620      	mov	r0, r4
 80126ea:	f000 fb33 	bl	8012d54 <__lshift>
 80126ee:	4607      	mov	r7, r0
 80126f0:	9b06      	ldr	r3, [sp, #24]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d05c      	beq.n	80127b0 <_dtoa_r+0xa78>
 80126f6:	6879      	ldr	r1, [r7, #4]
 80126f8:	4620      	mov	r0, r4
 80126fa:	f000 f919 	bl	8012930 <_Balloc>
 80126fe:	4605      	mov	r5, r0
 8012700:	b928      	cbnz	r0, 801270e <_dtoa_r+0x9d6>
 8012702:	4b80      	ldr	r3, [pc, #512]	; (8012904 <_dtoa_r+0xbcc>)
 8012704:	4602      	mov	r2, r0
 8012706:	f240 21ea 	movw	r1, #746	; 0x2ea
 801270a:	f7ff bb2e 	b.w	8011d6a <_dtoa_r+0x32>
 801270e:	693a      	ldr	r2, [r7, #16]
 8012710:	3202      	adds	r2, #2
 8012712:	0092      	lsls	r2, r2, #2
 8012714:	f107 010c 	add.w	r1, r7, #12
 8012718:	300c      	adds	r0, #12
 801271a:	f7fe fceb 	bl	80110f4 <memcpy>
 801271e:	2201      	movs	r2, #1
 8012720:	4629      	mov	r1, r5
 8012722:	4620      	mov	r0, r4
 8012724:	f000 fb16 	bl	8012d54 <__lshift>
 8012728:	9b00      	ldr	r3, [sp, #0]
 801272a:	3301      	adds	r3, #1
 801272c:	9301      	str	r3, [sp, #4]
 801272e:	9b00      	ldr	r3, [sp, #0]
 8012730:	444b      	add	r3, r9
 8012732:	9307      	str	r3, [sp, #28]
 8012734:	9b02      	ldr	r3, [sp, #8]
 8012736:	f003 0301 	and.w	r3, r3, #1
 801273a:	46b8      	mov	r8, r7
 801273c:	9306      	str	r3, [sp, #24]
 801273e:	4607      	mov	r7, r0
 8012740:	9b01      	ldr	r3, [sp, #4]
 8012742:	4631      	mov	r1, r6
 8012744:	3b01      	subs	r3, #1
 8012746:	4658      	mov	r0, fp
 8012748:	9302      	str	r3, [sp, #8]
 801274a:	f7ff fa69 	bl	8011c20 <quorem>
 801274e:	4603      	mov	r3, r0
 8012750:	3330      	adds	r3, #48	; 0x30
 8012752:	9004      	str	r0, [sp, #16]
 8012754:	4641      	mov	r1, r8
 8012756:	4658      	mov	r0, fp
 8012758:	9308      	str	r3, [sp, #32]
 801275a:	f000 fb67 	bl	8012e2c <__mcmp>
 801275e:	463a      	mov	r2, r7
 8012760:	4681      	mov	r9, r0
 8012762:	4631      	mov	r1, r6
 8012764:	4620      	mov	r0, r4
 8012766:	f000 fb7d 	bl	8012e64 <__mdiff>
 801276a:	68c2      	ldr	r2, [r0, #12]
 801276c:	9b08      	ldr	r3, [sp, #32]
 801276e:	4605      	mov	r5, r0
 8012770:	bb02      	cbnz	r2, 80127b4 <_dtoa_r+0xa7c>
 8012772:	4601      	mov	r1, r0
 8012774:	4658      	mov	r0, fp
 8012776:	f000 fb59 	bl	8012e2c <__mcmp>
 801277a:	9b08      	ldr	r3, [sp, #32]
 801277c:	4602      	mov	r2, r0
 801277e:	4629      	mov	r1, r5
 8012780:	4620      	mov	r0, r4
 8012782:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012786:	f000 f913 	bl	80129b0 <_Bfree>
 801278a:	9b05      	ldr	r3, [sp, #20]
 801278c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801278e:	9d01      	ldr	r5, [sp, #4]
 8012790:	ea43 0102 	orr.w	r1, r3, r2
 8012794:	9b06      	ldr	r3, [sp, #24]
 8012796:	430b      	orrs	r3, r1
 8012798:	9b08      	ldr	r3, [sp, #32]
 801279a:	d10d      	bne.n	80127b8 <_dtoa_r+0xa80>
 801279c:	2b39      	cmp	r3, #57	; 0x39
 801279e:	d029      	beq.n	80127f4 <_dtoa_r+0xabc>
 80127a0:	f1b9 0f00 	cmp.w	r9, #0
 80127a4:	dd01      	ble.n	80127aa <_dtoa_r+0xa72>
 80127a6:	9b04      	ldr	r3, [sp, #16]
 80127a8:	3331      	adds	r3, #49	; 0x31
 80127aa:	9a02      	ldr	r2, [sp, #8]
 80127ac:	7013      	strb	r3, [r2, #0]
 80127ae:	e774      	b.n	801269a <_dtoa_r+0x962>
 80127b0:	4638      	mov	r0, r7
 80127b2:	e7b9      	b.n	8012728 <_dtoa_r+0x9f0>
 80127b4:	2201      	movs	r2, #1
 80127b6:	e7e2      	b.n	801277e <_dtoa_r+0xa46>
 80127b8:	f1b9 0f00 	cmp.w	r9, #0
 80127bc:	db06      	blt.n	80127cc <_dtoa_r+0xa94>
 80127be:	9905      	ldr	r1, [sp, #20]
 80127c0:	ea41 0909 	orr.w	r9, r1, r9
 80127c4:	9906      	ldr	r1, [sp, #24]
 80127c6:	ea59 0101 	orrs.w	r1, r9, r1
 80127ca:	d120      	bne.n	801280e <_dtoa_r+0xad6>
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	ddec      	ble.n	80127aa <_dtoa_r+0xa72>
 80127d0:	4659      	mov	r1, fp
 80127d2:	2201      	movs	r2, #1
 80127d4:	4620      	mov	r0, r4
 80127d6:	9301      	str	r3, [sp, #4]
 80127d8:	f000 fabc 	bl	8012d54 <__lshift>
 80127dc:	4631      	mov	r1, r6
 80127de:	4683      	mov	fp, r0
 80127e0:	f000 fb24 	bl	8012e2c <__mcmp>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	9b01      	ldr	r3, [sp, #4]
 80127e8:	dc02      	bgt.n	80127f0 <_dtoa_r+0xab8>
 80127ea:	d1de      	bne.n	80127aa <_dtoa_r+0xa72>
 80127ec:	07da      	lsls	r2, r3, #31
 80127ee:	d5dc      	bpl.n	80127aa <_dtoa_r+0xa72>
 80127f0:	2b39      	cmp	r3, #57	; 0x39
 80127f2:	d1d8      	bne.n	80127a6 <_dtoa_r+0xa6e>
 80127f4:	9a02      	ldr	r2, [sp, #8]
 80127f6:	2339      	movs	r3, #57	; 0x39
 80127f8:	7013      	strb	r3, [r2, #0]
 80127fa:	462b      	mov	r3, r5
 80127fc:	461d      	mov	r5, r3
 80127fe:	3b01      	subs	r3, #1
 8012800:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012804:	2a39      	cmp	r2, #57	; 0x39
 8012806:	d050      	beq.n	80128aa <_dtoa_r+0xb72>
 8012808:	3201      	adds	r2, #1
 801280a:	701a      	strb	r2, [r3, #0]
 801280c:	e745      	b.n	801269a <_dtoa_r+0x962>
 801280e:	2a00      	cmp	r2, #0
 8012810:	dd03      	ble.n	801281a <_dtoa_r+0xae2>
 8012812:	2b39      	cmp	r3, #57	; 0x39
 8012814:	d0ee      	beq.n	80127f4 <_dtoa_r+0xabc>
 8012816:	3301      	adds	r3, #1
 8012818:	e7c7      	b.n	80127aa <_dtoa_r+0xa72>
 801281a:	9a01      	ldr	r2, [sp, #4]
 801281c:	9907      	ldr	r1, [sp, #28]
 801281e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012822:	428a      	cmp	r2, r1
 8012824:	d02a      	beq.n	801287c <_dtoa_r+0xb44>
 8012826:	4659      	mov	r1, fp
 8012828:	2300      	movs	r3, #0
 801282a:	220a      	movs	r2, #10
 801282c:	4620      	mov	r0, r4
 801282e:	f000 f8e1 	bl	80129f4 <__multadd>
 8012832:	45b8      	cmp	r8, r7
 8012834:	4683      	mov	fp, r0
 8012836:	f04f 0300 	mov.w	r3, #0
 801283a:	f04f 020a 	mov.w	r2, #10
 801283e:	4641      	mov	r1, r8
 8012840:	4620      	mov	r0, r4
 8012842:	d107      	bne.n	8012854 <_dtoa_r+0xb1c>
 8012844:	f000 f8d6 	bl	80129f4 <__multadd>
 8012848:	4680      	mov	r8, r0
 801284a:	4607      	mov	r7, r0
 801284c:	9b01      	ldr	r3, [sp, #4]
 801284e:	3301      	adds	r3, #1
 8012850:	9301      	str	r3, [sp, #4]
 8012852:	e775      	b.n	8012740 <_dtoa_r+0xa08>
 8012854:	f000 f8ce 	bl	80129f4 <__multadd>
 8012858:	4639      	mov	r1, r7
 801285a:	4680      	mov	r8, r0
 801285c:	2300      	movs	r3, #0
 801285e:	220a      	movs	r2, #10
 8012860:	4620      	mov	r0, r4
 8012862:	f000 f8c7 	bl	80129f4 <__multadd>
 8012866:	4607      	mov	r7, r0
 8012868:	e7f0      	b.n	801284c <_dtoa_r+0xb14>
 801286a:	f1b9 0f00 	cmp.w	r9, #0
 801286e:	9a00      	ldr	r2, [sp, #0]
 8012870:	bfcc      	ite	gt
 8012872:	464d      	movgt	r5, r9
 8012874:	2501      	movle	r5, #1
 8012876:	4415      	add	r5, r2
 8012878:	f04f 0800 	mov.w	r8, #0
 801287c:	4659      	mov	r1, fp
 801287e:	2201      	movs	r2, #1
 8012880:	4620      	mov	r0, r4
 8012882:	9301      	str	r3, [sp, #4]
 8012884:	f000 fa66 	bl	8012d54 <__lshift>
 8012888:	4631      	mov	r1, r6
 801288a:	4683      	mov	fp, r0
 801288c:	f000 face 	bl	8012e2c <__mcmp>
 8012890:	2800      	cmp	r0, #0
 8012892:	dcb2      	bgt.n	80127fa <_dtoa_r+0xac2>
 8012894:	d102      	bne.n	801289c <_dtoa_r+0xb64>
 8012896:	9b01      	ldr	r3, [sp, #4]
 8012898:	07db      	lsls	r3, r3, #31
 801289a:	d4ae      	bmi.n	80127fa <_dtoa_r+0xac2>
 801289c:	462b      	mov	r3, r5
 801289e:	461d      	mov	r5, r3
 80128a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128a4:	2a30      	cmp	r2, #48	; 0x30
 80128a6:	d0fa      	beq.n	801289e <_dtoa_r+0xb66>
 80128a8:	e6f7      	b.n	801269a <_dtoa_r+0x962>
 80128aa:	9a00      	ldr	r2, [sp, #0]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d1a5      	bne.n	80127fc <_dtoa_r+0xac4>
 80128b0:	f10a 0a01 	add.w	sl, sl, #1
 80128b4:	2331      	movs	r3, #49	; 0x31
 80128b6:	e779      	b.n	80127ac <_dtoa_r+0xa74>
 80128b8:	4b13      	ldr	r3, [pc, #76]	; (8012908 <_dtoa_r+0xbd0>)
 80128ba:	f7ff baaf 	b.w	8011e1c <_dtoa_r+0xe4>
 80128be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f47f aa86 	bne.w	8011dd2 <_dtoa_r+0x9a>
 80128c6:	4b11      	ldr	r3, [pc, #68]	; (801290c <_dtoa_r+0xbd4>)
 80128c8:	f7ff baa8 	b.w	8011e1c <_dtoa_r+0xe4>
 80128cc:	f1b9 0f00 	cmp.w	r9, #0
 80128d0:	dc03      	bgt.n	80128da <_dtoa_r+0xba2>
 80128d2:	9b05      	ldr	r3, [sp, #20]
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	f73f aec9 	bgt.w	801266c <_dtoa_r+0x934>
 80128da:	9d00      	ldr	r5, [sp, #0]
 80128dc:	4631      	mov	r1, r6
 80128de:	4658      	mov	r0, fp
 80128e0:	f7ff f99e 	bl	8011c20 <quorem>
 80128e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80128e8:	f805 3b01 	strb.w	r3, [r5], #1
 80128ec:	9a00      	ldr	r2, [sp, #0]
 80128ee:	1aaa      	subs	r2, r5, r2
 80128f0:	4591      	cmp	r9, r2
 80128f2:	ddba      	ble.n	801286a <_dtoa_r+0xb32>
 80128f4:	4659      	mov	r1, fp
 80128f6:	2300      	movs	r3, #0
 80128f8:	220a      	movs	r2, #10
 80128fa:	4620      	mov	r0, r4
 80128fc:	f000 f87a 	bl	80129f4 <__multadd>
 8012900:	4683      	mov	fp, r0
 8012902:	e7eb      	b.n	80128dc <_dtoa_r+0xba4>
 8012904:	080150df 	.word	0x080150df
 8012908:	08015038 	.word	0x08015038
 801290c:	0801505c 	.word	0x0801505c

08012910 <_localeconv_r>:
 8012910:	4800      	ldr	r0, [pc, #0]	; (8012914 <_localeconv_r+0x4>)
 8012912:	4770      	bx	lr
 8012914:	2000037c 	.word	0x2000037c

08012918 <__malloc_lock>:
 8012918:	4801      	ldr	r0, [pc, #4]	; (8012920 <__malloc_lock+0x8>)
 801291a:	f000 bd22 	b.w	8013362 <__retarget_lock_acquire_recursive>
 801291e:	bf00      	nop
 8012920:	20004f3c 	.word	0x20004f3c

08012924 <__malloc_unlock>:
 8012924:	4801      	ldr	r0, [pc, #4]	; (801292c <__malloc_unlock+0x8>)
 8012926:	f000 bd1d 	b.w	8013364 <__retarget_lock_release_recursive>
 801292a:	bf00      	nop
 801292c:	20004f3c 	.word	0x20004f3c

08012930 <_Balloc>:
 8012930:	b570      	push	{r4, r5, r6, lr}
 8012932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012934:	4604      	mov	r4, r0
 8012936:	460d      	mov	r5, r1
 8012938:	b976      	cbnz	r6, 8012958 <_Balloc+0x28>
 801293a:	2010      	movs	r0, #16
 801293c:	f7fe fbca 	bl	80110d4 <malloc>
 8012940:	4602      	mov	r2, r0
 8012942:	6260      	str	r0, [r4, #36]	; 0x24
 8012944:	b920      	cbnz	r0, 8012950 <_Balloc+0x20>
 8012946:	4b18      	ldr	r3, [pc, #96]	; (80129a8 <_Balloc+0x78>)
 8012948:	4818      	ldr	r0, [pc, #96]	; (80129ac <_Balloc+0x7c>)
 801294a:	2166      	movs	r1, #102	; 0x66
 801294c:	f000 fcd8 	bl	8013300 <__assert_func>
 8012950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012954:	6006      	str	r6, [r0, #0]
 8012956:	60c6      	str	r6, [r0, #12]
 8012958:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801295a:	68f3      	ldr	r3, [r6, #12]
 801295c:	b183      	cbz	r3, 8012980 <_Balloc+0x50>
 801295e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012960:	68db      	ldr	r3, [r3, #12]
 8012962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012966:	b9b8      	cbnz	r0, 8012998 <_Balloc+0x68>
 8012968:	2101      	movs	r1, #1
 801296a:	fa01 f605 	lsl.w	r6, r1, r5
 801296e:	1d72      	adds	r2, r6, #5
 8012970:	0092      	lsls	r2, r2, #2
 8012972:	4620      	mov	r0, r4
 8012974:	f000 fb5a 	bl	801302c <_calloc_r>
 8012978:	b160      	cbz	r0, 8012994 <_Balloc+0x64>
 801297a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801297e:	e00e      	b.n	801299e <_Balloc+0x6e>
 8012980:	2221      	movs	r2, #33	; 0x21
 8012982:	2104      	movs	r1, #4
 8012984:	4620      	mov	r0, r4
 8012986:	f000 fb51 	bl	801302c <_calloc_r>
 801298a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801298c:	60f0      	str	r0, [r6, #12]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1e4      	bne.n	801295e <_Balloc+0x2e>
 8012994:	2000      	movs	r0, #0
 8012996:	bd70      	pop	{r4, r5, r6, pc}
 8012998:	6802      	ldr	r2, [r0, #0]
 801299a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801299e:	2300      	movs	r3, #0
 80129a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129a4:	e7f7      	b.n	8012996 <_Balloc+0x66>
 80129a6:	bf00      	nop
 80129a8:	08015069 	.word	0x08015069
 80129ac:	080150f0 	.word	0x080150f0

080129b0 <_Bfree>:
 80129b0:	b570      	push	{r4, r5, r6, lr}
 80129b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80129b4:	4605      	mov	r5, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	b976      	cbnz	r6, 80129d8 <_Bfree+0x28>
 80129ba:	2010      	movs	r0, #16
 80129bc:	f7fe fb8a 	bl	80110d4 <malloc>
 80129c0:	4602      	mov	r2, r0
 80129c2:	6268      	str	r0, [r5, #36]	; 0x24
 80129c4:	b920      	cbnz	r0, 80129d0 <_Bfree+0x20>
 80129c6:	4b09      	ldr	r3, [pc, #36]	; (80129ec <_Bfree+0x3c>)
 80129c8:	4809      	ldr	r0, [pc, #36]	; (80129f0 <_Bfree+0x40>)
 80129ca:	218a      	movs	r1, #138	; 0x8a
 80129cc:	f000 fc98 	bl	8013300 <__assert_func>
 80129d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129d4:	6006      	str	r6, [r0, #0]
 80129d6:	60c6      	str	r6, [r0, #12]
 80129d8:	b13c      	cbz	r4, 80129ea <_Bfree+0x3a>
 80129da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80129dc:	6862      	ldr	r2, [r4, #4]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129e4:	6021      	str	r1, [r4, #0]
 80129e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80129ea:	bd70      	pop	{r4, r5, r6, pc}
 80129ec:	08015069 	.word	0x08015069
 80129f0:	080150f0 	.word	0x080150f0

080129f4 <__multadd>:
 80129f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	690e      	ldr	r6, [r1, #16]
 80129fa:	4607      	mov	r7, r0
 80129fc:	4698      	mov	r8, r3
 80129fe:	460c      	mov	r4, r1
 8012a00:	f101 0014 	add.w	r0, r1, #20
 8012a04:	2300      	movs	r3, #0
 8012a06:	6805      	ldr	r5, [r0, #0]
 8012a08:	b2a9      	uxth	r1, r5
 8012a0a:	fb02 8101 	mla	r1, r2, r1, r8
 8012a0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012a12:	0c2d      	lsrs	r5, r5, #16
 8012a14:	fb02 c505 	mla	r5, r2, r5, ip
 8012a18:	b289      	uxth	r1, r1
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012a20:	429e      	cmp	r6, r3
 8012a22:	f840 1b04 	str.w	r1, [r0], #4
 8012a26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012a2a:	dcec      	bgt.n	8012a06 <__multadd+0x12>
 8012a2c:	f1b8 0f00 	cmp.w	r8, #0
 8012a30:	d022      	beq.n	8012a78 <__multadd+0x84>
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	42b3      	cmp	r3, r6
 8012a36:	dc19      	bgt.n	8012a6c <__multadd+0x78>
 8012a38:	6861      	ldr	r1, [r4, #4]
 8012a3a:	4638      	mov	r0, r7
 8012a3c:	3101      	adds	r1, #1
 8012a3e:	f7ff ff77 	bl	8012930 <_Balloc>
 8012a42:	4605      	mov	r5, r0
 8012a44:	b928      	cbnz	r0, 8012a52 <__multadd+0x5e>
 8012a46:	4602      	mov	r2, r0
 8012a48:	4b0d      	ldr	r3, [pc, #52]	; (8012a80 <__multadd+0x8c>)
 8012a4a:	480e      	ldr	r0, [pc, #56]	; (8012a84 <__multadd+0x90>)
 8012a4c:	21b5      	movs	r1, #181	; 0xb5
 8012a4e:	f000 fc57 	bl	8013300 <__assert_func>
 8012a52:	6922      	ldr	r2, [r4, #16]
 8012a54:	3202      	adds	r2, #2
 8012a56:	f104 010c 	add.w	r1, r4, #12
 8012a5a:	0092      	lsls	r2, r2, #2
 8012a5c:	300c      	adds	r0, #12
 8012a5e:	f7fe fb49 	bl	80110f4 <memcpy>
 8012a62:	4621      	mov	r1, r4
 8012a64:	4638      	mov	r0, r7
 8012a66:	f7ff ffa3 	bl	80129b0 <_Bfree>
 8012a6a:	462c      	mov	r4, r5
 8012a6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012a70:	3601      	adds	r6, #1
 8012a72:	f8c3 8014 	str.w	r8, [r3, #20]
 8012a76:	6126      	str	r6, [r4, #16]
 8012a78:	4620      	mov	r0, r4
 8012a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a7e:	bf00      	nop
 8012a80:	080150df 	.word	0x080150df
 8012a84:	080150f0 	.word	0x080150f0

08012a88 <__hi0bits>:
 8012a88:	0c03      	lsrs	r3, r0, #16
 8012a8a:	041b      	lsls	r3, r3, #16
 8012a8c:	b9d3      	cbnz	r3, 8012ac4 <__hi0bits+0x3c>
 8012a8e:	0400      	lsls	r0, r0, #16
 8012a90:	2310      	movs	r3, #16
 8012a92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a96:	bf04      	itt	eq
 8012a98:	0200      	lsleq	r0, r0, #8
 8012a9a:	3308      	addeq	r3, #8
 8012a9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012aa0:	bf04      	itt	eq
 8012aa2:	0100      	lsleq	r0, r0, #4
 8012aa4:	3304      	addeq	r3, #4
 8012aa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012aaa:	bf04      	itt	eq
 8012aac:	0080      	lsleq	r0, r0, #2
 8012aae:	3302      	addeq	r3, #2
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	db05      	blt.n	8012ac0 <__hi0bits+0x38>
 8012ab4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ab8:	f103 0301 	add.w	r3, r3, #1
 8012abc:	bf08      	it	eq
 8012abe:	2320      	moveq	r3, #32
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	4770      	bx	lr
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e7e4      	b.n	8012a92 <__hi0bits+0xa>

08012ac8 <__lo0bits>:
 8012ac8:	6803      	ldr	r3, [r0, #0]
 8012aca:	f013 0207 	ands.w	r2, r3, #7
 8012ace:	4601      	mov	r1, r0
 8012ad0:	d00b      	beq.n	8012aea <__lo0bits+0x22>
 8012ad2:	07da      	lsls	r2, r3, #31
 8012ad4:	d424      	bmi.n	8012b20 <__lo0bits+0x58>
 8012ad6:	0798      	lsls	r0, r3, #30
 8012ad8:	bf49      	itett	mi
 8012ada:	085b      	lsrmi	r3, r3, #1
 8012adc:	089b      	lsrpl	r3, r3, #2
 8012ade:	2001      	movmi	r0, #1
 8012ae0:	600b      	strmi	r3, [r1, #0]
 8012ae2:	bf5c      	itt	pl
 8012ae4:	600b      	strpl	r3, [r1, #0]
 8012ae6:	2002      	movpl	r0, #2
 8012ae8:	4770      	bx	lr
 8012aea:	b298      	uxth	r0, r3
 8012aec:	b9b0      	cbnz	r0, 8012b1c <__lo0bits+0x54>
 8012aee:	0c1b      	lsrs	r3, r3, #16
 8012af0:	2010      	movs	r0, #16
 8012af2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012af6:	bf04      	itt	eq
 8012af8:	0a1b      	lsreq	r3, r3, #8
 8012afa:	3008      	addeq	r0, #8
 8012afc:	071a      	lsls	r2, r3, #28
 8012afe:	bf04      	itt	eq
 8012b00:	091b      	lsreq	r3, r3, #4
 8012b02:	3004      	addeq	r0, #4
 8012b04:	079a      	lsls	r2, r3, #30
 8012b06:	bf04      	itt	eq
 8012b08:	089b      	lsreq	r3, r3, #2
 8012b0a:	3002      	addeq	r0, #2
 8012b0c:	07da      	lsls	r2, r3, #31
 8012b0e:	d403      	bmi.n	8012b18 <__lo0bits+0x50>
 8012b10:	085b      	lsrs	r3, r3, #1
 8012b12:	f100 0001 	add.w	r0, r0, #1
 8012b16:	d005      	beq.n	8012b24 <__lo0bits+0x5c>
 8012b18:	600b      	str	r3, [r1, #0]
 8012b1a:	4770      	bx	lr
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	e7e8      	b.n	8012af2 <__lo0bits+0x2a>
 8012b20:	2000      	movs	r0, #0
 8012b22:	4770      	bx	lr
 8012b24:	2020      	movs	r0, #32
 8012b26:	4770      	bx	lr

08012b28 <__i2b>:
 8012b28:	b510      	push	{r4, lr}
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	2101      	movs	r1, #1
 8012b2e:	f7ff feff 	bl	8012930 <_Balloc>
 8012b32:	4602      	mov	r2, r0
 8012b34:	b928      	cbnz	r0, 8012b42 <__i2b+0x1a>
 8012b36:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <__i2b+0x24>)
 8012b38:	4805      	ldr	r0, [pc, #20]	; (8012b50 <__i2b+0x28>)
 8012b3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b3e:	f000 fbdf 	bl	8013300 <__assert_func>
 8012b42:	2301      	movs	r3, #1
 8012b44:	6144      	str	r4, [r0, #20]
 8012b46:	6103      	str	r3, [r0, #16]
 8012b48:	bd10      	pop	{r4, pc}
 8012b4a:	bf00      	nop
 8012b4c:	080150df 	.word	0x080150df
 8012b50:	080150f0 	.word	0x080150f0

08012b54 <__multiply>:
 8012b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b58:	4614      	mov	r4, r2
 8012b5a:	690a      	ldr	r2, [r1, #16]
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	bfb8      	it	lt
 8012b62:	460b      	movlt	r3, r1
 8012b64:	460d      	mov	r5, r1
 8012b66:	bfbc      	itt	lt
 8012b68:	4625      	movlt	r5, r4
 8012b6a:	461c      	movlt	r4, r3
 8012b6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012b70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012b74:	68ab      	ldr	r3, [r5, #8]
 8012b76:	6869      	ldr	r1, [r5, #4]
 8012b78:	eb0a 0709 	add.w	r7, sl, r9
 8012b7c:	42bb      	cmp	r3, r7
 8012b7e:	b085      	sub	sp, #20
 8012b80:	bfb8      	it	lt
 8012b82:	3101      	addlt	r1, #1
 8012b84:	f7ff fed4 	bl	8012930 <_Balloc>
 8012b88:	b930      	cbnz	r0, 8012b98 <__multiply+0x44>
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	4b42      	ldr	r3, [pc, #264]	; (8012c98 <__multiply+0x144>)
 8012b8e:	4843      	ldr	r0, [pc, #268]	; (8012c9c <__multiply+0x148>)
 8012b90:	f240 115d 	movw	r1, #349	; 0x15d
 8012b94:	f000 fbb4 	bl	8013300 <__assert_func>
 8012b98:	f100 0614 	add.w	r6, r0, #20
 8012b9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012ba0:	4633      	mov	r3, r6
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	4543      	cmp	r3, r8
 8012ba6:	d31e      	bcc.n	8012be6 <__multiply+0x92>
 8012ba8:	f105 0c14 	add.w	ip, r5, #20
 8012bac:	f104 0314 	add.w	r3, r4, #20
 8012bb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012bb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012bb8:	9202      	str	r2, [sp, #8]
 8012bba:	ebac 0205 	sub.w	r2, ip, r5
 8012bbe:	3a15      	subs	r2, #21
 8012bc0:	f022 0203 	bic.w	r2, r2, #3
 8012bc4:	3204      	adds	r2, #4
 8012bc6:	f105 0115 	add.w	r1, r5, #21
 8012bca:	458c      	cmp	ip, r1
 8012bcc:	bf38      	it	cc
 8012bce:	2204      	movcc	r2, #4
 8012bd0:	9201      	str	r2, [sp, #4]
 8012bd2:	9a02      	ldr	r2, [sp, #8]
 8012bd4:	9303      	str	r3, [sp, #12]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d808      	bhi.n	8012bec <__multiply+0x98>
 8012bda:	2f00      	cmp	r7, #0
 8012bdc:	dc55      	bgt.n	8012c8a <__multiply+0x136>
 8012bde:	6107      	str	r7, [r0, #16]
 8012be0:	b005      	add	sp, #20
 8012be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be6:	f843 2b04 	str.w	r2, [r3], #4
 8012bea:	e7db      	b.n	8012ba4 <__multiply+0x50>
 8012bec:	f8b3 a000 	ldrh.w	sl, [r3]
 8012bf0:	f1ba 0f00 	cmp.w	sl, #0
 8012bf4:	d020      	beq.n	8012c38 <__multiply+0xe4>
 8012bf6:	f105 0e14 	add.w	lr, r5, #20
 8012bfa:	46b1      	mov	r9, r6
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012c02:	f8d9 b000 	ldr.w	fp, [r9]
 8012c06:	b2a1      	uxth	r1, r4
 8012c08:	fa1f fb8b 	uxth.w	fp, fp
 8012c0c:	fb0a b101 	mla	r1, sl, r1, fp
 8012c10:	4411      	add	r1, r2
 8012c12:	f8d9 2000 	ldr.w	r2, [r9]
 8012c16:	0c24      	lsrs	r4, r4, #16
 8012c18:	0c12      	lsrs	r2, r2, #16
 8012c1a:	fb0a 2404 	mla	r4, sl, r4, r2
 8012c1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012c22:	b289      	uxth	r1, r1
 8012c24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012c28:	45f4      	cmp	ip, lr
 8012c2a:	f849 1b04 	str.w	r1, [r9], #4
 8012c2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012c32:	d8e4      	bhi.n	8012bfe <__multiply+0xaa>
 8012c34:	9901      	ldr	r1, [sp, #4]
 8012c36:	5072      	str	r2, [r6, r1]
 8012c38:	9a03      	ldr	r2, [sp, #12]
 8012c3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c3e:	3304      	adds	r3, #4
 8012c40:	f1b9 0f00 	cmp.w	r9, #0
 8012c44:	d01f      	beq.n	8012c86 <__multiply+0x132>
 8012c46:	6834      	ldr	r4, [r6, #0]
 8012c48:	f105 0114 	add.w	r1, r5, #20
 8012c4c:	46b6      	mov	lr, r6
 8012c4e:	f04f 0a00 	mov.w	sl, #0
 8012c52:	880a      	ldrh	r2, [r1, #0]
 8012c54:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012c58:	fb09 b202 	mla	r2, r9, r2, fp
 8012c5c:	4492      	add	sl, r2
 8012c5e:	b2a4      	uxth	r4, r4
 8012c60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012c64:	f84e 4b04 	str.w	r4, [lr], #4
 8012c68:	f851 4b04 	ldr.w	r4, [r1], #4
 8012c6c:	f8be 2000 	ldrh.w	r2, [lr]
 8012c70:	0c24      	lsrs	r4, r4, #16
 8012c72:	fb09 2404 	mla	r4, r9, r4, r2
 8012c76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012c7a:	458c      	cmp	ip, r1
 8012c7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012c80:	d8e7      	bhi.n	8012c52 <__multiply+0xfe>
 8012c82:	9a01      	ldr	r2, [sp, #4]
 8012c84:	50b4      	str	r4, [r6, r2]
 8012c86:	3604      	adds	r6, #4
 8012c88:	e7a3      	b.n	8012bd2 <__multiply+0x7e>
 8012c8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d1a5      	bne.n	8012bde <__multiply+0x8a>
 8012c92:	3f01      	subs	r7, #1
 8012c94:	e7a1      	b.n	8012bda <__multiply+0x86>
 8012c96:	bf00      	nop
 8012c98:	080150df 	.word	0x080150df
 8012c9c:	080150f0 	.word	0x080150f0

08012ca0 <__pow5mult>:
 8012ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ca4:	4615      	mov	r5, r2
 8012ca6:	f012 0203 	ands.w	r2, r2, #3
 8012caa:	4606      	mov	r6, r0
 8012cac:	460f      	mov	r7, r1
 8012cae:	d007      	beq.n	8012cc0 <__pow5mult+0x20>
 8012cb0:	4c25      	ldr	r4, [pc, #148]	; (8012d48 <__pow5mult+0xa8>)
 8012cb2:	3a01      	subs	r2, #1
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cba:	f7ff fe9b 	bl	80129f4 <__multadd>
 8012cbe:	4607      	mov	r7, r0
 8012cc0:	10ad      	asrs	r5, r5, #2
 8012cc2:	d03d      	beq.n	8012d40 <__pow5mult+0xa0>
 8012cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012cc6:	b97c      	cbnz	r4, 8012ce8 <__pow5mult+0x48>
 8012cc8:	2010      	movs	r0, #16
 8012cca:	f7fe fa03 	bl	80110d4 <malloc>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	6270      	str	r0, [r6, #36]	; 0x24
 8012cd2:	b928      	cbnz	r0, 8012ce0 <__pow5mult+0x40>
 8012cd4:	4b1d      	ldr	r3, [pc, #116]	; (8012d4c <__pow5mult+0xac>)
 8012cd6:	481e      	ldr	r0, [pc, #120]	; (8012d50 <__pow5mult+0xb0>)
 8012cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012cdc:	f000 fb10 	bl	8013300 <__assert_func>
 8012ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ce4:	6004      	str	r4, [r0, #0]
 8012ce6:	60c4      	str	r4, [r0, #12]
 8012ce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012cf0:	b94c      	cbnz	r4, 8012d06 <__pow5mult+0x66>
 8012cf2:	f240 2171 	movw	r1, #625	; 0x271
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	f7ff ff16 	bl	8012b28 <__i2b>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d02:	4604      	mov	r4, r0
 8012d04:	6003      	str	r3, [r0, #0]
 8012d06:	f04f 0900 	mov.w	r9, #0
 8012d0a:	07eb      	lsls	r3, r5, #31
 8012d0c:	d50a      	bpl.n	8012d24 <__pow5mult+0x84>
 8012d0e:	4639      	mov	r1, r7
 8012d10:	4622      	mov	r2, r4
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff ff1e 	bl	8012b54 <__multiply>
 8012d18:	4639      	mov	r1, r7
 8012d1a:	4680      	mov	r8, r0
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7ff fe47 	bl	80129b0 <_Bfree>
 8012d22:	4647      	mov	r7, r8
 8012d24:	106d      	asrs	r5, r5, #1
 8012d26:	d00b      	beq.n	8012d40 <__pow5mult+0xa0>
 8012d28:	6820      	ldr	r0, [r4, #0]
 8012d2a:	b938      	cbnz	r0, 8012d3c <__pow5mult+0x9c>
 8012d2c:	4622      	mov	r2, r4
 8012d2e:	4621      	mov	r1, r4
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7ff ff0f 	bl	8012b54 <__multiply>
 8012d36:	6020      	str	r0, [r4, #0]
 8012d38:	f8c0 9000 	str.w	r9, [r0]
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	e7e4      	b.n	8012d0a <__pow5mult+0x6a>
 8012d40:	4638      	mov	r0, r7
 8012d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d46:	bf00      	nop
 8012d48:	08015240 	.word	0x08015240
 8012d4c:	08015069 	.word	0x08015069
 8012d50:	080150f0 	.word	0x080150f0

08012d54 <__lshift>:
 8012d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d58:	460c      	mov	r4, r1
 8012d5a:	6849      	ldr	r1, [r1, #4]
 8012d5c:	6923      	ldr	r3, [r4, #16]
 8012d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d62:	68a3      	ldr	r3, [r4, #8]
 8012d64:	4607      	mov	r7, r0
 8012d66:	4691      	mov	r9, r2
 8012d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d6c:	f108 0601 	add.w	r6, r8, #1
 8012d70:	42b3      	cmp	r3, r6
 8012d72:	db0b      	blt.n	8012d8c <__lshift+0x38>
 8012d74:	4638      	mov	r0, r7
 8012d76:	f7ff fddb 	bl	8012930 <_Balloc>
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	b948      	cbnz	r0, 8012d92 <__lshift+0x3e>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	4b28      	ldr	r3, [pc, #160]	; (8012e24 <__lshift+0xd0>)
 8012d82:	4829      	ldr	r0, [pc, #164]	; (8012e28 <__lshift+0xd4>)
 8012d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012d88:	f000 faba 	bl	8013300 <__assert_func>
 8012d8c:	3101      	adds	r1, #1
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	e7ee      	b.n	8012d70 <__lshift+0x1c>
 8012d92:	2300      	movs	r3, #0
 8012d94:	f100 0114 	add.w	r1, r0, #20
 8012d98:	f100 0210 	add.w	r2, r0, #16
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	4553      	cmp	r3, sl
 8012da0:	db33      	blt.n	8012e0a <__lshift+0xb6>
 8012da2:	6920      	ldr	r0, [r4, #16]
 8012da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012da8:	f104 0314 	add.w	r3, r4, #20
 8012dac:	f019 091f 	ands.w	r9, r9, #31
 8012db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012db4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012db8:	d02b      	beq.n	8012e12 <__lshift+0xbe>
 8012dba:	f1c9 0e20 	rsb	lr, r9, #32
 8012dbe:	468a      	mov	sl, r1
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	6818      	ldr	r0, [r3, #0]
 8012dc4:	fa00 f009 	lsl.w	r0, r0, r9
 8012dc8:	4302      	orrs	r2, r0
 8012dca:	f84a 2b04 	str.w	r2, [sl], #4
 8012dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dd2:	459c      	cmp	ip, r3
 8012dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8012dd8:	d8f3      	bhi.n	8012dc2 <__lshift+0x6e>
 8012dda:	ebac 0304 	sub.w	r3, ip, r4
 8012dde:	3b15      	subs	r3, #21
 8012de0:	f023 0303 	bic.w	r3, r3, #3
 8012de4:	3304      	adds	r3, #4
 8012de6:	f104 0015 	add.w	r0, r4, #21
 8012dea:	4584      	cmp	ip, r0
 8012dec:	bf38      	it	cc
 8012dee:	2304      	movcc	r3, #4
 8012df0:	50ca      	str	r2, [r1, r3]
 8012df2:	b10a      	cbz	r2, 8012df8 <__lshift+0xa4>
 8012df4:	f108 0602 	add.w	r6, r8, #2
 8012df8:	3e01      	subs	r6, #1
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	612e      	str	r6, [r5, #16]
 8012dfe:	4621      	mov	r1, r4
 8012e00:	f7ff fdd6 	bl	80129b0 <_Bfree>
 8012e04:	4628      	mov	r0, r5
 8012e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e0e:	3301      	adds	r3, #1
 8012e10:	e7c5      	b.n	8012d9e <__lshift+0x4a>
 8012e12:	3904      	subs	r1, #4
 8012e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e1c:	459c      	cmp	ip, r3
 8012e1e:	d8f9      	bhi.n	8012e14 <__lshift+0xc0>
 8012e20:	e7ea      	b.n	8012df8 <__lshift+0xa4>
 8012e22:	bf00      	nop
 8012e24:	080150df 	.word	0x080150df
 8012e28:	080150f0 	.word	0x080150f0

08012e2c <__mcmp>:
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	6902      	ldr	r2, [r0, #16]
 8012e30:	690c      	ldr	r4, [r1, #16]
 8012e32:	1b12      	subs	r2, r2, r4
 8012e34:	d10e      	bne.n	8012e54 <__mcmp+0x28>
 8012e36:	f100 0314 	add.w	r3, r0, #20
 8012e3a:	3114      	adds	r1, #20
 8012e3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e4c:	42a5      	cmp	r5, r4
 8012e4e:	d003      	beq.n	8012e58 <__mcmp+0x2c>
 8012e50:	d305      	bcc.n	8012e5e <__mcmp+0x32>
 8012e52:	2201      	movs	r2, #1
 8012e54:	4610      	mov	r0, r2
 8012e56:	bd30      	pop	{r4, r5, pc}
 8012e58:	4283      	cmp	r3, r0
 8012e5a:	d3f3      	bcc.n	8012e44 <__mcmp+0x18>
 8012e5c:	e7fa      	b.n	8012e54 <__mcmp+0x28>
 8012e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e62:	e7f7      	b.n	8012e54 <__mcmp+0x28>

08012e64 <__mdiff>:
 8012e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e68:	460c      	mov	r4, r1
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	4620      	mov	r0, r4
 8012e70:	4617      	mov	r7, r2
 8012e72:	f7ff ffdb 	bl	8012e2c <__mcmp>
 8012e76:	1e05      	subs	r5, r0, #0
 8012e78:	d110      	bne.n	8012e9c <__mdiff+0x38>
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	4630      	mov	r0, r6
 8012e7e:	f7ff fd57 	bl	8012930 <_Balloc>
 8012e82:	b930      	cbnz	r0, 8012e92 <__mdiff+0x2e>
 8012e84:	4b39      	ldr	r3, [pc, #228]	; (8012f6c <__mdiff+0x108>)
 8012e86:	4602      	mov	r2, r0
 8012e88:	f240 2132 	movw	r1, #562	; 0x232
 8012e8c:	4838      	ldr	r0, [pc, #224]	; (8012f70 <__mdiff+0x10c>)
 8012e8e:	f000 fa37 	bl	8013300 <__assert_func>
 8012e92:	2301      	movs	r3, #1
 8012e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9c:	bfa4      	itt	ge
 8012e9e:	463b      	movge	r3, r7
 8012ea0:	4627      	movge	r7, r4
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	6879      	ldr	r1, [r7, #4]
 8012ea6:	bfa6      	itte	ge
 8012ea8:	461c      	movge	r4, r3
 8012eaa:	2500      	movge	r5, #0
 8012eac:	2501      	movlt	r5, #1
 8012eae:	f7ff fd3f 	bl	8012930 <_Balloc>
 8012eb2:	b920      	cbnz	r0, 8012ebe <__mdiff+0x5a>
 8012eb4:	4b2d      	ldr	r3, [pc, #180]	; (8012f6c <__mdiff+0x108>)
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012ebc:	e7e6      	b.n	8012e8c <__mdiff+0x28>
 8012ebe:	693e      	ldr	r6, [r7, #16]
 8012ec0:	60c5      	str	r5, [r0, #12]
 8012ec2:	6925      	ldr	r5, [r4, #16]
 8012ec4:	f107 0114 	add.w	r1, r7, #20
 8012ec8:	f104 0914 	add.w	r9, r4, #20
 8012ecc:	f100 0e14 	add.w	lr, r0, #20
 8012ed0:	f107 0210 	add.w	r2, r7, #16
 8012ed4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012ed8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012edc:	46f2      	mov	sl, lr
 8012ede:	2700      	movs	r7, #0
 8012ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012ee8:	fa1f f883 	uxth.w	r8, r3
 8012eec:	fa17 f78b 	uxtah	r7, r7, fp
 8012ef0:	0c1b      	lsrs	r3, r3, #16
 8012ef2:	eba7 0808 	sub.w	r8, r7, r8
 8012ef6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012efa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012efe:	fa1f f888 	uxth.w	r8, r8
 8012f02:	141f      	asrs	r7, r3, #16
 8012f04:	454d      	cmp	r5, r9
 8012f06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f0a:	f84a 3b04 	str.w	r3, [sl], #4
 8012f0e:	d8e7      	bhi.n	8012ee0 <__mdiff+0x7c>
 8012f10:	1b2b      	subs	r3, r5, r4
 8012f12:	3b15      	subs	r3, #21
 8012f14:	f023 0303 	bic.w	r3, r3, #3
 8012f18:	3304      	adds	r3, #4
 8012f1a:	3415      	adds	r4, #21
 8012f1c:	42a5      	cmp	r5, r4
 8012f1e:	bf38      	it	cc
 8012f20:	2304      	movcc	r3, #4
 8012f22:	4419      	add	r1, r3
 8012f24:	4473      	add	r3, lr
 8012f26:	469e      	mov	lr, r3
 8012f28:	460d      	mov	r5, r1
 8012f2a:	4565      	cmp	r5, ip
 8012f2c:	d30e      	bcc.n	8012f4c <__mdiff+0xe8>
 8012f2e:	f10c 0203 	add.w	r2, ip, #3
 8012f32:	1a52      	subs	r2, r2, r1
 8012f34:	f022 0203 	bic.w	r2, r2, #3
 8012f38:	3903      	subs	r1, #3
 8012f3a:	458c      	cmp	ip, r1
 8012f3c:	bf38      	it	cc
 8012f3e:	2200      	movcc	r2, #0
 8012f40:	441a      	add	r2, r3
 8012f42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f46:	b17b      	cbz	r3, 8012f68 <__mdiff+0x104>
 8012f48:	6106      	str	r6, [r0, #16]
 8012f4a:	e7a5      	b.n	8012e98 <__mdiff+0x34>
 8012f4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012f50:	fa17 f488 	uxtah	r4, r7, r8
 8012f54:	1422      	asrs	r2, r4, #16
 8012f56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012f5a:	b2a4      	uxth	r4, r4
 8012f5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012f60:	f84e 4b04 	str.w	r4, [lr], #4
 8012f64:	1417      	asrs	r7, r2, #16
 8012f66:	e7e0      	b.n	8012f2a <__mdiff+0xc6>
 8012f68:	3e01      	subs	r6, #1
 8012f6a:	e7ea      	b.n	8012f42 <__mdiff+0xde>
 8012f6c:	080150df 	.word	0x080150df
 8012f70:	080150f0 	.word	0x080150f0

08012f74 <__d2b>:
 8012f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f78:	4689      	mov	r9, r1
 8012f7a:	2101      	movs	r1, #1
 8012f7c:	ec57 6b10 	vmov	r6, r7, d0
 8012f80:	4690      	mov	r8, r2
 8012f82:	f7ff fcd5 	bl	8012930 <_Balloc>
 8012f86:	4604      	mov	r4, r0
 8012f88:	b930      	cbnz	r0, 8012f98 <__d2b+0x24>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	4b25      	ldr	r3, [pc, #148]	; (8013024 <__d2b+0xb0>)
 8012f8e:	4826      	ldr	r0, [pc, #152]	; (8013028 <__d2b+0xb4>)
 8012f90:	f240 310a 	movw	r1, #778	; 0x30a
 8012f94:	f000 f9b4 	bl	8013300 <__assert_func>
 8012f98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012fa0:	bb35      	cbnz	r5, 8012ff0 <__d2b+0x7c>
 8012fa2:	2e00      	cmp	r6, #0
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	d028      	beq.n	8012ffa <__d2b+0x86>
 8012fa8:	4668      	mov	r0, sp
 8012faa:	9600      	str	r6, [sp, #0]
 8012fac:	f7ff fd8c 	bl	8012ac8 <__lo0bits>
 8012fb0:	9900      	ldr	r1, [sp, #0]
 8012fb2:	b300      	cbz	r0, 8012ff6 <__d2b+0x82>
 8012fb4:	9a01      	ldr	r2, [sp, #4]
 8012fb6:	f1c0 0320 	rsb	r3, r0, #32
 8012fba:	fa02 f303 	lsl.w	r3, r2, r3
 8012fbe:	430b      	orrs	r3, r1
 8012fc0:	40c2      	lsrs	r2, r0
 8012fc2:	6163      	str	r3, [r4, #20]
 8012fc4:	9201      	str	r2, [sp, #4]
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	61a3      	str	r3, [r4, #24]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	bf14      	ite	ne
 8012fce:	2202      	movne	r2, #2
 8012fd0:	2201      	moveq	r2, #1
 8012fd2:	6122      	str	r2, [r4, #16]
 8012fd4:	b1d5      	cbz	r5, 801300c <__d2b+0x98>
 8012fd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012fda:	4405      	add	r5, r0
 8012fdc:	f8c9 5000 	str.w	r5, [r9]
 8012fe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012fe4:	f8c8 0000 	str.w	r0, [r8]
 8012fe8:	4620      	mov	r0, r4
 8012fea:	b003      	add	sp, #12
 8012fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ff4:	e7d5      	b.n	8012fa2 <__d2b+0x2e>
 8012ff6:	6161      	str	r1, [r4, #20]
 8012ff8:	e7e5      	b.n	8012fc6 <__d2b+0x52>
 8012ffa:	a801      	add	r0, sp, #4
 8012ffc:	f7ff fd64 	bl	8012ac8 <__lo0bits>
 8013000:	9b01      	ldr	r3, [sp, #4]
 8013002:	6163      	str	r3, [r4, #20]
 8013004:	2201      	movs	r2, #1
 8013006:	6122      	str	r2, [r4, #16]
 8013008:	3020      	adds	r0, #32
 801300a:	e7e3      	b.n	8012fd4 <__d2b+0x60>
 801300c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013014:	f8c9 0000 	str.w	r0, [r9]
 8013018:	6918      	ldr	r0, [r3, #16]
 801301a:	f7ff fd35 	bl	8012a88 <__hi0bits>
 801301e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013022:	e7df      	b.n	8012fe4 <__d2b+0x70>
 8013024:	080150df 	.word	0x080150df
 8013028:	080150f0 	.word	0x080150f0

0801302c <_calloc_r>:
 801302c:	b513      	push	{r0, r1, r4, lr}
 801302e:	434a      	muls	r2, r1
 8013030:	4611      	mov	r1, r2
 8013032:	9201      	str	r2, [sp, #4]
 8013034:	f7fe f8de 	bl	80111f4 <_malloc_r>
 8013038:	4604      	mov	r4, r0
 801303a:	b118      	cbz	r0, 8013044 <_calloc_r+0x18>
 801303c:	9a01      	ldr	r2, [sp, #4]
 801303e:	2100      	movs	r1, #0
 8013040:	f7fe f880 	bl	8011144 <memset>
 8013044:	4620      	mov	r0, r4
 8013046:	b002      	add	sp, #8
 8013048:	bd10      	pop	{r4, pc}

0801304a <__ssputs_r>:
 801304a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801304e:	688e      	ldr	r6, [r1, #8]
 8013050:	429e      	cmp	r6, r3
 8013052:	4682      	mov	sl, r0
 8013054:	460c      	mov	r4, r1
 8013056:	4690      	mov	r8, r2
 8013058:	461f      	mov	r7, r3
 801305a:	d838      	bhi.n	80130ce <__ssputs_r+0x84>
 801305c:	898a      	ldrh	r2, [r1, #12]
 801305e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013062:	d032      	beq.n	80130ca <__ssputs_r+0x80>
 8013064:	6825      	ldr	r5, [r4, #0]
 8013066:	6909      	ldr	r1, [r1, #16]
 8013068:	eba5 0901 	sub.w	r9, r5, r1
 801306c:	6965      	ldr	r5, [r4, #20]
 801306e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013072:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013076:	3301      	adds	r3, #1
 8013078:	444b      	add	r3, r9
 801307a:	106d      	asrs	r5, r5, #1
 801307c:	429d      	cmp	r5, r3
 801307e:	bf38      	it	cc
 8013080:	461d      	movcc	r5, r3
 8013082:	0553      	lsls	r3, r2, #21
 8013084:	d531      	bpl.n	80130ea <__ssputs_r+0xa0>
 8013086:	4629      	mov	r1, r5
 8013088:	f7fe f8b4 	bl	80111f4 <_malloc_r>
 801308c:	4606      	mov	r6, r0
 801308e:	b950      	cbnz	r0, 80130a6 <__ssputs_r+0x5c>
 8013090:	230c      	movs	r3, #12
 8013092:	f8ca 3000 	str.w	r3, [sl]
 8013096:	89a3      	ldrh	r3, [r4, #12]
 8013098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	f04f 30ff 	mov.w	r0, #4294967295
 80130a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a6:	6921      	ldr	r1, [r4, #16]
 80130a8:	464a      	mov	r2, r9
 80130aa:	f7fe f823 	bl	80110f4 <memcpy>
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130b8:	81a3      	strh	r3, [r4, #12]
 80130ba:	6126      	str	r6, [r4, #16]
 80130bc:	6165      	str	r5, [r4, #20]
 80130be:	444e      	add	r6, r9
 80130c0:	eba5 0509 	sub.w	r5, r5, r9
 80130c4:	6026      	str	r6, [r4, #0]
 80130c6:	60a5      	str	r5, [r4, #8]
 80130c8:	463e      	mov	r6, r7
 80130ca:	42be      	cmp	r6, r7
 80130cc:	d900      	bls.n	80130d0 <__ssputs_r+0x86>
 80130ce:	463e      	mov	r6, r7
 80130d0:	4632      	mov	r2, r6
 80130d2:	6820      	ldr	r0, [r4, #0]
 80130d4:	4641      	mov	r1, r8
 80130d6:	f7fe f81b 	bl	8011110 <memmove>
 80130da:	68a3      	ldr	r3, [r4, #8]
 80130dc:	6822      	ldr	r2, [r4, #0]
 80130de:	1b9b      	subs	r3, r3, r6
 80130e0:	4432      	add	r2, r6
 80130e2:	60a3      	str	r3, [r4, #8]
 80130e4:	6022      	str	r2, [r4, #0]
 80130e6:	2000      	movs	r0, #0
 80130e8:	e7db      	b.n	80130a2 <__ssputs_r+0x58>
 80130ea:	462a      	mov	r2, r5
 80130ec:	f000 f94d 	bl	801338a <_realloc_r>
 80130f0:	4606      	mov	r6, r0
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d1e1      	bne.n	80130ba <__ssputs_r+0x70>
 80130f6:	6921      	ldr	r1, [r4, #16]
 80130f8:	4650      	mov	r0, sl
 80130fa:	f7fe f82b 	bl	8011154 <_free_r>
 80130fe:	e7c7      	b.n	8013090 <__ssputs_r+0x46>

08013100 <_svfiprintf_r>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	4698      	mov	r8, r3
 8013106:	898b      	ldrh	r3, [r1, #12]
 8013108:	061b      	lsls	r3, r3, #24
 801310a:	b09d      	sub	sp, #116	; 0x74
 801310c:	4607      	mov	r7, r0
 801310e:	460d      	mov	r5, r1
 8013110:	4614      	mov	r4, r2
 8013112:	d50e      	bpl.n	8013132 <_svfiprintf_r+0x32>
 8013114:	690b      	ldr	r3, [r1, #16]
 8013116:	b963      	cbnz	r3, 8013132 <_svfiprintf_r+0x32>
 8013118:	2140      	movs	r1, #64	; 0x40
 801311a:	f7fe f86b 	bl	80111f4 <_malloc_r>
 801311e:	6028      	str	r0, [r5, #0]
 8013120:	6128      	str	r0, [r5, #16]
 8013122:	b920      	cbnz	r0, 801312e <_svfiprintf_r+0x2e>
 8013124:	230c      	movs	r3, #12
 8013126:	603b      	str	r3, [r7, #0]
 8013128:	f04f 30ff 	mov.w	r0, #4294967295
 801312c:	e0d1      	b.n	80132d2 <_svfiprintf_r+0x1d2>
 801312e:	2340      	movs	r3, #64	; 0x40
 8013130:	616b      	str	r3, [r5, #20]
 8013132:	2300      	movs	r3, #0
 8013134:	9309      	str	r3, [sp, #36]	; 0x24
 8013136:	2320      	movs	r3, #32
 8013138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801313c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013140:	2330      	movs	r3, #48	; 0x30
 8013142:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80132ec <_svfiprintf_r+0x1ec>
 8013146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801314a:	f04f 0901 	mov.w	r9, #1
 801314e:	4623      	mov	r3, r4
 8013150:	469a      	mov	sl, r3
 8013152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013156:	b10a      	cbz	r2, 801315c <_svfiprintf_r+0x5c>
 8013158:	2a25      	cmp	r2, #37	; 0x25
 801315a:	d1f9      	bne.n	8013150 <_svfiprintf_r+0x50>
 801315c:	ebba 0b04 	subs.w	fp, sl, r4
 8013160:	d00b      	beq.n	801317a <_svfiprintf_r+0x7a>
 8013162:	465b      	mov	r3, fp
 8013164:	4622      	mov	r2, r4
 8013166:	4629      	mov	r1, r5
 8013168:	4638      	mov	r0, r7
 801316a:	f7ff ff6e 	bl	801304a <__ssputs_r>
 801316e:	3001      	adds	r0, #1
 8013170:	f000 80aa 	beq.w	80132c8 <_svfiprintf_r+0x1c8>
 8013174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013176:	445a      	add	r2, fp
 8013178:	9209      	str	r2, [sp, #36]	; 0x24
 801317a:	f89a 3000 	ldrb.w	r3, [sl]
 801317e:	2b00      	cmp	r3, #0
 8013180:	f000 80a2 	beq.w	80132c8 <_svfiprintf_r+0x1c8>
 8013184:	2300      	movs	r3, #0
 8013186:	f04f 32ff 	mov.w	r2, #4294967295
 801318a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801318e:	f10a 0a01 	add.w	sl, sl, #1
 8013192:	9304      	str	r3, [sp, #16]
 8013194:	9307      	str	r3, [sp, #28]
 8013196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801319a:	931a      	str	r3, [sp, #104]	; 0x68
 801319c:	4654      	mov	r4, sl
 801319e:	2205      	movs	r2, #5
 80131a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131a4:	4851      	ldr	r0, [pc, #324]	; (80132ec <_svfiprintf_r+0x1ec>)
 80131a6:	f7ed f81b 	bl	80001e0 <memchr>
 80131aa:	9a04      	ldr	r2, [sp, #16]
 80131ac:	b9d8      	cbnz	r0, 80131e6 <_svfiprintf_r+0xe6>
 80131ae:	06d0      	lsls	r0, r2, #27
 80131b0:	bf44      	itt	mi
 80131b2:	2320      	movmi	r3, #32
 80131b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131b8:	0711      	lsls	r1, r2, #28
 80131ba:	bf44      	itt	mi
 80131bc:	232b      	movmi	r3, #43	; 0x2b
 80131be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131c2:	f89a 3000 	ldrb.w	r3, [sl]
 80131c6:	2b2a      	cmp	r3, #42	; 0x2a
 80131c8:	d015      	beq.n	80131f6 <_svfiprintf_r+0xf6>
 80131ca:	9a07      	ldr	r2, [sp, #28]
 80131cc:	4654      	mov	r4, sl
 80131ce:	2000      	movs	r0, #0
 80131d0:	f04f 0c0a 	mov.w	ip, #10
 80131d4:	4621      	mov	r1, r4
 80131d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131da:	3b30      	subs	r3, #48	; 0x30
 80131dc:	2b09      	cmp	r3, #9
 80131de:	d94e      	bls.n	801327e <_svfiprintf_r+0x17e>
 80131e0:	b1b0      	cbz	r0, 8013210 <_svfiprintf_r+0x110>
 80131e2:	9207      	str	r2, [sp, #28]
 80131e4:	e014      	b.n	8013210 <_svfiprintf_r+0x110>
 80131e6:	eba0 0308 	sub.w	r3, r0, r8
 80131ea:	fa09 f303 	lsl.w	r3, r9, r3
 80131ee:	4313      	orrs	r3, r2
 80131f0:	9304      	str	r3, [sp, #16]
 80131f2:	46a2      	mov	sl, r4
 80131f4:	e7d2      	b.n	801319c <_svfiprintf_r+0x9c>
 80131f6:	9b03      	ldr	r3, [sp, #12]
 80131f8:	1d19      	adds	r1, r3, #4
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	9103      	str	r1, [sp, #12]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	bfbb      	ittet	lt
 8013202:	425b      	neglt	r3, r3
 8013204:	f042 0202 	orrlt.w	r2, r2, #2
 8013208:	9307      	strge	r3, [sp, #28]
 801320a:	9307      	strlt	r3, [sp, #28]
 801320c:	bfb8      	it	lt
 801320e:	9204      	strlt	r2, [sp, #16]
 8013210:	7823      	ldrb	r3, [r4, #0]
 8013212:	2b2e      	cmp	r3, #46	; 0x2e
 8013214:	d10c      	bne.n	8013230 <_svfiprintf_r+0x130>
 8013216:	7863      	ldrb	r3, [r4, #1]
 8013218:	2b2a      	cmp	r3, #42	; 0x2a
 801321a:	d135      	bne.n	8013288 <_svfiprintf_r+0x188>
 801321c:	9b03      	ldr	r3, [sp, #12]
 801321e:	1d1a      	adds	r2, r3, #4
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	9203      	str	r2, [sp, #12]
 8013224:	2b00      	cmp	r3, #0
 8013226:	bfb8      	it	lt
 8013228:	f04f 33ff 	movlt.w	r3, #4294967295
 801322c:	3402      	adds	r4, #2
 801322e:	9305      	str	r3, [sp, #20]
 8013230:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80132fc <_svfiprintf_r+0x1fc>
 8013234:	7821      	ldrb	r1, [r4, #0]
 8013236:	2203      	movs	r2, #3
 8013238:	4650      	mov	r0, sl
 801323a:	f7ec ffd1 	bl	80001e0 <memchr>
 801323e:	b140      	cbz	r0, 8013252 <_svfiprintf_r+0x152>
 8013240:	2340      	movs	r3, #64	; 0x40
 8013242:	eba0 000a 	sub.w	r0, r0, sl
 8013246:	fa03 f000 	lsl.w	r0, r3, r0
 801324a:	9b04      	ldr	r3, [sp, #16]
 801324c:	4303      	orrs	r3, r0
 801324e:	3401      	adds	r4, #1
 8013250:	9304      	str	r3, [sp, #16]
 8013252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013256:	4826      	ldr	r0, [pc, #152]	; (80132f0 <_svfiprintf_r+0x1f0>)
 8013258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801325c:	2206      	movs	r2, #6
 801325e:	f7ec ffbf 	bl	80001e0 <memchr>
 8013262:	2800      	cmp	r0, #0
 8013264:	d038      	beq.n	80132d8 <_svfiprintf_r+0x1d8>
 8013266:	4b23      	ldr	r3, [pc, #140]	; (80132f4 <_svfiprintf_r+0x1f4>)
 8013268:	bb1b      	cbnz	r3, 80132b2 <_svfiprintf_r+0x1b2>
 801326a:	9b03      	ldr	r3, [sp, #12]
 801326c:	3307      	adds	r3, #7
 801326e:	f023 0307 	bic.w	r3, r3, #7
 8013272:	3308      	adds	r3, #8
 8013274:	9303      	str	r3, [sp, #12]
 8013276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013278:	4433      	add	r3, r6
 801327a:	9309      	str	r3, [sp, #36]	; 0x24
 801327c:	e767      	b.n	801314e <_svfiprintf_r+0x4e>
 801327e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013282:	460c      	mov	r4, r1
 8013284:	2001      	movs	r0, #1
 8013286:	e7a5      	b.n	80131d4 <_svfiprintf_r+0xd4>
 8013288:	2300      	movs	r3, #0
 801328a:	3401      	adds	r4, #1
 801328c:	9305      	str	r3, [sp, #20]
 801328e:	4619      	mov	r1, r3
 8013290:	f04f 0c0a 	mov.w	ip, #10
 8013294:	4620      	mov	r0, r4
 8013296:	f810 2b01 	ldrb.w	r2, [r0], #1
 801329a:	3a30      	subs	r2, #48	; 0x30
 801329c:	2a09      	cmp	r2, #9
 801329e:	d903      	bls.n	80132a8 <_svfiprintf_r+0x1a8>
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d0c5      	beq.n	8013230 <_svfiprintf_r+0x130>
 80132a4:	9105      	str	r1, [sp, #20]
 80132a6:	e7c3      	b.n	8013230 <_svfiprintf_r+0x130>
 80132a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80132ac:	4604      	mov	r4, r0
 80132ae:	2301      	movs	r3, #1
 80132b0:	e7f0      	b.n	8013294 <_svfiprintf_r+0x194>
 80132b2:	ab03      	add	r3, sp, #12
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	462a      	mov	r2, r5
 80132b8:	4b0f      	ldr	r3, [pc, #60]	; (80132f8 <_svfiprintf_r+0x1f8>)
 80132ba:	a904      	add	r1, sp, #16
 80132bc:	4638      	mov	r0, r7
 80132be:	f7fe f893 	bl	80113e8 <_printf_float>
 80132c2:	1c42      	adds	r2, r0, #1
 80132c4:	4606      	mov	r6, r0
 80132c6:	d1d6      	bne.n	8013276 <_svfiprintf_r+0x176>
 80132c8:	89ab      	ldrh	r3, [r5, #12]
 80132ca:	065b      	lsls	r3, r3, #25
 80132cc:	f53f af2c 	bmi.w	8013128 <_svfiprintf_r+0x28>
 80132d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132d2:	b01d      	add	sp, #116	; 0x74
 80132d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d8:	ab03      	add	r3, sp, #12
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	462a      	mov	r2, r5
 80132de:	4b06      	ldr	r3, [pc, #24]	; (80132f8 <_svfiprintf_r+0x1f8>)
 80132e0:	a904      	add	r1, sp, #16
 80132e2:	4638      	mov	r0, r7
 80132e4:	f7fe fb24 	bl	8011930 <_printf_i>
 80132e8:	e7eb      	b.n	80132c2 <_svfiprintf_r+0x1c2>
 80132ea:	bf00      	nop
 80132ec:	0801524c 	.word	0x0801524c
 80132f0:	08015256 	.word	0x08015256
 80132f4:	080113e9 	.word	0x080113e9
 80132f8:	0801304b 	.word	0x0801304b
 80132fc:	08015252 	.word	0x08015252

08013300 <__assert_func>:
 8013300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013302:	4614      	mov	r4, r2
 8013304:	461a      	mov	r2, r3
 8013306:	4b09      	ldr	r3, [pc, #36]	; (801332c <__assert_func+0x2c>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4605      	mov	r5, r0
 801330c:	68d8      	ldr	r0, [r3, #12]
 801330e:	b14c      	cbz	r4, 8013324 <__assert_func+0x24>
 8013310:	4b07      	ldr	r3, [pc, #28]	; (8013330 <__assert_func+0x30>)
 8013312:	9100      	str	r1, [sp, #0]
 8013314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013318:	4906      	ldr	r1, [pc, #24]	; (8013334 <__assert_func+0x34>)
 801331a:	462b      	mov	r3, r5
 801331c:	f000 f80e 	bl	801333c <fiprintf>
 8013320:	f000 fa80 	bl	8013824 <abort>
 8013324:	4b04      	ldr	r3, [pc, #16]	; (8013338 <__assert_func+0x38>)
 8013326:	461c      	mov	r4, r3
 8013328:	e7f3      	b.n	8013312 <__assert_func+0x12>
 801332a:	bf00      	nop
 801332c:	20000228 	.word	0x20000228
 8013330:	0801525d 	.word	0x0801525d
 8013334:	0801526a 	.word	0x0801526a
 8013338:	08015298 	.word	0x08015298

0801333c <fiprintf>:
 801333c:	b40e      	push	{r1, r2, r3}
 801333e:	b503      	push	{r0, r1, lr}
 8013340:	4601      	mov	r1, r0
 8013342:	ab03      	add	r3, sp, #12
 8013344:	4805      	ldr	r0, [pc, #20]	; (801335c <fiprintf+0x20>)
 8013346:	f853 2b04 	ldr.w	r2, [r3], #4
 801334a:	6800      	ldr	r0, [r0, #0]
 801334c:	9301      	str	r3, [sp, #4]
 801334e:	f000 f86b 	bl	8013428 <_vfiprintf_r>
 8013352:	b002      	add	sp, #8
 8013354:	f85d eb04 	ldr.w	lr, [sp], #4
 8013358:	b003      	add	sp, #12
 801335a:	4770      	bx	lr
 801335c:	20000228 	.word	0x20000228

08013360 <__retarget_lock_init_recursive>:
 8013360:	4770      	bx	lr

08013362 <__retarget_lock_acquire_recursive>:
 8013362:	4770      	bx	lr

08013364 <__retarget_lock_release_recursive>:
 8013364:	4770      	bx	lr

08013366 <__ascii_mbtowc>:
 8013366:	b082      	sub	sp, #8
 8013368:	b901      	cbnz	r1, 801336c <__ascii_mbtowc+0x6>
 801336a:	a901      	add	r1, sp, #4
 801336c:	b142      	cbz	r2, 8013380 <__ascii_mbtowc+0x1a>
 801336e:	b14b      	cbz	r3, 8013384 <__ascii_mbtowc+0x1e>
 8013370:	7813      	ldrb	r3, [r2, #0]
 8013372:	600b      	str	r3, [r1, #0]
 8013374:	7812      	ldrb	r2, [r2, #0]
 8013376:	1e10      	subs	r0, r2, #0
 8013378:	bf18      	it	ne
 801337a:	2001      	movne	r0, #1
 801337c:	b002      	add	sp, #8
 801337e:	4770      	bx	lr
 8013380:	4610      	mov	r0, r2
 8013382:	e7fb      	b.n	801337c <__ascii_mbtowc+0x16>
 8013384:	f06f 0001 	mvn.w	r0, #1
 8013388:	e7f8      	b.n	801337c <__ascii_mbtowc+0x16>

0801338a <_realloc_r>:
 801338a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338c:	4607      	mov	r7, r0
 801338e:	4614      	mov	r4, r2
 8013390:	460e      	mov	r6, r1
 8013392:	b921      	cbnz	r1, 801339e <_realloc_r+0x14>
 8013394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013398:	4611      	mov	r1, r2
 801339a:	f7fd bf2b 	b.w	80111f4 <_malloc_r>
 801339e:	b922      	cbnz	r2, 80133aa <_realloc_r+0x20>
 80133a0:	f7fd fed8 	bl	8011154 <_free_r>
 80133a4:	4625      	mov	r5, r4
 80133a6:	4628      	mov	r0, r5
 80133a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133aa:	f000 fc5f 	bl	8013c6c <_malloc_usable_size_r>
 80133ae:	42a0      	cmp	r0, r4
 80133b0:	d20f      	bcs.n	80133d2 <_realloc_r+0x48>
 80133b2:	4621      	mov	r1, r4
 80133b4:	4638      	mov	r0, r7
 80133b6:	f7fd ff1d 	bl	80111f4 <_malloc_r>
 80133ba:	4605      	mov	r5, r0
 80133bc:	2800      	cmp	r0, #0
 80133be:	d0f2      	beq.n	80133a6 <_realloc_r+0x1c>
 80133c0:	4631      	mov	r1, r6
 80133c2:	4622      	mov	r2, r4
 80133c4:	f7fd fe96 	bl	80110f4 <memcpy>
 80133c8:	4631      	mov	r1, r6
 80133ca:	4638      	mov	r0, r7
 80133cc:	f7fd fec2 	bl	8011154 <_free_r>
 80133d0:	e7e9      	b.n	80133a6 <_realloc_r+0x1c>
 80133d2:	4635      	mov	r5, r6
 80133d4:	e7e7      	b.n	80133a6 <_realloc_r+0x1c>

080133d6 <__sfputc_r>:
 80133d6:	6893      	ldr	r3, [r2, #8]
 80133d8:	3b01      	subs	r3, #1
 80133da:	2b00      	cmp	r3, #0
 80133dc:	b410      	push	{r4}
 80133de:	6093      	str	r3, [r2, #8]
 80133e0:	da08      	bge.n	80133f4 <__sfputc_r+0x1e>
 80133e2:	6994      	ldr	r4, [r2, #24]
 80133e4:	42a3      	cmp	r3, r4
 80133e6:	db01      	blt.n	80133ec <__sfputc_r+0x16>
 80133e8:	290a      	cmp	r1, #10
 80133ea:	d103      	bne.n	80133f4 <__sfputc_r+0x1e>
 80133ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133f0:	f000 b94a 	b.w	8013688 <__swbuf_r>
 80133f4:	6813      	ldr	r3, [r2, #0]
 80133f6:	1c58      	adds	r0, r3, #1
 80133f8:	6010      	str	r0, [r2, #0]
 80133fa:	7019      	strb	r1, [r3, #0]
 80133fc:	4608      	mov	r0, r1
 80133fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013402:	4770      	bx	lr

08013404 <__sfputs_r>:
 8013404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013406:	4606      	mov	r6, r0
 8013408:	460f      	mov	r7, r1
 801340a:	4614      	mov	r4, r2
 801340c:	18d5      	adds	r5, r2, r3
 801340e:	42ac      	cmp	r4, r5
 8013410:	d101      	bne.n	8013416 <__sfputs_r+0x12>
 8013412:	2000      	movs	r0, #0
 8013414:	e007      	b.n	8013426 <__sfputs_r+0x22>
 8013416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801341a:	463a      	mov	r2, r7
 801341c:	4630      	mov	r0, r6
 801341e:	f7ff ffda 	bl	80133d6 <__sfputc_r>
 8013422:	1c43      	adds	r3, r0, #1
 8013424:	d1f3      	bne.n	801340e <__sfputs_r+0xa>
 8013426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013428 <_vfiprintf_r>:
 8013428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342c:	460d      	mov	r5, r1
 801342e:	b09d      	sub	sp, #116	; 0x74
 8013430:	4614      	mov	r4, r2
 8013432:	4698      	mov	r8, r3
 8013434:	4606      	mov	r6, r0
 8013436:	b118      	cbz	r0, 8013440 <_vfiprintf_r+0x18>
 8013438:	6983      	ldr	r3, [r0, #24]
 801343a:	b90b      	cbnz	r3, 8013440 <_vfiprintf_r+0x18>
 801343c:	f000 fb14 	bl	8013a68 <__sinit>
 8013440:	4b89      	ldr	r3, [pc, #548]	; (8013668 <_vfiprintf_r+0x240>)
 8013442:	429d      	cmp	r5, r3
 8013444:	d11b      	bne.n	801347e <_vfiprintf_r+0x56>
 8013446:	6875      	ldr	r5, [r6, #4]
 8013448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801344a:	07d9      	lsls	r1, r3, #31
 801344c:	d405      	bmi.n	801345a <_vfiprintf_r+0x32>
 801344e:	89ab      	ldrh	r3, [r5, #12]
 8013450:	059a      	lsls	r2, r3, #22
 8013452:	d402      	bmi.n	801345a <_vfiprintf_r+0x32>
 8013454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013456:	f7ff ff84 	bl	8013362 <__retarget_lock_acquire_recursive>
 801345a:	89ab      	ldrh	r3, [r5, #12]
 801345c:	071b      	lsls	r3, r3, #28
 801345e:	d501      	bpl.n	8013464 <_vfiprintf_r+0x3c>
 8013460:	692b      	ldr	r3, [r5, #16]
 8013462:	b9eb      	cbnz	r3, 80134a0 <_vfiprintf_r+0x78>
 8013464:	4629      	mov	r1, r5
 8013466:	4630      	mov	r0, r6
 8013468:	f000 f96e 	bl	8013748 <__swsetup_r>
 801346c:	b1c0      	cbz	r0, 80134a0 <_vfiprintf_r+0x78>
 801346e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013470:	07dc      	lsls	r4, r3, #31
 8013472:	d50e      	bpl.n	8013492 <_vfiprintf_r+0x6a>
 8013474:	f04f 30ff 	mov.w	r0, #4294967295
 8013478:	b01d      	add	sp, #116	; 0x74
 801347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347e:	4b7b      	ldr	r3, [pc, #492]	; (801366c <_vfiprintf_r+0x244>)
 8013480:	429d      	cmp	r5, r3
 8013482:	d101      	bne.n	8013488 <_vfiprintf_r+0x60>
 8013484:	68b5      	ldr	r5, [r6, #8]
 8013486:	e7df      	b.n	8013448 <_vfiprintf_r+0x20>
 8013488:	4b79      	ldr	r3, [pc, #484]	; (8013670 <_vfiprintf_r+0x248>)
 801348a:	429d      	cmp	r5, r3
 801348c:	bf08      	it	eq
 801348e:	68f5      	ldreq	r5, [r6, #12]
 8013490:	e7da      	b.n	8013448 <_vfiprintf_r+0x20>
 8013492:	89ab      	ldrh	r3, [r5, #12]
 8013494:	0598      	lsls	r0, r3, #22
 8013496:	d4ed      	bmi.n	8013474 <_vfiprintf_r+0x4c>
 8013498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801349a:	f7ff ff63 	bl	8013364 <__retarget_lock_release_recursive>
 801349e:	e7e9      	b.n	8013474 <_vfiprintf_r+0x4c>
 80134a0:	2300      	movs	r3, #0
 80134a2:	9309      	str	r3, [sp, #36]	; 0x24
 80134a4:	2320      	movs	r3, #32
 80134a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ae:	2330      	movs	r3, #48	; 0x30
 80134b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013674 <_vfiprintf_r+0x24c>
 80134b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134b8:	f04f 0901 	mov.w	r9, #1
 80134bc:	4623      	mov	r3, r4
 80134be:	469a      	mov	sl, r3
 80134c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134c4:	b10a      	cbz	r2, 80134ca <_vfiprintf_r+0xa2>
 80134c6:	2a25      	cmp	r2, #37	; 0x25
 80134c8:	d1f9      	bne.n	80134be <_vfiprintf_r+0x96>
 80134ca:	ebba 0b04 	subs.w	fp, sl, r4
 80134ce:	d00b      	beq.n	80134e8 <_vfiprintf_r+0xc0>
 80134d0:	465b      	mov	r3, fp
 80134d2:	4622      	mov	r2, r4
 80134d4:	4629      	mov	r1, r5
 80134d6:	4630      	mov	r0, r6
 80134d8:	f7ff ff94 	bl	8013404 <__sfputs_r>
 80134dc:	3001      	adds	r0, #1
 80134de:	f000 80aa 	beq.w	8013636 <_vfiprintf_r+0x20e>
 80134e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134e4:	445a      	add	r2, fp
 80134e6:	9209      	str	r2, [sp, #36]	; 0x24
 80134e8:	f89a 3000 	ldrb.w	r3, [sl]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f000 80a2 	beq.w	8013636 <_vfiprintf_r+0x20e>
 80134f2:	2300      	movs	r3, #0
 80134f4:	f04f 32ff 	mov.w	r2, #4294967295
 80134f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134fc:	f10a 0a01 	add.w	sl, sl, #1
 8013500:	9304      	str	r3, [sp, #16]
 8013502:	9307      	str	r3, [sp, #28]
 8013504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013508:	931a      	str	r3, [sp, #104]	; 0x68
 801350a:	4654      	mov	r4, sl
 801350c:	2205      	movs	r2, #5
 801350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013512:	4858      	ldr	r0, [pc, #352]	; (8013674 <_vfiprintf_r+0x24c>)
 8013514:	f7ec fe64 	bl	80001e0 <memchr>
 8013518:	9a04      	ldr	r2, [sp, #16]
 801351a:	b9d8      	cbnz	r0, 8013554 <_vfiprintf_r+0x12c>
 801351c:	06d1      	lsls	r1, r2, #27
 801351e:	bf44      	itt	mi
 8013520:	2320      	movmi	r3, #32
 8013522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013526:	0713      	lsls	r3, r2, #28
 8013528:	bf44      	itt	mi
 801352a:	232b      	movmi	r3, #43	; 0x2b
 801352c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013530:	f89a 3000 	ldrb.w	r3, [sl]
 8013534:	2b2a      	cmp	r3, #42	; 0x2a
 8013536:	d015      	beq.n	8013564 <_vfiprintf_r+0x13c>
 8013538:	9a07      	ldr	r2, [sp, #28]
 801353a:	4654      	mov	r4, sl
 801353c:	2000      	movs	r0, #0
 801353e:	f04f 0c0a 	mov.w	ip, #10
 8013542:	4621      	mov	r1, r4
 8013544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013548:	3b30      	subs	r3, #48	; 0x30
 801354a:	2b09      	cmp	r3, #9
 801354c:	d94e      	bls.n	80135ec <_vfiprintf_r+0x1c4>
 801354e:	b1b0      	cbz	r0, 801357e <_vfiprintf_r+0x156>
 8013550:	9207      	str	r2, [sp, #28]
 8013552:	e014      	b.n	801357e <_vfiprintf_r+0x156>
 8013554:	eba0 0308 	sub.w	r3, r0, r8
 8013558:	fa09 f303 	lsl.w	r3, r9, r3
 801355c:	4313      	orrs	r3, r2
 801355e:	9304      	str	r3, [sp, #16]
 8013560:	46a2      	mov	sl, r4
 8013562:	e7d2      	b.n	801350a <_vfiprintf_r+0xe2>
 8013564:	9b03      	ldr	r3, [sp, #12]
 8013566:	1d19      	adds	r1, r3, #4
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	9103      	str	r1, [sp, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	bfbb      	ittet	lt
 8013570:	425b      	neglt	r3, r3
 8013572:	f042 0202 	orrlt.w	r2, r2, #2
 8013576:	9307      	strge	r3, [sp, #28]
 8013578:	9307      	strlt	r3, [sp, #28]
 801357a:	bfb8      	it	lt
 801357c:	9204      	strlt	r2, [sp, #16]
 801357e:	7823      	ldrb	r3, [r4, #0]
 8013580:	2b2e      	cmp	r3, #46	; 0x2e
 8013582:	d10c      	bne.n	801359e <_vfiprintf_r+0x176>
 8013584:	7863      	ldrb	r3, [r4, #1]
 8013586:	2b2a      	cmp	r3, #42	; 0x2a
 8013588:	d135      	bne.n	80135f6 <_vfiprintf_r+0x1ce>
 801358a:	9b03      	ldr	r3, [sp, #12]
 801358c:	1d1a      	adds	r2, r3, #4
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	9203      	str	r2, [sp, #12]
 8013592:	2b00      	cmp	r3, #0
 8013594:	bfb8      	it	lt
 8013596:	f04f 33ff 	movlt.w	r3, #4294967295
 801359a:	3402      	adds	r4, #2
 801359c:	9305      	str	r3, [sp, #20]
 801359e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013684 <_vfiprintf_r+0x25c>
 80135a2:	7821      	ldrb	r1, [r4, #0]
 80135a4:	2203      	movs	r2, #3
 80135a6:	4650      	mov	r0, sl
 80135a8:	f7ec fe1a 	bl	80001e0 <memchr>
 80135ac:	b140      	cbz	r0, 80135c0 <_vfiprintf_r+0x198>
 80135ae:	2340      	movs	r3, #64	; 0x40
 80135b0:	eba0 000a 	sub.w	r0, r0, sl
 80135b4:	fa03 f000 	lsl.w	r0, r3, r0
 80135b8:	9b04      	ldr	r3, [sp, #16]
 80135ba:	4303      	orrs	r3, r0
 80135bc:	3401      	adds	r4, #1
 80135be:	9304      	str	r3, [sp, #16]
 80135c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135c4:	482c      	ldr	r0, [pc, #176]	; (8013678 <_vfiprintf_r+0x250>)
 80135c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135ca:	2206      	movs	r2, #6
 80135cc:	f7ec fe08 	bl	80001e0 <memchr>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d03f      	beq.n	8013654 <_vfiprintf_r+0x22c>
 80135d4:	4b29      	ldr	r3, [pc, #164]	; (801367c <_vfiprintf_r+0x254>)
 80135d6:	bb1b      	cbnz	r3, 8013620 <_vfiprintf_r+0x1f8>
 80135d8:	9b03      	ldr	r3, [sp, #12]
 80135da:	3307      	adds	r3, #7
 80135dc:	f023 0307 	bic.w	r3, r3, #7
 80135e0:	3308      	adds	r3, #8
 80135e2:	9303      	str	r3, [sp, #12]
 80135e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e6:	443b      	add	r3, r7
 80135e8:	9309      	str	r3, [sp, #36]	; 0x24
 80135ea:	e767      	b.n	80134bc <_vfiprintf_r+0x94>
 80135ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80135f0:	460c      	mov	r4, r1
 80135f2:	2001      	movs	r0, #1
 80135f4:	e7a5      	b.n	8013542 <_vfiprintf_r+0x11a>
 80135f6:	2300      	movs	r3, #0
 80135f8:	3401      	adds	r4, #1
 80135fa:	9305      	str	r3, [sp, #20]
 80135fc:	4619      	mov	r1, r3
 80135fe:	f04f 0c0a 	mov.w	ip, #10
 8013602:	4620      	mov	r0, r4
 8013604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013608:	3a30      	subs	r2, #48	; 0x30
 801360a:	2a09      	cmp	r2, #9
 801360c:	d903      	bls.n	8013616 <_vfiprintf_r+0x1ee>
 801360e:	2b00      	cmp	r3, #0
 8013610:	d0c5      	beq.n	801359e <_vfiprintf_r+0x176>
 8013612:	9105      	str	r1, [sp, #20]
 8013614:	e7c3      	b.n	801359e <_vfiprintf_r+0x176>
 8013616:	fb0c 2101 	mla	r1, ip, r1, r2
 801361a:	4604      	mov	r4, r0
 801361c:	2301      	movs	r3, #1
 801361e:	e7f0      	b.n	8013602 <_vfiprintf_r+0x1da>
 8013620:	ab03      	add	r3, sp, #12
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	462a      	mov	r2, r5
 8013626:	4b16      	ldr	r3, [pc, #88]	; (8013680 <_vfiprintf_r+0x258>)
 8013628:	a904      	add	r1, sp, #16
 801362a:	4630      	mov	r0, r6
 801362c:	f7fd fedc 	bl	80113e8 <_printf_float>
 8013630:	4607      	mov	r7, r0
 8013632:	1c78      	adds	r0, r7, #1
 8013634:	d1d6      	bne.n	80135e4 <_vfiprintf_r+0x1bc>
 8013636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013638:	07d9      	lsls	r1, r3, #31
 801363a:	d405      	bmi.n	8013648 <_vfiprintf_r+0x220>
 801363c:	89ab      	ldrh	r3, [r5, #12]
 801363e:	059a      	lsls	r2, r3, #22
 8013640:	d402      	bmi.n	8013648 <_vfiprintf_r+0x220>
 8013642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013644:	f7ff fe8e 	bl	8013364 <__retarget_lock_release_recursive>
 8013648:	89ab      	ldrh	r3, [r5, #12]
 801364a:	065b      	lsls	r3, r3, #25
 801364c:	f53f af12 	bmi.w	8013474 <_vfiprintf_r+0x4c>
 8013650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013652:	e711      	b.n	8013478 <_vfiprintf_r+0x50>
 8013654:	ab03      	add	r3, sp, #12
 8013656:	9300      	str	r3, [sp, #0]
 8013658:	462a      	mov	r2, r5
 801365a:	4b09      	ldr	r3, [pc, #36]	; (8013680 <_vfiprintf_r+0x258>)
 801365c:	a904      	add	r1, sp, #16
 801365e:	4630      	mov	r0, r6
 8013660:	f7fe f966 	bl	8011930 <_printf_i>
 8013664:	e7e4      	b.n	8013630 <_vfiprintf_r+0x208>
 8013666:	bf00      	nop
 8013668:	080153c4 	.word	0x080153c4
 801366c:	080153e4 	.word	0x080153e4
 8013670:	080153a4 	.word	0x080153a4
 8013674:	0801524c 	.word	0x0801524c
 8013678:	08015256 	.word	0x08015256
 801367c:	080113e9 	.word	0x080113e9
 8013680:	08013405 	.word	0x08013405
 8013684:	08015252 	.word	0x08015252

08013688 <__swbuf_r>:
 8013688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801368a:	460e      	mov	r6, r1
 801368c:	4614      	mov	r4, r2
 801368e:	4605      	mov	r5, r0
 8013690:	b118      	cbz	r0, 801369a <__swbuf_r+0x12>
 8013692:	6983      	ldr	r3, [r0, #24]
 8013694:	b90b      	cbnz	r3, 801369a <__swbuf_r+0x12>
 8013696:	f000 f9e7 	bl	8013a68 <__sinit>
 801369a:	4b21      	ldr	r3, [pc, #132]	; (8013720 <__swbuf_r+0x98>)
 801369c:	429c      	cmp	r4, r3
 801369e:	d12b      	bne.n	80136f8 <__swbuf_r+0x70>
 80136a0:	686c      	ldr	r4, [r5, #4]
 80136a2:	69a3      	ldr	r3, [r4, #24]
 80136a4:	60a3      	str	r3, [r4, #8]
 80136a6:	89a3      	ldrh	r3, [r4, #12]
 80136a8:	071a      	lsls	r2, r3, #28
 80136aa:	d52f      	bpl.n	801370c <__swbuf_r+0x84>
 80136ac:	6923      	ldr	r3, [r4, #16]
 80136ae:	b36b      	cbz	r3, 801370c <__swbuf_r+0x84>
 80136b0:	6923      	ldr	r3, [r4, #16]
 80136b2:	6820      	ldr	r0, [r4, #0]
 80136b4:	1ac0      	subs	r0, r0, r3
 80136b6:	6963      	ldr	r3, [r4, #20]
 80136b8:	b2f6      	uxtb	r6, r6
 80136ba:	4283      	cmp	r3, r0
 80136bc:	4637      	mov	r7, r6
 80136be:	dc04      	bgt.n	80136ca <__swbuf_r+0x42>
 80136c0:	4621      	mov	r1, r4
 80136c2:	4628      	mov	r0, r5
 80136c4:	f000 f93c 	bl	8013940 <_fflush_r>
 80136c8:	bb30      	cbnz	r0, 8013718 <__swbuf_r+0x90>
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	60a3      	str	r3, [r4, #8]
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	1c5a      	adds	r2, r3, #1
 80136d4:	6022      	str	r2, [r4, #0]
 80136d6:	701e      	strb	r6, [r3, #0]
 80136d8:	6963      	ldr	r3, [r4, #20]
 80136da:	3001      	adds	r0, #1
 80136dc:	4283      	cmp	r3, r0
 80136de:	d004      	beq.n	80136ea <__swbuf_r+0x62>
 80136e0:	89a3      	ldrh	r3, [r4, #12]
 80136e2:	07db      	lsls	r3, r3, #31
 80136e4:	d506      	bpl.n	80136f4 <__swbuf_r+0x6c>
 80136e6:	2e0a      	cmp	r6, #10
 80136e8:	d104      	bne.n	80136f4 <__swbuf_r+0x6c>
 80136ea:	4621      	mov	r1, r4
 80136ec:	4628      	mov	r0, r5
 80136ee:	f000 f927 	bl	8013940 <_fflush_r>
 80136f2:	b988      	cbnz	r0, 8013718 <__swbuf_r+0x90>
 80136f4:	4638      	mov	r0, r7
 80136f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f8:	4b0a      	ldr	r3, [pc, #40]	; (8013724 <__swbuf_r+0x9c>)
 80136fa:	429c      	cmp	r4, r3
 80136fc:	d101      	bne.n	8013702 <__swbuf_r+0x7a>
 80136fe:	68ac      	ldr	r4, [r5, #8]
 8013700:	e7cf      	b.n	80136a2 <__swbuf_r+0x1a>
 8013702:	4b09      	ldr	r3, [pc, #36]	; (8013728 <__swbuf_r+0xa0>)
 8013704:	429c      	cmp	r4, r3
 8013706:	bf08      	it	eq
 8013708:	68ec      	ldreq	r4, [r5, #12]
 801370a:	e7ca      	b.n	80136a2 <__swbuf_r+0x1a>
 801370c:	4621      	mov	r1, r4
 801370e:	4628      	mov	r0, r5
 8013710:	f000 f81a 	bl	8013748 <__swsetup_r>
 8013714:	2800      	cmp	r0, #0
 8013716:	d0cb      	beq.n	80136b0 <__swbuf_r+0x28>
 8013718:	f04f 37ff 	mov.w	r7, #4294967295
 801371c:	e7ea      	b.n	80136f4 <__swbuf_r+0x6c>
 801371e:	bf00      	nop
 8013720:	080153c4 	.word	0x080153c4
 8013724:	080153e4 	.word	0x080153e4
 8013728:	080153a4 	.word	0x080153a4

0801372c <__ascii_wctomb>:
 801372c:	b149      	cbz	r1, 8013742 <__ascii_wctomb+0x16>
 801372e:	2aff      	cmp	r2, #255	; 0xff
 8013730:	bf85      	ittet	hi
 8013732:	238a      	movhi	r3, #138	; 0x8a
 8013734:	6003      	strhi	r3, [r0, #0]
 8013736:	700a      	strbls	r2, [r1, #0]
 8013738:	f04f 30ff 	movhi.w	r0, #4294967295
 801373c:	bf98      	it	ls
 801373e:	2001      	movls	r0, #1
 8013740:	4770      	bx	lr
 8013742:	4608      	mov	r0, r1
 8013744:	4770      	bx	lr
	...

08013748 <__swsetup_r>:
 8013748:	4b32      	ldr	r3, [pc, #200]	; (8013814 <__swsetup_r+0xcc>)
 801374a:	b570      	push	{r4, r5, r6, lr}
 801374c:	681d      	ldr	r5, [r3, #0]
 801374e:	4606      	mov	r6, r0
 8013750:	460c      	mov	r4, r1
 8013752:	b125      	cbz	r5, 801375e <__swsetup_r+0x16>
 8013754:	69ab      	ldr	r3, [r5, #24]
 8013756:	b913      	cbnz	r3, 801375e <__swsetup_r+0x16>
 8013758:	4628      	mov	r0, r5
 801375a:	f000 f985 	bl	8013a68 <__sinit>
 801375e:	4b2e      	ldr	r3, [pc, #184]	; (8013818 <__swsetup_r+0xd0>)
 8013760:	429c      	cmp	r4, r3
 8013762:	d10f      	bne.n	8013784 <__swsetup_r+0x3c>
 8013764:	686c      	ldr	r4, [r5, #4]
 8013766:	89a3      	ldrh	r3, [r4, #12]
 8013768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801376c:	0719      	lsls	r1, r3, #28
 801376e:	d42c      	bmi.n	80137ca <__swsetup_r+0x82>
 8013770:	06dd      	lsls	r5, r3, #27
 8013772:	d411      	bmi.n	8013798 <__swsetup_r+0x50>
 8013774:	2309      	movs	r3, #9
 8013776:	6033      	str	r3, [r6, #0]
 8013778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801377c:	81a3      	strh	r3, [r4, #12]
 801377e:	f04f 30ff 	mov.w	r0, #4294967295
 8013782:	e03e      	b.n	8013802 <__swsetup_r+0xba>
 8013784:	4b25      	ldr	r3, [pc, #148]	; (801381c <__swsetup_r+0xd4>)
 8013786:	429c      	cmp	r4, r3
 8013788:	d101      	bne.n	801378e <__swsetup_r+0x46>
 801378a:	68ac      	ldr	r4, [r5, #8]
 801378c:	e7eb      	b.n	8013766 <__swsetup_r+0x1e>
 801378e:	4b24      	ldr	r3, [pc, #144]	; (8013820 <__swsetup_r+0xd8>)
 8013790:	429c      	cmp	r4, r3
 8013792:	bf08      	it	eq
 8013794:	68ec      	ldreq	r4, [r5, #12]
 8013796:	e7e6      	b.n	8013766 <__swsetup_r+0x1e>
 8013798:	0758      	lsls	r0, r3, #29
 801379a:	d512      	bpl.n	80137c2 <__swsetup_r+0x7a>
 801379c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801379e:	b141      	cbz	r1, 80137b2 <__swsetup_r+0x6a>
 80137a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137a4:	4299      	cmp	r1, r3
 80137a6:	d002      	beq.n	80137ae <__swsetup_r+0x66>
 80137a8:	4630      	mov	r0, r6
 80137aa:	f7fd fcd3 	bl	8011154 <_free_r>
 80137ae:	2300      	movs	r3, #0
 80137b0:	6363      	str	r3, [r4, #52]	; 0x34
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80137b8:	81a3      	strh	r3, [r4, #12]
 80137ba:	2300      	movs	r3, #0
 80137bc:	6063      	str	r3, [r4, #4]
 80137be:	6923      	ldr	r3, [r4, #16]
 80137c0:	6023      	str	r3, [r4, #0]
 80137c2:	89a3      	ldrh	r3, [r4, #12]
 80137c4:	f043 0308 	orr.w	r3, r3, #8
 80137c8:	81a3      	strh	r3, [r4, #12]
 80137ca:	6923      	ldr	r3, [r4, #16]
 80137cc:	b94b      	cbnz	r3, 80137e2 <__swsetup_r+0x9a>
 80137ce:	89a3      	ldrh	r3, [r4, #12]
 80137d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80137d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137d8:	d003      	beq.n	80137e2 <__swsetup_r+0x9a>
 80137da:	4621      	mov	r1, r4
 80137dc:	4630      	mov	r0, r6
 80137de:	f000 fa05 	bl	8013bec <__smakebuf_r>
 80137e2:	89a0      	ldrh	r0, [r4, #12]
 80137e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137e8:	f010 0301 	ands.w	r3, r0, #1
 80137ec:	d00a      	beq.n	8013804 <__swsetup_r+0xbc>
 80137ee:	2300      	movs	r3, #0
 80137f0:	60a3      	str	r3, [r4, #8]
 80137f2:	6963      	ldr	r3, [r4, #20]
 80137f4:	425b      	negs	r3, r3
 80137f6:	61a3      	str	r3, [r4, #24]
 80137f8:	6923      	ldr	r3, [r4, #16]
 80137fa:	b943      	cbnz	r3, 801380e <__swsetup_r+0xc6>
 80137fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013800:	d1ba      	bne.n	8013778 <__swsetup_r+0x30>
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	0781      	lsls	r1, r0, #30
 8013806:	bf58      	it	pl
 8013808:	6963      	ldrpl	r3, [r4, #20]
 801380a:	60a3      	str	r3, [r4, #8]
 801380c:	e7f4      	b.n	80137f8 <__swsetup_r+0xb0>
 801380e:	2000      	movs	r0, #0
 8013810:	e7f7      	b.n	8013802 <__swsetup_r+0xba>
 8013812:	bf00      	nop
 8013814:	20000228 	.word	0x20000228
 8013818:	080153c4 	.word	0x080153c4
 801381c:	080153e4 	.word	0x080153e4
 8013820:	080153a4 	.word	0x080153a4

08013824 <abort>:
 8013824:	b508      	push	{r3, lr}
 8013826:	2006      	movs	r0, #6
 8013828:	f000 fa50 	bl	8013ccc <raise>
 801382c:	2001      	movs	r0, #1
 801382e:	f7ee f90d 	bl	8001a4c <_exit>
	...

08013834 <__sflush_r>:
 8013834:	898a      	ldrh	r2, [r1, #12]
 8013836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801383a:	4605      	mov	r5, r0
 801383c:	0710      	lsls	r0, r2, #28
 801383e:	460c      	mov	r4, r1
 8013840:	d458      	bmi.n	80138f4 <__sflush_r+0xc0>
 8013842:	684b      	ldr	r3, [r1, #4]
 8013844:	2b00      	cmp	r3, #0
 8013846:	dc05      	bgt.n	8013854 <__sflush_r+0x20>
 8013848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801384a:	2b00      	cmp	r3, #0
 801384c:	dc02      	bgt.n	8013854 <__sflush_r+0x20>
 801384e:	2000      	movs	r0, #0
 8013850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013856:	2e00      	cmp	r6, #0
 8013858:	d0f9      	beq.n	801384e <__sflush_r+0x1a>
 801385a:	2300      	movs	r3, #0
 801385c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013860:	682f      	ldr	r7, [r5, #0]
 8013862:	602b      	str	r3, [r5, #0]
 8013864:	d032      	beq.n	80138cc <__sflush_r+0x98>
 8013866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	075a      	lsls	r2, r3, #29
 801386c:	d505      	bpl.n	801387a <__sflush_r+0x46>
 801386e:	6863      	ldr	r3, [r4, #4]
 8013870:	1ac0      	subs	r0, r0, r3
 8013872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013874:	b10b      	cbz	r3, 801387a <__sflush_r+0x46>
 8013876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013878:	1ac0      	subs	r0, r0, r3
 801387a:	2300      	movs	r3, #0
 801387c:	4602      	mov	r2, r0
 801387e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013880:	6a21      	ldr	r1, [r4, #32]
 8013882:	4628      	mov	r0, r5
 8013884:	47b0      	blx	r6
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	d106      	bne.n	801389a <__sflush_r+0x66>
 801388c:	6829      	ldr	r1, [r5, #0]
 801388e:	291d      	cmp	r1, #29
 8013890:	d82c      	bhi.n	80138ec <__sflush_r+0xb8>
 8013892:	4a2a      	ldr	r2, [pc, #168]	; (801393c <__sflush_r+0x108>)
 8013894:	40ca      	lsrs	r2, r1
 8013896:	07d6      	lsls	r6, r2, #31
 8013898:	d528      	bpl.n	80138ec <__sflush_r+0xb8>
 801389a:	2200      	movs	r2, #0
 801389c:	6062      	str	r2, [r4, #4]
 801389e:	04d9      	lsls	r1, r3, #19
 80138a0:	6922      	ldr	r2, [r4, #16]
 80138a2:	6022      	str	r2, [r4, #0]
 80138a4:	d504      	bpl.n	80138b0 <__sflush_r+0x7c>
 80138a6:	1c42      	adds	r2, r0, #1
 80138a8:	d101      	bne.n	80138ae <__sflush_r+0x7a>
 80138aa:	682b      	ldr	r3, [r5, #0]
 80138ac:	b903      	cbnz	r3, 80138b0 <__sflush_r+0x7c>
 80138ae:	6560      	str	r0, [r4, #84]	; 0x54
 80138b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138b2:	602f      	str	r7, [r5, #0]
 80138b4:	2900      	cmp	r1, #0
 80138b6:	d0ca      	beq.n	801384e <__sflush_r+0x1a>
 80138b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138bc:	4299      	cmp	r1, r3
 80138be:	d002      	beq.n	80138c6 <__sflush_r+0x92>
 80138c0:	4628      	mov	r0, r5
 80138c2:	f7fd fc47 	bl	8011154 <_free_r>
 80138c6:	2000      	movs	r0, #0
 80138c8:	6360      	str	r0, [r4, #52]	; 0x34
 80138ca:	e7c1      	b.n	8013850 <__sflush_r+0x1c>
 80138cc:	6a21      	ldr	r1, [r4, #32]
 80138ce:	2301      	movs	r3, #1
 80138d0:	4628      	mov	r0, r5
 80138d2:	47b0      	blx	r6
 80138d4:	1c41      	adds	r1, r0, #1
 80138d6:	d1c7      	bne.n	8013868 <__sflush_r+0x34>
 80138d8:	682b      	ldr	r3, [r5, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d0c4      	beq.n	8013868 <__sflush_r+0x34>
 80138de:	2b1d      	cmp	r3, #29
 80138e0:	d001      	beq.n	80138e6 <__sflush_r+0xb2>
 80138e2:	2b16      	cmp	r3, #22
 80138e4:	d101      	bne.n	80138ea <__sflush_r+0xb6>
 80138e6:	602f      	str	r7, [r5, #0]
 80138e8:	e7b1      	b.n	801384e <__sflush_r+0x1a>
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138f0:	81a3      	strh	r3, [r4, #12]
 80138f2:	e7ad      	b.n	8013850 <__sflush_r+0x1c>
 80138f4:	690f      	ldr	r7, [r1, #16]
 80138f6:	2f00      	cmp	r7, #0
 80138f8:	d0a9      	beq.n	801384e <__sflush_r+0x1a>
 80138fa:	0793      	lsls	r3, r2, #30
 80138fc:	680e      	ldr	r6, [r1, #0]
 80138fe:	bf08      	it	eq
 8013900:	694b      	ldreq	r3, [r1, #20]
 8013902:	600f      	str	r7, [r1, #0]
 8013904:	bf18      	it	ne
 8013906:	2300      	movne	r3, #0
 8013908:	eba6 0807 	sub.w	r8, r6, r7
 801390c:	608b      	str	r3, [r1, #8]
 801390e:	f1b8 0f00 	cmp.w	r8, #0
 8013912:	dd9c      	ble.n	801384e <__sflush_r+0x1a>
 8013914:	6a21      	ldr	r1, [r4, #32]
 8013916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013918:	4643      	mov	r3, r8
 801391a:	463a      	mov	r2, r7
 801391c:	4628      	mov	r0, r5
 801391e:	47b0      	blx	r6
 8013920:	2800      	cmp	r0, #0
 8013922:	dc06      	bgt.n	8013932 <__sflush_r+0xfe>
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801392a:	81a3      	strh	r3, [r4, #12]
 801392c:	f04f 30ff 	mov.w	r0, #4294967295
 8013930:	e78e      	b.n	8013850 <__sflush_r+0x1c>
 8013932:	4407      	add	r7, r0
 8013934:	eba8 0800 	sub.w	r8, r8, r0
 8013938:	e7e9      	b.n	801390e <__sflush_r+0xda>
 801393a:	bf00      	nop
 801393c:	20400001 	.word	0x20400001

08013940 <_fflush_r>:
 8013940:	b538      	push	{r3, r4, r5, lr}
 8013942:	690b      	ldr	r3, [r1, #16]
 8013944:	4605      	mov	r5, r0
 8013946:	460c      	mov	r4, r1
 8013948:	b913      	cbnz	r3, 8013950 <_fflush_r+0x10>
 801394a:	2500      	movs	r5, #0
 801394c:	4628      	mov	r0, r5
 801394e:	bd38      	pop	{r3, r4, r5, pc}
 8013950:	b118      	cbz	r0, 801395a <_fflush_r+0x1a>
 8013952:	6983      	ldr	r3, [r0, #24]
 8013954:	b90b      	cbnz	r3, 801395a <_fflush_r+0x1a>
 8013956:	f000 f887 	bl	8013a68 <__sinit>
 801395a:	4b14      	ldr	r3, [pc, #80]	; (80139ac <_fflush_r+0x6c>)
 801395c:	429c      	cmp	r4, r3
 801395e:	d11b      	bne.n	8013998 <_fflush_r+0x58>
 8013960:	686c      	ldr	r4, [r5, #4]
 8013962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d0ef      	beq.n	801394a <_fflush_r+0xa>
 801396a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801396c:	07d0      	lsls	r0, r2, #31
 801396e:	d404      	bmi.n	801397a <_fflush_r+0x3a>
 8013970:	0599      	lsls	r1, r3, #22
 8013972:	d402      	bmi.n	801397a <_fflush_r+0x3a>
 8013974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013976:	f7ff fcf4 	bl	8013362 <__retarget_lock_acquire_recursive>
 801397a:	4628      	mov	r0, r5
 801397c:	4621      	mov	r1, r4
 801397e:	f7ff ff59 	bl	8013834 <__sflush_r>
 8013982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013984:	07da      	lsls	r2, r3, #31
 8013986:	4605      	mov	r5, r0
 8013988:	d4e0      	bmi.n	801394c <_fflush_r+0xc>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	059b      	lsls	r3, r3, #22
 801398e:	d4dd      	bmi.n	801394c <_fflush_r+0xc>
 8013990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013992:	f7ff fce7 	bl	8013364 <__retarget_lock_release_recursive>
 8013996:	e7d9      	b.n	801394c <_fflush_r+0xc>
 8013998:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <_fflush_r+0x70>)
 801399a:	429c      	cmp	r4, r3
 801399c:	d101      	bne.n	80139a2 <_fflush_r+0x62>
 801399e:	68ac      	ldr	r4, [r5, #8]
 80139a0:	e7df      	b.n	8013962 <_fflush_r+0x22>
 80139a2:	4b04      	ldr	r3, [pc, #16]	; (80139b4 <_fflush_r+0x74>)
 80139a4:	429c      	cmp	r4, r3
 80139a6:	bf08      	it	eq
 80139a8:	68ec      	ldreq	r4, [r5, #12]
 80139aa:	e7da      	b.n	8013962 <_fflush_r+0x22>
 80139ac:	080153c4 	.word	0x080153c4
 80139b0:	080153e4 	.word	0x080153e4
 80139b4:	080153a4 	.word	0x080153a4

080139b8 <std>:
 80139b8:	2300      	movs	r3, #0
 80139ba:	b510      	push	{r4, lr}
 80139bc:	4604      	mov	r4, r0
 80139be:	e9c0 3300 	strd	r3, r3, [r0]
 80139c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139c6:	6083      	str	r3, [r0, #8]
 80139c8:	8181      	strh	r1, [r0, #12]
 80139ca:	6643      	str	r3, [r0, #100]	; 0x64
 80139cc:	81c2      	strh	r2, [r0, #14]
 80139ce:	6183      	str	r3, [r0, #24]
 80139d0:	4619      	mov	r1, r3
 80139d2:	2208      	movs	r2, #8
 80139d4:	305c      	adds	r0, #92	; 0x5c
 80139d6:	f7fd fbb5 	bl	8011144 <memset>
 80139da:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <std+0x38>)
 80139dc:	6263      	str	r3, [r4, #36]	; 0x24
 80139de:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <std+0x3c>)
 80139e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80139e2:	4b05      	ldr	r3, [pc, #20]	; (80139f8 <std+0x40>)
 80139e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139e6:	4b05      	ldr	r3, [pc, #20]	; (80139fc <std+0x44>)
 80139e8:	6224      	str	r4, [r4, #32]
 80139ea:	6323      	str	r3, [r4, #48]	; 0x30
 80139ec:	bd10      	pop	{r4, pc}
 80139ee:	bf00      	nop
 80139f0:	08013d05 	.word	0x08013d05
 80139f4:	08013d27 	.word	0x08013d27
 80139f8:	08013d5f 	.word	0x08013d5f
 80139fc:	08013d83 	.word	0x08013d83

08013a00 <_cleanup_r>:
 8013a00:	4901      	ldr	r1, [pc, #4]	; (8013a08 <_cleanup_r+0x8>)
 8013a02:	f000 b8af 	b.w	8013b64 <_fwalk_reent>
 8013a06:	bf00      	nop
 8013a08:	08013941 	.word	0x08013941

08013a0c <__sfmoreglue>:
 8013a0c:	b570      	push	{r4, r5, r6, lr}
 8013a0e:	1e4a      	subs	r2, r1, #1
 8013a10:	2568      	movs	r5, #104	; 0x68
 8013a12:	4355      	muls	r5, r2
 8013a14:	460e      	mov	r6, r1
 8013a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a1a:	f7fd fbeb 	bl	80111f4 <_malloc_r>
 8013a1e:	4604      	mov	r4, r0
 8013a20:	b140      	cbz	r0, 8013a34 <__sfmoreglue+0x28>
 8013a22:	2100      	movs	r1, #0
 8013a24:	e9c0 1600 	strd	r1, r6, [r0]
 8013a28:	300c      	adds	r0, #12
 8013a2a:	60a0      	str	r0, [r4, #8]
 8013a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a30:	f7fd fb88 	bl	8011144 <memset>
 8013a34:	4620      	mov	r0, r4
 8013a36:	bd70      	pop	{r4, r5, r6, pc}

08013a38 <__sfp_lock_acquire>:
 8013a38:	4801      	ldr	r0, [pc, #4]	; (8013a40 <__sfp_lock_acquire+0x8>)
 8013a3a:	f7ff bc92 	b.w	8013362 <__retarget_lock_acquire_recursive>
 8013a3e:	bf00      	nop
 8013a40:	20004f40 	.word	0x20004f40

08013a44 <__sfp_lock_release>:
 8013a44:	4801      	ldr	r0, [pc, #4]	; (8013a4c <__sfp_lock_release+0x8>)
 8013a46:	f7ff bc8d 	b.w	8013364 <__retarget_lock_release_recursive>
 8013a4a:	bf00      	nop
 8013a4c:	20004f40 	.word	0x20004f40

08013a50 <__sinit_lock_acquire>:
 8013a50:	4801      	ldr	r0, [pc, #4]	; (8013a58 <__sinit_lock_acquire+0x8>)
 8013a52:	f7ff bc86 	b.w	8013362 <__retarget_lock_acquire_recursive>
 8013a56:	bf00      	nop
 8013a58:	20004f3b 	.word	0x20004f3b

08013a5c <__sinit_lock_release>:
 8013a5c:	4801      	ldr	r0, [pc, #4]	; (8013a64 <__sinit_lock_release+0x8>)
 8013a5e:	f7ff bc81 	b.w	8013364 <__retarget_lock_release_recursive>
 8013a62:	bf00      	nop
 8013a64:	20004f3b 	.word	0x20004f3b

08013a68 <__sinit>:
 8013a68:	b510      	push	{r4, lr}
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	f7ff fff0 	bl	8013a50 <__sinit_lock_acquire>
 8013a70:	69a3      	ldr	r3, [r4, #24]
 8013a72:	b11b      	cbz	r3, 8013a7c <__sinit+0x14>
 8013a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a78:	f7ff bff0 	b.w	8013a5c <__sinit_lock_release>
 8013a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013a80:	6523      	str	r3, [r4, #80]	; 0x50
 8013a82:	4b13      	ldr	r3, [pc, #76]	; (8013ad0 <__sinit+0x68>)
 8013a84:	4a13      	ldr	r2, [pc, #76]	; (8013ad4 <__sinit+0x6c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8013a8a:	42a3      	cmp	r3, r4
 8013a8c:	bf04      	itt	eq
 8013a8e:	2301      	moveq	r3, #1
 8013a90:	61a3      	streq	r3, [r4, #24]
 8013a92:	4620      	mov	r0, r4
 8013a94:	f000 f820 	bl	8013ad8 <__sfp>
 8013a98:	6060      	str	r0, [r4, #4]
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f000 f81c 	bl	8013ad8 <__sfp>
 8013aa0:	60a0      	str	r0, [r4, #8]
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	f000 f818 	bl	8013ad8 <__sfp>
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	60e0      	str	r0, [r4, #12]
 8013aac:	2104      	movs	r1, #4
 8013aae:	6860      	ldr	r0, [r4, #4]
 8013ab0:	f7ff ff82 	bl	80139b8 <std>
 8013ab4:	68a0      	ldr	r0, [r4, #8]
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	2109      	movs	r1, #9
 8013aba:	f7ff ff7d 	bl	80139b8 <std>
 8013abe:	68e0      	ldr	r0, [r4, #12]
 8013ac0:	2202      	movs	r2, #2
 8013ac2:	2112      	movs	r1, #18
 8013ac4:	f7ff ff78 	bl	80139b8 <std>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	61a3      	str	r3, [r4, #24]
 8013acc:	e7d2      	b.n	8013a74 <__sinit+0xc>
 8013ace:	bf00      	nop
 8013ad0:	08015024 	.word	0x08015024
 8013ad4:	08013a01 	.word	0x08013a01

08013ad8 <__sfp>:
 8013ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ada:	4607      	mov	r7, r0
 8013adc:	f7ff ffac 	bl	8013a38 <__sfp_lock_acquire>
 8013ae0:	4b1e      	ldr	r3, [pc, #120]	; (8013b5c <__sfp+0x84>)
 8013ae2:	681e      	ldr	r6, [r3, #0]
 8013ae4:	69b3      	ldr	r3, [r6, #24]
 8013ae6:	b913      	cbnz	r3, 8013aee <__sfp+0x16>
 8013ae8:	4630      	mov	r0, r6
 8013aea:	f7ff ffbd 	bl	8013a68 <__sinit>
 8013aee:	3648      	adds	r6, #72	; 0x48
 8013af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013af4:	3b01      	subs	r3, #1
 8013af6:	d503      	bpl.n	8013b00 <__sfp+0x28>
 8013af8:	6833      	ldr	r3, [r6, #0]
 8013afa:	b30b      	cbz	r3, 8013b40 <__sfp+0x68>
 8013afc:	6836      	ldr	r6, [r6, #0]
 8013afe:	e7f7      	b.n	8013af0 <__sfp+0x18>
 8013b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b04:	b9d5      	cbnz	r5, 8013b3c <__sfp+0x64>
 8013b06:	4b16      	ldr	r3, [pc, #88]	; (8013b60 <__sfp+0x88>)
 8013b08:	60e3      	str	r3, [r4, #12]
 8013b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8013b10:	f7ff fc26 	bl	8013360 <__retarget_lock_init_recursive>
 8013b14:	f7ff ff96 	bl	8013a44 <__sfp_lock_release>
 8013b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b20:	6025      	str	r5, [r4, #0]
 8013b22:	61a5      	str	r5, [r4, #24]
 8013b24:	2208      	movs	r2, #8
 8013b26:	4629      	mov	r1, r5
 8013b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b2c:	f7fd fb0a 	bl	8011144 <memset>
 8013b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b38:	4620      	mov	r0, r4
 8013b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b3c:	3468      	adds	r4, #104	; 0x68
 8013b3e:	e7d9      	b.n	8013af4 <__sfp+0x1c>
 8013b40:	2104      	movs	r1, #4
 8013b42:	4638      	mov	r0, r7
 8013b44:	f7ff ff62 	bl	8013a0c <__sfmoreglue>
 8013b48:	4604      	mov	r4, r0
 8013b4a:	6030      	str	r0, [r6, #0]
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d1d5      	bne.n	8013afc <__sfp+0x24>
 8013b50:	f7ff ff78 	bl	8013a44 <__sfp_lock_release>
 8013b54:	230c      	movs	r3, #12
 8013b56:	603b      	str	r3, [r7, #0]
 8013b58:	e7ee      	b.n	8013b38 <__sfp+0x60>
 8013b5a:	bf00      	nop
 8013b5c:	08015024 	.word	0x08015024
 8013b60:	ffff0001 	.word	0xffff0001

08013b64 <_fwalk_reent>:
 8013b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b68:	4606      	mov	r6, r0
 8013b6a:	4688      	mov	r8, r1
 8013b6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b70:	2700      	movs	r7, #0
 8013b72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b76:	f1b9 0901 	subs.w	r9, r9, #1
 8013b7a:	d505      	bpl.n	8013b88 <_fwalk_reent+0x24>
 8013b7c:	6824      	ldr	r4, [r4, #0]
 8013b7e:	2c00      	cmp	r4, #0
 8013b80:	d1f7      	bne.n	8013b72 <_fwalk_reent+0xe>
 8013b82:	4638      	mov	r0, r7
 8013b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b88:	89ab      	ldrh	r3, [r5, #12]
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d907      	bls.n	8013b9e <_fwalk_reent+0x3a>
 8013b8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b92:	3301      	adds	r3, #1
 8013b94:	d003      	beq.n	8013b9e <_fwalk_reent+0x3a>
 8013b96:	4629      	mov	r1, r5
 8013b98:	4630      	mov	r0, r6
 8013b9a:	47c0      	blx	r8
 8013b9c:	4307      	orrs	r7, r0
 8013b9e:	3568      	adds	r5, #104	; 0x68
 8013ba0:	e7e9      	b.n	8013b76 <_fwalk_reent+0x12>

08013ba2 <__swhatbuf_r>:
 8013ba2:	b570      	push	{r4, r5, r6, lr}
 8013ba4:	460e      	mov	r6, r1
 8013ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013baa:	2900      	cmp	r1, #0
 8013bac:	b096      	sub	sp, #88	; 0x58
 8013bae:	4614      	mov	r4, r2
 8013bb0:	461d      	mov	r5, r3
 8013bb2:	da07      	bge.n	8013bc4 <__swhatbuf_r+0x22>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	602b      	str	r3, [r5, #0]
 8013bb8:	89b3      	ldrh	r3, [r6, #12]
 8013bba:	061a      	lsls	r2, r3, #24
 8013bbc:	d410      	bmi.n	8013be0 <__swhatbuf_r+0x3e>
 8013bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bc2:	e00e      	b.n	8013be2 <__swhatbuf_r+0x40>
 8013bc4:	466a      	mov	r2, sp
 8013bc6:	f000 f903 	bl	8013dd0 <_fstat_r>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	dbf2      	blt.n	8013bb4 <__swhatbuf_r+0x12>
 8013bce:	9a01      	ldr	r2, [sp, #4]
 8013bd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013bd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013bd8:	425a      	negs	r2, r3
 8013bda:	415a      	adcs	r2, r3
 8013bdc:	602a      	str	r2, [r5, #0]
 8013bde:	e7ee      	b.n	8013bbe <__swhatbuf_r+0x1c>
 8013be0:	2340      	movs	r3, #64	; 0x40
 8013be2:	2000      	movs	r0, #0
 8013be4:	6023      	str	r3, [r4, #0]
 8013be6:	b016      	add	sp, #88	; 0x58
 8013be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bec <__smakebuf_r>:
 8013bec:	898b      	ldrh	r3, [r1, #12]
 8013bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bf0:	079d      	lsls	r5, r3, #30
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	460c      	mov	r4, r1
 8013bf6:	d507      	bpl.n	8013c08 <__smakebuf_r+0x1c>
 8013bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	6123      	str	r3, [r4, #16]
 8013c00:	2301      	movs	r3, #1
 8013c02:	6163      	str	r3, [r4, #20]
 8013c04:	b002      	add	sp, #8
 8013c06:	bd70      	pop	{r4, r5, r6, pc}
 8013c08:	ab01      	add	r3, sp, #4
 8013c0a:	466a      	mov	r2, sp
 8013c0c:	f7ff ffc9 	bl	8013ba2 <__swhatbuf_r>
 8013c10:	9900      	ldr	r1, [sp, #0]
 8013c12:	4605      	mov	r5, r0
 8013c14:	4630      	mov	r0, r6
 8013c16:	f7fd faed 	bl	80111f4 <_malloc_r>
 8013c1a:	b948      	cbnz	r0, 8013c30 <__smakebuf_r+0x44>
 8013c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c20:	059a      	lsls	r2, r3, #22
 8013c22:	d4ef      	bmi.n	8013c04 <__smakebuf_r+0x18>
 8013c24:	f023 0303 	bic.w	r3, r3, #3
 8013c28:	f043 0302 	orr.w	r3, r3, #2
 8013c2c:	81a3      	strh	r3, [r4, #12]
 8013c2e:	e7e3      	b.n	8013bf8 <__smakebuf_r+0xc>
 8013c30:	4b0d      	ldr	r3, [pc, #52]	; (8013c68 <__smakebuf_r+0x7c>)
 8013c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c34:	89a3      	ldrh	r3, [r4, #12]
 8013c36:	6020      	str	r0, [r4, #0]
 8013c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c3c:	81a3      	strh	r3, [r4, #12]
 8013c3e:	9b00      	ldr	r3, [sp, #0]
 8013c40:	6163      	str	r3, [r4, #20]
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	6120      	str	r0, [r4, #16]
 8013c46:	b15b      	cbz	r3, 8013c60 <__smakebuf_r+0x74>
 8013c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f000 f8d1 	bl	8013df4 <_isatty_r>
 8013c52:	b128      	cbz	r0, 8013c60 <__smakebuf_r+0x74>
 8013c54:	89a3      	ldrh	r3, [r4, #12]
 8013c56:	f023 0303 	bic.w	r3, r3, #3
 8013c5a:	f043 0301 	orr.w	r3, r3, #1
 8013c5e:	81a3      	strh	r3, [r4, #12]
 8013c60:	89a0      	ldrh	r0, [r4, #12]
 8013c62:	4305      	orrs	r5, r0
 8013c64:	81a5      	strh	r5, [r4, #12]
 8013c66:	e7cd      	b.n	8013c04 <__smakebuf_r+0x18>
 8013c68:	08013a01 	.word	0x08013a01

08013c6c <_malloc_usable_size_r>:
 8013c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c70:	1f18      	subs	r0, r3, #4
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	bfbc      	itt	lt
 8013c76:	580b      	ldrlt	r3, [r1, r0]
 8013c78:	18c0      	addlt	r0, r0, r3
 8013c7a:	4770      	bx	lr

08013c7c <_raise_r>:
 8013c7c:	291f      	cmp	r1, #31
 8013c7e:	b538      	push	{r3, r4, r5, lr}
 8013c80:	4604      	mov	r4, r0
 8013c82:	460d      	mov	r5, r1
 8013c84:	d904      	bls.n	8013c90 <_raise_r+0x14>
 8013c86:	2316      	movs	r3, #22
 8013c88:	6003      	str	r3, [r0, #0]
 8013c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c8e:	bd38      	pop	{r3, r4, r5, pc}
 8013c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c92:	b112      	cbz	r2, 8013c9a <_raise_r+0x1e>
 8013c94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c98:	b94b      	cbnz	r3, 8013cae <_raise_r+0x32>
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f000 f830 	bl	8013d00 <_getpid_r>
 8013ca0:	462a      	mov	r2, r5
 8013ca2:	4601      	mov	r1, r0
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013caa:	f000 b817 	b.w	8013cdc <_kill_r>
 8013cae:	2b01      	cmp	r3, #1
 8013cb0:	d00a      	beq.n	8013cc8 <_raise_r+0x4c>
 8013cb2:	1c59      	adds	r1, r3, #1
 8013cb4:	d103      	bne.n	8013cbe <_raise_r+0x42>
 8013cb6:	2316      	movs	r3, #22
 8013cb8:	6003      	str	r3, [r0, #0]
 8013cba:	2001      	movs	r0, #1
 8013cbc:	e7e7      	b.n	8013c8e <_raise_r+0x12>
 8013cbe:	2400      	movs	r4, #0
 8013cc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	4798      	blx	r3
 8013cc8:	2000      	movs	r0, #0
 8013cca:	e7e0      	b.n	8013c8e <_raise_r+0x12>

08013ccc <raise>:
 8013ccc:	4b02      	ldr	r3, [pc, #8]	; (8013cd8 <raise+0xc>)
 8013cce:	4601      	mov	r1, r0
 8013cd0:	6818      	ldr	r0, [r3, #0]
 8013cd2:	f7ff bfd3 	b.w	8013c7c <_raise_r>
 8013cd6:	bf00      	nop
 8013cd8:	20000228 	.word	0x20000228

08013cdc <_kill_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d07      	ldr	r5, [pc, #28]	; (8013cfc <_kill_r+0x20>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	4611      	mov	r1, r2
 8013ce8:	602b      	str	r3, [r5, #0]
 8013cea:	f7ed fe9f 	bl	8001a2c <_kill>
 8013cee:	1c43      	adds	r3, r0, #1
 8013cf0:	d102      	bne.n	8013cf8 <_kill_r+0x1c>
 8013cf2:	682b      	ldr	r3, [r5, #0]
 8013cf4:	b103      	cbz	r3, 8013cf8 <_kill_r+0x1c>
 8013cf6:	6023      	str	r3, [r4, #0]
 8013cf8:	bd38      	pop	{r3, r4, r5, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20004f34 	.word	0x20004f34

08013d00 <_getpid_r>:
 8013d00:	f7ed be8c 	b.w	8001a1c <_getpid>

08013d04 <__sread>:
 8013d04:	b510      	push	{r4, lr}
 8013d06:	460c      	mov	r4, r1
 8013d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d0c:	f000 f894 	bl	8013e38 <_read_r>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	bfab      	itete	ge
 8013d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d16:	89a3      	ldrhlt	r3, [r4, #12]
 8013d18:	181b      	addge	r3, r3, r0
 8013d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d1e:	bfac      	ite	ge
 8013d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d22:	81a3      	strhlt	r3, [r4, #12]
 8013d24:	bd10      	pop	{r4, pc}

08013d26 <__swrite>:
 8013d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2a:	461f      	mov	r7, r3
 8013d2c:	898b      	ldrh	r3, [r1, #12]
 8013d2e:	05db      	lsls	r3, r3, #23
 8013d30:	4605      	mov	r5, r0
 8013d32:	460c      	mov	r4, r1
 8013d34:	4616      	mov	r6, r2
 8013d36:	d505      	bpl.n	8013d44 <__swrite+0x1e>
 8013d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d3c:	2302      	movs	r3, #2
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f000 f868 	bl	8013e14 <_lseek_r>
 8013d44:	89a3      	ldrh	r3, [r4, #12]
 8013d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	4632      	mov	r2, r6
 8013d52:	463b      	mov	r3, r7
 8013d54:	4628      	mov	r0, r5
 8013d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5a:	f000 b817 	b.w	8013d8c <_write_r>

08013d5e <__sseek>:
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	460c      	mov	r4, r1
 8013d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d66:	f000 f855 	bl	8013e14 <_lseek_r>
 8013d6a:	1c43      	adds	r3, r0, #1
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	bf15      	itete	ne
 8013d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d7a:	81a3      	strheq	r3, [r4, #12]
 8013d7c:	bf18      	it	ne
 8013d7e:	81a3      	strhne	r3, [r4, #12]
 8013d80:	bd10      	pop	{r4, pc}

08013d82 <__sclose>:
 8013d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d86:	f000 b813 	b.w	8013db0 <_close_r>
	...

08013d8c <_write_r>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4d07      	ldr	r5, [pc, #28]	; (8013dac <_write_r+0x20>)
 8013d90:	4604      	mov	r4, r0
 8013d92:	4608      	mov	r0, r1
 8013d94:	4611      	mov	r1, r2
 8013d96:	2200      	movs	r2, #0
 8013d98:	602a      	str	r2, [r5, #0]
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	f7ed fe7d 	bl	8001a9a <_write>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d102      	bne.n	8013daa <_write_r+0x1e>
 8013da4:	682b      	ldr	r3, [r5, #0]
 8013da6:	b103      	cbz	r3, 8013daa <_write_r+0x1e>
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	bd38      	pop	{r3, r4, r5, pc}
 8013dac:	20004f34 	.word	0x20004f34

08013db0 <_close_r>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4d06      	ldr	r5, [pc, #24]	; (8013dcc <_close_r+0x1c>)
 8013db4:	2300      	movs	r3, #0
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	f7ed fe89 	bl	8001ad2 <_close>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d102      	bne.n	8013dca <_close_r+0x1a>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	b103      	cbz	r3, 8013dca <_close_r+0x1a>
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	bd38      	pop	{r3, r4, r5, pc}
 8013dcc:	20004f34 	.word	0x20004f34

08013dd0 <_fstat_r>:
 8013dd0:	b538      	push	{r3, r4, r5, lr}
 8013dd2:	4d07      	ldr	r5, [pc, #28]	; (8013df0 <_fstat_r+0x20>)
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	4608      	mov	r0, r1
 8013dda:	4611      	mov	r1, r2
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	f7ed fe84 	bl	8001aea <_fstat>
 8013de2:	1c43      	adds	r3, r0, #1
 8013de4:	d102      	bne.n	8013dec <_fstat_r+0x1c>
 8013de6:	682b      	ldr	r3, [r5, #0]
 8013de8:	b103      	cbz	r3, 8013dec <_fstat_r+0x1c>
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	bd38      	pop	{r3, r4, r5, pc}
 8013dee:	bf00      	nop
 8013df0:	20004f34 	.word	0x20004f34

08013df4 <_isatty_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	4d06      	ldr	r5, [pc, #24]	; (8013e10 <_isatty_r+0x1c>)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	4608      	mov	r0, r1
 8013dfe:	602b      	str	r3, [r5, #0]
 8013e00:	f7ed fe83 	bl	8001b0a <_isatty>
 8013e04:	1c43      	adds	r3, r0, #1
 8013e06:	d102      	bne.n	8013e0e <_isatty_r+0x1a>
 8013e08:	682b      	ldr	r3, [r5, #0]
 8013e0a:	b103      	cbz	r3, 8013e0e <_isatty_r+0x1a>
 8013e0c:	6023      	str	r3, [r4, #0]
 8013e0e:	bd38      	pop	{r3, r4, r5, pc}
 8013e10:	20004f34 	.word	0x20004f34

08013e14 <_lseek_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d07      	ldr	r5, [pc, #28]	; (8013e34 <_lseek_r+0x20>)
 8013e18:	4604      	mov	r4, r0
 8013e1a:	4608      	mov	r0, r1
 8013e1c:	4611      	mov	r1, r2
 8013e1e:	2200      	movs	r2, #0
 8013e20:	602a      	str	r2, [r5, #0]
 8013e22:	461a      	mov	r2, r3
 8013e24:	f7ed fe7c 	bl	8001b20 <_lseek>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d102      	bne.n	8013e32 <_lseek_r+0x1e>
 8013e2c:	682b      	ldr	r3, [r5, #0]
 8013e2e:	b103      	cbz	r3, 8013e32 <_lseek_r+0x1e>
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	bd38      	pop	{r3, r4, r5, pc}
 8013e34:	20004f34 	.word	0x20004f34

08013e38 <_read_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	4d07      	ldr	r5, [pc, #28]	; (8013e58 <_read_r+0x20>)
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	4608      	mov	r0, r1
 8013e40:	4611      	mov	r1, r2
 8013e42:	2200      	movs	r2, #0
 8013e44:	602a      	str	r2, [r5, #0]
 8013e46:	461a      	mov	r2, r3
 8013e48:	f7ed fe0a 	bl	8001a60 <_read>
 8013e4c:	1c43      	adds	r3, r0, #1
 8013e4e:	d102      	bne.n	8013e56 <_read_r+0x1e>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	b103      	cbz	r3, 8013e56 <_read_r+0x1e>
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	20004f34 	.word	0x20004f34

08013e5c <_init>:
 8013e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e5e:	bf00      	nop
 8013e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e62:	bc08      	pop	{r3}
 8013e64:	469e      	mov	lr, r3
 8013e66:	4770      	bx	lr

08013e68 <_fini>:
 8013e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6a:	bf00      	nop
 8013e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e6e:	bc08      	pop	{r3}
 8013e70:	469e      	mov	lr, r3
 8013e72:	4770      	bx	lr
